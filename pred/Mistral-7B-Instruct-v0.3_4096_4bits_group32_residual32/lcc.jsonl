{"pred": "\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tforeach ( NetState ns in p.Players )\n\t\t\t\t{\n\t\t\t\t\tns.CloseGump( types, defs );\n\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\ndef find_roots(A):\n\troots = []\n\tfor node in A.nodes():\n\t\tif A.in_degree(node) == 0:\n\t\t\troots.append(node)\n\treturn roots\n\nPlease complete the code to find the", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\ndef test_seek_rw():\n    \"\"\"Test seek for read/write files.\"\"\"\n    ofilename = join(TEST_DATA_DIR, 'test.wav')\n    fd, cfilename = open_tmp_file('pysndfiletest.wav')\n    try", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def _get_embed_code(self):\n        \"\"\"\n        Returns the embed code for the video.\n        \"\"\"\n        self.click_by_css(self._SUBTITLE_MENU)\n        self.click_by_css(self._EMBED", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    def __init__(self, question, answers, category, type=TYPE_TRIVIA):\n        super(_QuestionData, self).__init__()\n        self.question = question\n        self.answers = answers\n        self.category = category\n        self.type =", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a name:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                cert.checkValidity();\n                s.println(\"  \" + cert);\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n *", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           try {\n                sp = new JESpace (name, path);\n            } catch (SpaceError e) {\n                warn (e);\n                return null;\n            }\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Dungeon.hero.hasAmuletOfImpulse()) {\n\t\t\t\tRedButton btnImp = new RedButton(Messages.", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "def main():\n    \"\"\"Main function\"\"\"\n    if len(sys.argv) < 2:\n        print(__doc__)\n        sys.exit(1)\n    try:\n        dispatcher = SoapDispatcher(sys.argv[1])\n        if len(sys.argv", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "\n    def lock_status(self, status_id):\n        self.statuses.remove(self.__get_status_by_id(status_id))\n        self.conversations.get(status_id, []).remove(self.__get_status_by_id(", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\ndef run_subprocess(logger, action, status_id, action_type, params):\n    try:\n        logger.info(\"FM starting subprocess %s %s\", action, params)\n        p = Process(target=action_type(**params), name=action)\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, c), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, c), \"!ReferenceEquals", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "\ndef _get_ssl_context(keyfile=None, certfile=None, ca_certs=None):\n    return _get_ssl_context(keyfile, certfile, ca_certs)\n\nThis function is supposed to return an SSLContext object. It seems like it", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_fd = await self.__server.create_pipe(\n            self.__event_loop,\n            self.__datastream_address,\n            self.__datastream_address)\n        self.__datastream_transport = down_cast(\n            asyncio", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, 0);\n\t\t\t\t\t//get the value of the first column\n\t\t\t\t\tstring jumpIDString = store.GetValue (iter", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = \"\";\n                continue;\n            }\n           ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic static void loadFromFile()\n\t{\n\t\tfor(File file : File.values())\n\t\t{\n\t\t\tfile.getConfigFile().load", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               if (Core.AOS)\n                {\n                    if (m_Owner.Caster.Party != null)\n                    {\n                        foreach (Mobile m in m_Owner.Caster.Party.GetPartyMembers())\n                        {\n                           ", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "\n```python\n        for state in states:\n            if state.is_new:\n                state.instance._sa_instance_state = state\n            state.instance._sa_instance_state = state\n```\n\nThis code is setting the `_sa_instance_state", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new ArrayList", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "\ndef _get_template_loader(self, path):\n    \"\"\"Return a template loader for the given path.\"\"\"\n    with self._template_loader_lock:\n        loader = self._template_loaders.get(path)\n        if loader is None:\n            loader = self._", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "\nif __name__ == '__main__':\n    args = parser.parse_args()\n\n    wd = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    wd.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "           }\n            if (item is BaseArmor)\n            {\n                BaseArmor i = item as BaseArmor;\n                // ArmorSkill replace ArmorSkill\n                if (mod >= 131 && mod <= 135)\n               ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "builds += android_builds(build, builds)\n\n    # Add the desktop build to the list\n    if platform == 'desktop':\n        builds.append({\n            'os': 'os_' + platform,\n            'os_pretty': 'Desktop',\n           ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\treturn stateBeansList!=null && !stateBeansList.isEmpty();\n\t}\n}", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach ( var argumentSyntax in argumentSyntaxs ) {\n                if ( argumentSyntax.Parent.Parent.GetType() == typeof( InvocationExpressionSyntax ) ) {\n                    var invocationExpression = (InvocationExpressionSyntax) argumentSyntax.Parent.Parent;\n                    var methodDeclaration", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Set to second group configuration.\n        split_test = self._update_partition_id(1)\n        # Verify that the children have been updated to match the new group configuration.\n        self._assert_children", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // TODO: Add the following code\n            // if (cff)\n            //    tmp.Add(GetCIDFontType2(piref, subsetPrefix, metrics));\n            // else\n            //    tmp.Add(GetCIDFontType1(piref, subset", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\t// find the parent cell\n\t\t\t\t\t\tGraphNode parent = null;\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      try (InputStream is = context.getAssets().open(model.getSprite())) {\n        return BitmapUtil.decodeSam", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n                // Command history down\n                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n@navigator.register(Node, 'EditTags')\nclass EditTags(CFMENavigateStep):\n    VIEW = NodeEditTagsView\n    prerequisite = NavigateToAttribute('collection', 'All')\n    def step(self):\n        row = self.", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\n\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\n\t\tNext line of code:\n\n\t\tfor (IJPoseListener listener : pose", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "==================\ndamage = compound.getInteger(\"damage\");\n\nThis line of code is reading the damage value from the NBT tag compound and storing it in the `damage` variable. This value will be used to determine the current damage level of the item in the trap.", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getSpecification().getDescription() + \" (\" + getProbability() + \"%)\";\n\nReplace the above line with the following:\n        return getSpecification().getDescription() + \" (\" + getProbability() + \"%)\";\n\nThis change is necessary because the get", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\ni = store.handle_indicators_create(t, {\n    'indicator': 'example.com',\n    'group': 'everyone',\n    'provider': 'example.com',\n    'tags': ['test'],\n    'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n    def test_circular_reference_deltas_3(self):\n        self.circular_reference_deltas_3(Document, Document)\n        self.circular_reference_deltas_3(Document, DynamicDocument)\n        self.circular", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "\ndef inspect_l1b_product(product_file_path, output_path=None, output_format=None):\n    inspector = inspect_l1b_product(product_file_path, output_path, output_format)\n    inspector.plot.locations", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!toScan.Contains(path) && !ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var item in ignored)\n            {\n                if (toScan.Contains(item", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key,\n\t\t\t\t\t BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "\n        resbrains = getToolByName(self.context, 'uid_catalog').searchResults(query)\n\nWhat is the purpose of this line of code?\n\nThe line of code is used to search for the object with the specified UID (Unique Identifier) in the catalog (search", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\n\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tinternal byte m_Hue;\n\t\tinternal byte m_Light;\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    channelUri = String.Format(\"sip:{0}@{1}\", land.OwnerID, m_freeSwitchRealm);\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\"", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.DateTime;\n\t\t\tPayPeriodCur.DateStop=textDateStop.DateTime;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.DateTime;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "\n    lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n\ndef _generate_cubes(header, column_headings, coords, data_arrays,\n                   cell_methods):\n    \"\"\"\n    Generate a", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    return _group_or_org_member_create(context, data_dict)\n\nThe code is incomplete. The function `_group_or_org_member_create` is not defined. You should define this function", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString label = example.getValue(predictionAttribute).toString();\n\t\t\t\toutcomes[parentIndex] = node.getChild(label).getPartitionId();\n\t\t\t\tconfidences[parentIndex] *= node.getChild(label).getConfidence();", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           var results = new List<SearchResult>();\n            var segmentCount = segments.Length;\n            var result = new SearchResult[segmentCount];\n            for (int i = 0; i < segmentCount; i++)\n            {\n                result[i] = new SearchResult();", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (_range != null) {\n               int high = _range.getHigh();\n               if (high <= codePoint) {\n                  if (codePoint <= _range.getLow()) {\n                     return offset + 1;\n                  }\n                  return -1;", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "ObservationHistoryDAO observationHistoryDAO = new ObservationHistoryDAOImpl();\n\n\t\tObservationHistory observationHistory = observationHistoryDAO.getObservationHistoryByAccessionNumber(accessionNumber);\n\t\tif (observationHistory != null) {\n\t\t\tif (", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest.Id)\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValueSeq(seqindex,ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "\ndef main():\n  app = web.application( ( ( \"/\", AccountingplotsController() ), ),\n                          globals(),\n                          __name__ )\n  app.run()\n\nPlease complete the code to make it work.\n\nThe code provided is a Python script that", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var builder in builders)\n\t\t\t\tbuilder.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n}", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Save the compiled plan for later use\n        m_currentPlan = plan;\n        // Save the compiled plan to disk\n        savePlan(name, plan);\n        return plan.getRoot();\n    }\n    /**\n     * Save the compiled plan to disk.\n     * @", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(240, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t//\n\t\t\t// textBox2\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity;\n\t\t\tdcb.ByteSize = (byte) data_bits;\n\t\t\tdcb.StopBits = (byte) bits;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "\n    def test_user_with_cobrand_admin(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self.user)", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    suite = TestMethods()\n    suite.run(argv=sys.argv)\n\nif __name__ == '__main__':\n    main()", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\n\t\tfor ap in newList:\n\t\t\tif ap not in self.oldlist.keys():\n\t\t\t\tself.newAPList.append(self.buildEntryComponent(ap['essid'], ap['bssid'], ap['encrypted'], ap['interface'], ap['", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float[] widths = new float[fCode.Length];\n                for (int k = 0; k < fCode.Length; ++k) {\n                    int idx = CHARS.IndexOf(fCode[k]);\n                    widths[k] =", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\nThe code is a utility class that provides various methods for working with Java Properties objects. It includes methods for checking if a property exists, printing properties, converting properties to a map, sorting entries, checking properties, getting properties of specific types, loading arrays of", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "\n    def test_tri_polar__nearest_extended_range(self):\n        # Check a smallish nearest-neighbour interpolation against a result\n        # snapshot, with an extended range of longitude values.\n        test_cube = self.cube\n       ", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\ndef get_timbre_pitches_loudness(wav_dir):\n    \"\"\"\n    This function will get the timbre, pitches, loudness and other features from the echonest api\n    :param wav_dir:\n    :return:\n    \"\"\"", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       public bool IsEmpty {\n            get { return _numValues == 0; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(261, 3", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll, resultType=ctypes.c_int, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"Create a null function for the given name\"\"\"\n        func = ctypesloader.", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n            // Write the empty streams bitset\n            baos.write(emptyStreams.toByteArray());\n\n            // Write the size of the bitset\n            header.writeInt(baos.size());\n\n            // Write the bitset\n            header.write(baos.", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel += (rampUp ? 1 : -1);\n                }\n                if (alphaLevel == 0 && rampUp)\n                {\n                    rampUp = false;\n                    inRamp = true;\n                }\n                if (", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "f.writelines(['F) ', str(NXPTS), '\t\t# Number of pixels in X direction',\\\n                      ' for the PSF\\n'])\nf.writelines(['G) ', str(NYPTS), '\t\t# Number of pixels in Y direction',", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* D", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        course_key = CourseKey(self._course_dict['org'], self._course_dict['number'], self._course_dict['run'])\n        url = STUDIO", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tint result = 0;\n\t\tif (splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\tRandom random = new Random();\n\t\tresult = (int) (random.next", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    # This function downloads the meter's key.pem and ca.pem files from the api host\n    # It should be called after the meter is created\n    pass\ndef main():\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy.Location = new System.Drawing.Point(6, 6);\n\nPlease change the location of chkPrivacy to the new location.\n\n            this.chkPrivacy.Location = new System.Drawing.Point(6, 15);\n\n           ", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "\n```\n    self.ui_log.info(_(\" Collecting system information ...\"))\n    for plugname, plug in self.loaded_plugins:\n        try:\n            plug.collect()\n        except KeyboardInterrupt:\n            raise\n        except:\n            if self", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\nclass ISessionParticipationFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Participation Id \"\"\"\n    def getFirstName(self):\n        \"\"\" Session Participation First Name \"\"\"\n    def getLastName(self):\n        \"\"\" Session Participation", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            parent.alertError(parent, \"Error importing message: \" + e.getMessage());\n                            setVisible(false);\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(ScriptRuntime.getNumberPrototype(), \"layer\");\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n        if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, userInfoSession, parameters);\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n}\n\nThe code is a part of a talking system for a game", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "       self.assertListEqual([\n            {\n                'stage': {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at':", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   #Lat = phi1\n    Lat = phi1 + (eccSquared/2*sin(phi1Rad)*(1-eccSquared/6*sin(2*phi1Rad)\n                                               +eccSquared*eccSqu", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "form = ReportUserForm(request.POST)\nif form.is_valid():\n    report = form.save(commit=False)\n    report.user = request.user\n    report.save()\n    messages.success(request, \"User reported!\")\n    return HttpResponseRedirect", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "\n    label = \"Add a new series\"\n    field_names = [\n        \"name\",\n        \"description\",\n        \"status\",\n        \"development_focus\",\n        \"development_focus_branch\",\n        \"development_focus_branch_revision\",\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "\ndef initialize_config(config_file=None, defaults=None, constants=None,\n                      post_processors=None):\n    '''\n    Initialize the config object.\n    '''\n    if defaults is None:\n        defaults = AttrDict()\n        define_defaults(", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                return new", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_VehicleSpeed\"\n    fields_desc = [\n        ScalingField('data', 0, unit=\"km/h\")\n    ]\n\nclass OBD_PID", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\n\t\tself.bus_name.add_match_rule(\"type='signal',interface='org.freedesktop.Secret.Item.Created'\")\n\t\tself.bus_name.add_match_rule(\"type='signal',interface='org.freedesktop.Secret", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(Prism), 1044360, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.SetNeededExpansion(index, Expansion.ML", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __enter__(self):\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if exc_type is not None:\n            reraise(exc", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "\n    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n\n    return response\n\n    # This is the same as the previous code", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "\n    dx = np.sin(angles - min_rot_angle)\n    dy = np.cos(angles - min_rot_angle)\n    dx_sq = dx**2\n    dy_sq = dy**2\n    # Compute lower and upper bounds\n    lower_bound", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\ndef get_title_and_url(item):\n    title = item.find('title').text\n    url = item.find('link').text\n    return title, url\n\nThis function is used to extract the title and URL from an RSS item. It should be used in the", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\telse\n\t\t\t\treturn font_size_names [(int) type];\n\t\t}\n\t\t\n\t\tpublic override string ToString ()\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    if (w != 0 && h != 0) {\n                        edges.add(T2.of(w + width * h, w - 1 + height * (h - 1)));", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "====================\n\ni1 = iso.Isoelastics([ds])\n\nThis line of code creates an instance of the Isoelastics class, which is used to perform isoelasticity analysis on the provided data. In this case, the data is provided as a list containing", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\nhistory = [\n    {u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43, tzutc()),\n     u'ProductDescription': 'Windows',\n     u'InstanceType': 'g", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tOpenGL.Dispose();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat(", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n        return null;\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  adminUser = getEucalyptusAdmin();\n                }\n              } catch (AuthException e) {\n                LOG.error(\"Failed to lookup account ID \" + walrusObject.getOwnerId() + \" for object \" + walrusObject.getObjectKey()", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }\n        #", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters(), isImportAsCloned);\n        List<ConstraintViolation<ImportVmTemplateCommand>> violations = ValidationUtils.validate(command);\n        if (violations.size() > 0) {", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(4));\n\t\t\tw10.RightAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "   def validate(self):\n        \"\"\"\n        Validate the script environment and return True if all is good\n        \"\"\"\n        # TODO: Add your own validation here\n        # This is a placeholder for you to add your own validation\n        # code.  If you don't need to validate anything", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)\n\t\t{\n\t\t\treturn DefineMethod(name,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "\n      return new Builder(prototype);\n    }\n    public override pb::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitationTypes.Descriptor; }\n    }\n    \n    public static SendInvitationRequest.Builder CreateBuilder", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "vertices[x] = new Vector3f();\n            }\n            IntBuffer indices = getIndexBuffer();\n            vertices[0].set(getVertex(indices.get(getVertIndex(i, 0))));\n            vertices[1].set(getVertex(indices.get(", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (!CmsStringUtil.isEmptyOrNull(showDateData)) {\n            // backward compatibility: check for property defining visibility of date columns\n            String[] showDates = CmsStringUtil.split(showDateData, ',');\n            for (int i = 0; i <", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0 && !Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (directions ==", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // check if all criteria codes are used\n            if (CriteriaCodesUsed.Count != DiscountTable.Columns.Count)\n            {\n                // displays a warning message\n                ValidationColumn = DiscountTable.Columns[PcDiscountTable.ColumnDiscountCriteriaCode];\n", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s, applied=%s)\" % (\n            self.packages, self.groups, self.applied)\n\nThis code defines the `__str__` method for the `PayloadRequirements`", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\tget { return Enabled && !CopyRange; }\n\t\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange == value", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget {\n\t\t\t\treturn confDir;\n\t\t\t}\n\t\t}\n\t\tpublic string CacheDirectory {\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           assert bugAnnotation.getAnnotationType() != null;\n            assert bugAnnotation.getAnnotationType().getBugType() != null;\n            assert bugAnnotation.getAnnotationType().getBugType().getBugTypeName() != null;\n            assert bugAnnotation.getAnnotationType().", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Apple : Food\n{\n\t[Constructable]\n\tpublic Apple() : this( 1 )\n\t{\n\t}\n\t[Constructable]\n\tpublic Apple( int amount ) : base( amount, 0x137F )\n\t{\n\t\tthis", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") &&", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n}\n/**\n * Returns a GridBagConstraint\n * @param x\n * @param y\n * @param width\n * @param height\n * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\n    def poll(self):\n        self._connect()\n        self._sh.log('DWD: Polling...')\n        self._sh.log('DWD: Current weather...')\n        current = self.current('01000')\n        if current:\n           ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\ndef test_suite():\n    \"\"\"Unit tests for the parser engine.\"\"\"\n    return make_test_suite(TestParser)\n\nif __name__ == '__main__':\n    run_test_suite(test_suite())", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new[] {new object[] {10, \"E1\"}});\n                // widen to double\n                env.CompileDeploy(\"create index MyInfraWIndex2 on MyInfraW(f1)\", path);\n                var result2 = env.", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n        c = self.copy()\n        return c.__itruediv__(other)\n\n    def __itruediv__(", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def _get_seo_data(self, cr, uid, view_id, context=None):\n        \"\"\"\n        Returns the SEO data for a given view.\n        \"\"\"\n        view = self.browse(cr, uid, view_id, context=context)", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(htmlDisable, htmlDisabled);\n    }\n    /**\n     * Returns the factory for the given component.\n     *", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "\n    s = create(filename, content)\n    assert s.content_is_testharness\n    assert s.name_is_non_test\n    assert s.name_is_not_manual\n    assert s.name_is_not_visual\n    assert s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.Query = namedQueryReference;\n\t\t}\n\t\t#endregion\n\t}\n}", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState pl in m_Members )\n\t\t\t{\n\t\t\t\tpl.Serialize( writer, m_Faction, m_Members );\n\t\t\t}\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "\n```java\ninvocationQueue.pop();\n```\n\nThis line of code pops the first element from the `invocationQueue` list. The popped element is the `MethodInvocation` object that was created when a new graph was being processed. After popping, the `MethodInv", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "```\nself.pytest_command = pytest\n```\nThis line sets the `pytest_command` variable to the value of the `pytest` variable from the `pr_metadata`. If `pytest` is not present in the `pr_metadata`, it will remain `None", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phiNode = getCachedPhi(key, value.getStamp());\n                    for (int i = 0; i < states.size(); i++) {\n                        states.get(i).readCache.put(", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n        if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // TODO: handle exception\n            }\n        }\n    }\n}\n\nThe code is for an abstract", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```\ndb.create_all()\n```\nThis line of code creates all the tables defined in the models.", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "\n    def get_random_password(self):\n        \"\"\"Returns a random password.\"\"\"\n        return ''.join([chr(random.randint(33, 126)) for _ in range(16)])\n\nThis method returns a random password as a string.", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def save(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath*.\n        **Keyword argument**:\n          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, f", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "\ndef main():\n  \"\"\" Main function\n  \"\"\"\n  agent = ValidateOutputDataAgent()\n  agent.initialize()\n  agent.execute()\n  agent.finalize()\n\nPlease complete the code to make it runnable.\n\n```python\nif __name__ ==", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Plugins can be accessed through the form system\n\t\t\t\treturn action;\n\t\t\t}\n\t\t\t// If the form is not allowed, return null\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "\n    @defer.inlineCallbacks\n    def check_single_build_deferred(self, buildResult, verifiedScore):\n        gsp = yield self.setupGerritStatusPush(startCB=sampleStartCBDeferred,\n                                               reviewCB=sampleReviewCBDeferred", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "self.category = atom.Category()\n\nCreated on Wed Nov 22 14:30:00 2017\n@unittest.skip('Not implemented')\ndef testCategoryToAndFromString(self):\nself.assert_(self.category.ToString() ==", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotationMirror> reduce(Map<String, AnnotationMirror> r1,\n                                             Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "classes = [MATERIAL_MT_sss_presets, MATERIAL_MT_specials, MATERIAL_UL_matslots, MATERIAL_PT_context_material, MATERIAL_PT_preview, MATERIAL_PT_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "       if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n        {\n            var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n            mapper16_register1 = map16.Register1;\n           ", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\nJMenuItem jMenuItem = new JMenuItem(\"Open Document\");\njMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));\njMenuItem.addActionListener(oActionListener);\n_jMnuRoot.", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "Add(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\t\tAdd", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = min;\n\t\t\tint width = Width;\n\t\t\tfor (int i = min; i < Height; i++) {\n\t\t\t\twidth = MeasureWidth (width);\n\t\t\t\tif (width > 0) {\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\n    return self.announcement.title + ' (' + self.tweet_id + ')'\n\nThis line of code returns the title of the announcement associated with the current instance of the AnnouncementTwitterCrossPublication model, followed by the tweet_id of the tweet that", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers = {\n    'php': PhpLexer(),\n}\n# Enable highlighting for PHP code between <?php ... ?> by default\nlexers = {\n    'html': html_lexer,\n    'css': css_lexer,\n    'javascript': jav", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ORDER BY sdate, stime''', (i,))\n    rows = cursor.fetchall()\n    print \"Number of rows in group: \", i, \" is: \", len(rows)\n    if len(rows) > 1:\n        print \"Group: \", i", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\ndb = rethinkdb.r\n\nThis line is missing. It should open a connection to the RethinkDB database and select the database to use.\n\nHere's the corrected code:\n\ndb = rethinkdb.r(conn)\n\nThis line opens a connection to the", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tcase \"complicity\":\n\t\t\t\tMsg(\"I'm not sure what you're talking about.\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tMsg(\"I don't know what you're talking about.\");\n\t\t\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'LOGIN_ACCEPTED': LoginAcceptedResponse,\n    'LOGIN_ACCEPTED_NEW_VER': LoginAcceptedNewVerResponse,\n    'LOGGED_OUT': LoggedOutResponse,\n    'RESOURCE': ResourceResponse,\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        \"\"\"\n        Add a HostData object to the TaskData.\n        \"\"\"\n        self.host_data[host_data.uuid] = host_data\n        self.start = max(self.start, host_data", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n        }\n    }\n}\n\nI want to add a check for the internet connection before starting the AsyncTask. If there is no internet connection", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "\n@behave.step(\"filelists in \\\"{path}\\\" has only packages\")\ndef filelists_in_path_contains_only_packages(context, path):\n    check_context_table(context, [\"Name\", \"Epoch\", \"Version\", \"Release\", \"Architect", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    if self.distribution.has_ext_modules():\n        inputs.extend(self.get_finalized_command('build_ext').get_inputs())\n\nThis line of code checks if the distribution has any extension modules. If it does, it extends the list of inputs with the", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (propValue != null)\n\t\t\t\t{\n\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "\ndef sge_cmdline_arg(request):\n    job_name = request['job_jobname']\n    log_name = request['job_log_dir'] + job_name + '_' + str(request['job_id'])\n    sge_cmd_arg =", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "\n            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEvent", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        var circle = (Circle) obj;\n                        return string.Format(\"{0} ({1}, {2}, {3})\", circle.Radius, circle.X, circle.Y, circle.Width);\n                    }\n                }\n            }\n            catch (Exception", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def download(self, url, post=None, data=None, headers=None):\n        if post is None:\n            post = {}\n        if data is None:\n            data = \"\"\n        if headers is None:\n            headers = {}\n        headers['User-Agent", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\treturn path.Count > 0 ? path[0] : null;\n\t\t}\n\t\tCPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\t// If we are at the refinery, search from the refinery.\n\t\t\tif (", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "```\n                       self.logger.error(\"service %s restart failed\" % service_name)\n                       return False\n```\n\nTo complete the code, you should add the missing indents and the missing line of code. Here's the completed code:\n\n```\n                ", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\n\nThe code you need to complete is the next line of code in the `newEvent()` method. This line should return a new Event object with the source and", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (PpmState state1 = state; state1 != PpmState.ZERO; state1 = state1.Next)\n            {\n                if (state1.Symbol == symbol)\n                {\n                    states[stateIndex++] = state1;\n                }\n", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\tif(SqliteSession.Select(sessionID, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_smaller_than_file_at_end(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<script>\n  function onDownload(link) {\n    $(\"#downloadForRealz\").html(\"Downloading \" + $(link).text());\n    $(\"#tos\").fadeIn('slow');\n    location.hash = \"download\";\n    $(link).attr('disabled', 'disabled');", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# Plot the mean and 95% CI for each test\n# for app in cr['combined']:\n#     for test in cr['combined'][app]:\n#         plt.errorbar(range(1, len(cr['combined'][app][test]['durations'])", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "\n    def test_GID(self):\n        \"\"\"\n        Check GID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 1, 0, 1, [], [1, 0])\n        self", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "g.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.drawLine(x + 1, y + 1, x + controlSize - 2, y + controlSize - 2);\n\t\t\t\t}\n\t\t\t\telse", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateClassifier(knn, patternDict, testName):\n  \"\"\"\n  Simulates the kNN classifier on the given patterns.\n  \"\"\"\n  failures = \"\"\n  numCorrect = 0\n  numPatterns = len(patternDict)\n  for i in", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(elementKind(), index, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(ObjectMirror mirror, int offset, Value value) {\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // resolve relative path to absolute path\n            string absolutePath = FileUtils.CombinePaths(Parent.OutputDirectory, relativePath);\n            // check if assembly exists\n            if (File", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef str_format_list(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n   ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       i2 = i19;\n      }\n      i10 = i16;\n      i20 = i18 + 1;\n      i21 = i20 + i10;\n      i22 = i21 + i10;\n     ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "```\nstr += s.ToString() + \"\\n\";\n```\n}\nreturn str;\n}\n\npublic State GetStateByName(string name)\n{\nforeach (State s in states)\n{\nif (s.name == name)\n{\nreturn s;\n}", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "           Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.Skill", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\n\t\twhen(securityContext.getUser()).thenReturn(new EmfUser(\"test.user\", \"test.tenant\"));\n\t}\n\tprotected IRI createIRI(String namespace, String localName) {\n\t\treturn valueFactory.createIRI(namespace, localName);", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "\nclass TestTestContext(unittest.TestCase):\n\n    def test_popen_raises_error(self):\n        with mock.patch('subprocess.Popen') as mock_popen:\n            mock_popen.side_effect = subprocess.CalledProcessError(", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), applicationName);\n\t\t\t}\n\t\t\tif (string.IsNullOrEmpty(dataDirectory", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\n\t\tinternal void SetTable (DataTable table)\n\t\t{\n\t\t\tif (table == null)\n\t\t\t\tthrow new ArgumentNullException (\"table\");\n\t\t\tif (Table != table) {\n\t\t\t\tif (Table != null) {\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"Preferences", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               TextView tv = new TextView( getActivity() );\n                tv.setText( R.string.no_taf_available );\n                layout.addView( tv );\n                layout.setVisibility( View.VISIBLE );\n                return false;\n           ", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tIQuery query = s.CreateQuery(\"from Continent\");\n\t\t\t\tint count = query.List().Count;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t}\n\t\t}\n\t\t[Test]", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ (uiCRCITTSum << 8) ^ ((uiCRCITTSum & 0x0000FF00) ^ uiByteValue) ^ ((uiCRCITTS", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getMode().getShootingSpeed();\n\t}\n\t@Override\n\tpublic boolean canAttack(LivingEntity entity) {\n\t\tif (entity == null)\n\t\t\treturn false;\n\t\tif (entity == this)\n\t\t\treturn false", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] {\n                new ReferencesHyperlinkDetector(editor) };\n        }\n        return new IHyperlinkDetector[] {\n            new CeylonHyperlinkDetector(controller),\n            new CeylonNativeHeaderHy", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.aspectWidget = Object3DAspect(self)\nself.privateWidget = Object3DPrivateInterface(self)\nself.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(self.aspectWidget)\nself.l.addWidget", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set value\n\t\t\t\t\t{\n\t\t\t\t\t\tstring[] values = new string[2];\n\t\t\t\t\t\tvalues[0] = TextBox( GetTextEntry( 3 ) ).Text;\n\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, value.toString()))\n                        {\n                           chosenObj = valueChoice;\n                          ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\t\tsb.append(\"\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\treturn sb.toString();\n\t}\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResult {\n\t\t\tget { throw new NotImplementedException (); }\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        //expect(mockSecurityManager.getDatabase()).andReturn(null);\n        //expect(mockSecurityManager.getOwnerId(ownerId)).andReturn(ownerId);\n        //expect(mockSecurity", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v / viewport.Width;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 max)\n\t\t{\n\t\t\treturn v / max;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_info(XDRStruct):\n    __slots__ = ['key', 'value', 'stats']\n    def __init__(self, key=None, value=None, stats=None):\n        self.key = key\n        self.value = value\n        self.stats", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\n\t\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/\" + msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// sends a message to a", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Step) {\n                List<StepBucket> stepList = convertToStepBucketList(list);\n                notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, stepList);\n            } else if(", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "def GenerateHelperFunction(0, 0, 'NewSingleCallback', 'void', True)\n\nThis code defines a helper function that generates the code for a callback\nclass. The function takes several arguments:\n\n* `number_of_args`: The number of arguments the callback takes.\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\n    response = HttpResponse(mimetype='application/json')\n\nThis line of code sets the MIME type of the response to 'application/json'.\n\nThe next line of code:\n\n    response.write(simplejson.dumps(items))\n\nThis line of code", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "               new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                final ServiceNode service = new ServiceNode();\n                service.setService(new ConstantNode(TermId.mockIV(VTE.URI)\n                        .getURI()));\n              ", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n```\ndef dispatch(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    if request.method == \"POST\":\n        if \"set_is_active\" in request.POST:\n            return self._handle_set_is", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // TODO: Complete the code below\n            //\n            // The algorithm is described in Chapter 7, section 7.4.3, page 219\n            // of the book:\n            // Iterative methods for sparse linear systems.\n            // Yousef Saad\n", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] { sortedNumbers[left] };\n\t\t} else {\n\t\t\treturn new Apfloat[] { sortedNumbers[left], sortedNumbers[right] };\n\t\t}\n\t}\n}", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "\n    # Update the counts for each node.\n    for v in ts.nodes():\n        if parent[v] != -1:\n            continue\n        if sample_count[v, reference_set_map[v]] > 0:\n            L[v] = 0\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "\n    def test_items_to_raw(self):\n        \"\"\"Test whether fetched items are properly loaded to ES\"\"\"\n        result = self._test_items_to_raw()\n        self.assertEqual(result['items'], len(self.items))\n        self.assertTrue(result", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar botName = botController != null ? bot", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" (\" + GetMessageByCode(_status) + \")\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "\nclass SettingsFrame(Frame):\n    frame_type = FrameType.SETTINGS\n    defined_flags = FrameFlag.create_flag_set('ACK')\n    def __init__(self, stream_id=0, settings=None):\n        super().__init__(stream_id)", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var nodes = cluster.Nodes.ToList();\n            var edges = cluster.Edges.ToList();\n            var labels = cluster.Labels.ToList();\n            var nodes2 = new List<Node>();\n            var edges2 = new List<Edge>();\n            var labels2 =", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeDegrees = btDegrees(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn btDegrees(m_maxSlopeRadians);\n}\nvoid btKin", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p);", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = Context.TypeCreator.CreateType(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tCollection<? extends ImmutableType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(annotationType), Collections.singleton(instrumentationApplier));\n\t\t\t// assert result\n\t\t\tassertThat(result, is(empty()));\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != null && !this.postdominators.equals(other.postdominators))\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tif (hash", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this left constituent fit next to the right constituent?\n              continue;\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync', '--archive', '--compress', '--delete', '--exclude=*.bak',\n            '--exclude=*.gz', '--exclude=*.zip', '--exclude=*.sql',\n            '--exclude=*.sql.bak", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (this.getId() == null) || (that.getId() == null) ) ?\n\t\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n    print(\"Total number of rejected timesteps : \", total_rej)\n\nThe code is a multi-body simulation that uses the Lubachevsky-Stillinger (LS) algorithm to update the positions and orientations of rigid bodies. The simulation is controlled by an input file that spec", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "def local_useless_subtensor(node):\n    \"\"\"\n    Remove Subtensor if it takes the full input.\n    \"\"\"\n    if not hasattr(node.fgraph, 'shape_feature'):\n        return\n    if isinstance(node.op, Subtensor):\n        if", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\n    def save(self):\n        \"\"\"Override save to add user to the instance's group_set\"\"\"\n        groups = self.cleaned_data['groups']\n        user = self.user\n        community = self.community\n        for group_id in groups:\n            group", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "===================\ndef _listen_for_query_events(cls, event_key, **kw):\n    target, identifier, fn = \\\n        event_key.dispatch_target, event_key.identifier, \\\n        event_key._listen_fn\n    def listen(query,", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```\n    def get_display_items(self):\n        \"\"\"\n        Returns a list of XBlock objects that will be displayed in the\n        Conditional module.\n        \"\"\"\n        return [child for child in self.get_children() if child.location in self.show_tag", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "\ndef _get_axis_by_name(axes, name):\n    for axis in axes:\n        if axis.name == name:\n            return axis\n    return None\n\nThis function is used to get an axis by its name from a list of axes. It takes two", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && type == null)\n\t\t\t{\n\t\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// ", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\n        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/tags/1.0.0\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "\n        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> entry : csvData.entrySet", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(linkedCollector != null) {\n\t\t\tIManaCollector collector = (IManaCollector) linkedCollector;\n\t\t\tcollector.recieveMana(getValueForWand());\n\t\t\tif(collector.isFull()) {\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```\nif __name__ == '__main__':\n    from invenio.legacy.dbquery import run_sql, run_sql_query\n    from invenio_upgrader.scripts.invenio_upgrader import info, pre_upgrade, post", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt.Dispose();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t\t//guiThread.Abort();\n\t\t\t//guiThread.Dispose();\n\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets an occurrence of the specified event.\n  ", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "sourceEventBinding.Bind( DataSource.Component, SourceEventName );\n}\nprivate void bindTargetEvent()\n{\ntargetEventBinding = gameObject.AddComponent<dfEventBinding>();\ntargetEventBinding.hideFlags = HideFlags.HideAndDontSave | HideFlags.Hide", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            if (switchManager != null) {\n                SpanConfig spanConfig = new SpanConfig();\n                ObjectMapper mapper = new ObjectMapper", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCancel = new ImageHelper(100000, \"images/cancel.png\", new Integer(16), new", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```\n    def make_naa_annotations(self, project_uuid, old_naa_proj_uuid):\n        \"\"\" makes annotations to describe NAA\n            (Neutron Activation Analysis) attributes by\n            copying annotations from another project\n            with NAA", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis[value])) |\n\t\t\t\t\t\t(((int) (extraToJis", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n@ispec(\"32<[ ~off2(4) ~off3(6) ~off1(6) b(4) a(4) {99} ]\", mnemonic=\"ST_A\", mode=\"Long-offset\")\n\nThis line of code is defining", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\treturn new JRPropertiesMap(properties);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(true, false, ControlFlags.None, null, null, null, null);\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "\n    def run(self):\n        while True:\n            result = self.__queue.get()\n            if result is None:\n                break\n            self.__idle(self.__progress_cb, 1.0 / len(self.__queue))\n            self.__send(result)", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       foreach (MethodInfo method in typeof(PhotonEditor).GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly))\n        {\n            if (method.Name.StartsWith(\"OnPhotonServer\"))\n            {\n                additionalRpcs", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       if (Config.getBoolean(getActivity(), \"show_message_view_menu\", true)) {\n            setHasOptionsMenu(true);\n        }\n        return rootLayout;\n    }\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\ndef get_slice(self):\n    \"\"\"Return slice for k-point/spin combinations.\"\"\"\n    return slice(self.ks0, self.ks0 + self.mynks)\n\nPlease complete the code to define the slice for k-point/spin combinations. The slice should be", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\t\tif (prevChildAs", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "if (!IsRagdoll)\n{\nif (ragdoll)\n{\n//if we're not already a ragdoll and we're being asked to become one\n//we'll need to disable the animator and sounds\nif (Animator != null)\n{\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "\nclass Fracture(GeoLayer):\n    \"\"\"Fracture layer\"\"\"\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n\nPlease complete the code for the Fract", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)((num >> 24) & 0xff);\n        out[outOff + 2] = (byte)((num >> 16) & 0xff);\n        out[outOff + 1] = (byte)((num", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new Predicate<PatternMatch>()\n            {\n                public boolean apply( PatternMatch match )\n                {\n                    return match.isValid( objectVariables );\n                }\n            } );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_xml_json_to_json(values_xml_json, format = None):\n    if not values_xml_json:\n        return None\n    if format is None:\n        format = values_xml_json[0]['format']\n    if format", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)buttons.get(btn);\n            if (frameToClose!=null && frameToClose.isIconifiable()) {\n              frameToClose.setIcon(true);\n            }\n          }\n        }\n      });\n      frame.addInternalFrame", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\n```\nprint getLC('J142347.5+525311')\n```\n\nThis line of code is used to print the details of a specific object in the Sloan Digital Sky Survey (SDSS) database. The object's SDSS", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, values, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "           }\n        }\n        #endregion\n        public IntPtr Ptr\n        {\n            get { return m_ptr; }\n        }\n    }\n}", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nThis line of code sets the URL that users will be redirected to after logging in. In this case, it is set to '/', which means that users will be redirected to the home page of the site after logging in.\n\nYou can change", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tqueue.RemoveAll(pi => pi.Item == itemName && pi.Number == numberToCancel);\n\t\t}\n\t\tprotected virtual bool BuildUnit(string unitString)\n\t\t{\n\t\t\tvar unit = self.World.Map.Rules.Actors[", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "=====================\n        infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n\n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n            infoText +=", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "\n        code = code.replace('%', '%%')\n\n        # replace the variables\n        for x in self.env.vars:\n            code = code.replace('%' + x + '%', self.env.get(x))\n\n        # write the result\n        self", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "\n```\nif __name__ == '__main__':\n    rospy.init_node('pars_server')\n    try:\n        PlanningServer()\n    except rospy.ROSInterruptException:\n        pass\n```\n\nThis line initializes a new", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 1 ] ) * hdiv0;\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                // timestamp format is required\n                if (pattern.length() < 19) {\n                    throw JsonException.$(0", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tentity.cti_id = qs.ExecuteScalar<int>();\n\t\t\treturn true;\n\t\t}\n\t}\n}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        key_id=dict(type='int', required=True),\n        auth_pwd=dict(type='str', no_log=True),\n        auth_", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       component = self.store.update_item(component, editing_user)\n        check_node(component.location, None, after_create, editing_user, None, after_create, editing_user)\n        check_node(child.location, None, after_create, editing", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(new String(ch, start, length));\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n    }\n    public void", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "\ndef mkrange(dict):\n    return aetypes.Range(dict['min'], dict['max'])\n\nThis code is incomplete.  The function is supposed to take a dictionary as an argument, but the code only defines the function and does not provide any implementation.  The function is supposed", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           var requestMessage = api.ActionArguments.OfType<HttpRequestMessage>().FirstOrDefault();\n            if (requestMessage != null)\n            {\n                formatters = requestMessage.Content.Headers.ContentType.MediaTypeHeadersValue.GetMediaTypeHeaders().Select(h =>", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "\ndef _key_up(self, path, model, column):\n    if path is None:\n        return None\n    iter = model.get_iter(path)\n    if iter.prev_sibling():\n        new_path = model.get_path(iter.prev_", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n            // Invalidate the bean definition so that it is re-read from the bean factory\n            beanFactory.registerSingleton(beanName, null);\n        }\n        return bean", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "if f:\n    lines = f.readlines()\n    f.close()\n    if any(line.strip() for line in lines if not line):\n        module.fail_json(msg=\"Password file contains blank lines\")\nexcept Exception as e:\n    module.fail_json", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "       [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n        [In, MarshalAs(UnmanagedType.Interface)] IntPtr pUnkValue\n        );\n    }\n    #endregion\n}", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       authorizations.addAcl(\n                directedAclKeys.getPrincipal(),\n                directedAclKeys.getPrincipalType(),\n                directedAclKeys.getSecurableObject(),\n                directedAclKeys.getSecurableObjectType(),\n                directed", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "```\n        if len(element) > 0:\n            for child in element:\n                if not self.verify_element(child):\n                    return False\n```\nThis code checks if the element has any child elements. If it does, it iterates through each child element", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "====================\n\ndef _get_elements_by_tag_name_helper(node, name, result):\n    if node.nodeType == Node.ELEMENT_NODE:\n        if node.nodeName == name:\n            result.append(node)\n        for child in node.", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t*", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyName, endOffset)) {\n\t\t\t\tkeyLocator.setKeyName(new Name(decoder.readBlobTlv(TlvTypeCodes.NameComponent)));\n\t\t\t} else if (", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n    }\n    public void send(Object o){\n        try {\n            Soutput.writeObject(o);", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n      }\n    } );\n    m_btnOk.setEnabled( false );\n    m_btnOk.addClickHandler( new ClickHandler()\n    {\n      @Override\n      public void onClick(ClickEvent p_event)\n      {", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "\n    err = json.loads(r.data.decode('utf-8'))\n    if \"status\" in err and err[\"status\"] == False:\n        msgs = [e[\"msg\"] for e in err[\"errors\"]]\n        raise RuntimeError(\", \".join(msgs))", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response == null)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = SR.ExceptionMergeOrdersTool;\n\t\t\t\t\tmerged", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _total_components_flux(flux: float, components: List[float], consumption: bool = True) -> float:\n    \"\"\"Calculate the total flux of a reaction's components.\n    Parameters\n    ----------\n    flux : float\n        The flux of the reaction.\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "\n    def get_for_path(self, pootle_path, user):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='academiccenter',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n    ]\n)\n\n# This is the code that you need to complete.\n# You", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "\n    def process_packet(self, packet):\n        '''Process an incoming packet.  Mainly want to check whether\n        it's an ARP and update our ARP \"table\" state.'''\n        # self.logger.debug(\"Switch {} processing packet: {}\".format(self", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (!m_IgnoreChanges) {\n      if (m_RecentItems.size() >= m_MaxCount)\n\tm_RecentItems.remove(m_MaxCount);\n      m_RecentItems.add(0, item);\n      writeProps();\n      update", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.Hidden && src.Skills[SkillName.DetectHidden].Value > 0)\n            {\n                // Check if the target is in a house\n                BaseHouse house = BaseHouse.FindHouseAt(target.Location, src.Map", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        return halfTradePeriodDate", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a;\n\t\t\ta = LeadingAny(p.down);\n\t\t}\n\t\tif (a != null) return a;\n\t\twhile (p != null && p.typ != Node.t && p.typ != Node", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for data\n\t\t\tif(!mReadDone.WaitOne(1000, false))\n\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif(o1 == null && o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k += 128; i < N_INDEXES; i++, k += 4)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0; i < N_INDEXES", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "\n```\n    def create(self, description, currency=None, fields=None):\n```\nThis line of code is defining a method for the ComputeRateCollection class, which will be used to create a new ComputeRate object in the UI. The method takes three arguments: description,", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock();\n\t\t\t\tMemory.Copy( src, shadowBuffer.Lock( offset, length, BufferLocking.WriteOnly ), length );\n\t\t\t\tshadowBuffer.Unlock();\n", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "self.scan_sat = config.satellite.scan_sat\n\nThis line is setting the value of the self.scan_sat variable to the satellite scan configuration from the configuration object. The configuration object is defined in the config module and contains various configuration options for the satellite scan. The self.scan", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                // TODO: parse filter string\n            }\n            return;\n        case ZMQ.ZMQ_SOCKET_ID:\n            socketId = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_DECODER", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded row to the output stream\n                for (int i = 0; i < bytesPerRow; i++) {\n                    int j = i * colors;\n                    for (int k = 0; k < colors; k++) {\n                        int", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertTrue(s.has_interface('foo.bar'))\n        self.assertFalse(", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def massey_product_printout(self, filename):\n        output = \"\"\n        map_list = self.get_E_2_page().get_dual_resolution(self.options).get_map_list()\n        for index in xrange(len", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_group_extension\\\".\",\n                \"optional_group_extension: 123\");\n            AssertParseError", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\tfinal Object old = map.remove( key );\n\t\treturn old;\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal List<Object[]> queue = new ArrayList<Object", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an auction\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = 'hr.attendance'\n\n    @api.multi\n    def attendance_action_change(self):\n        self.ensure_one()\n        if self.check_in:\n            self.write({'", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().newRow();\n\t\tparentRow.setBackColor(Color.WHITE);\n\t\tparentRow.setColSpecimenName(orderInvestigationLiteVo.getSpecimenName());\n\t\tparent", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                return pt;\n            }\n        }\n        /// <summary>\n        /// Position of the lower right corner of this item.\n        /// </summary>\n        public Size Size\n        {", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "```\n        if self.is_child_notebook():\n            notebook = self.get_child()\n            tab = maker.create_terminal(cwd, profile, self)\n            notebook.append_page(tab, tab.get_title_label())\n        else:", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add( new StructTypeInfo( name, managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshalAttribute( string type ) {\n            UnmanagedType? marshalAttribute", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn attributes.GetAttributes ((uint) TypeAttributes.ValueType);\n\t\t\t}\n\t\t}\n\t\tpublic bool IsDelegate {\n\t\t\tget { return base_type != null && base_type.IsTypeOf (\"System\", \"MulticastDelegate\");", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n                return null;\n            }\n        }\n        #endregion\n    }\n}", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(protocol)\n\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSLv2)\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSLv3)\n   ", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::Gtk.CheckButton();\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.checkbuttonWhiteSpaces.Label = \"Include whitespace\";\n\t\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    headbook.set_tab_reorderable(True)\n\nI'm not sure what the code is trying to do, but it seems like it's setting the `tab_reorderable` property of the `headbook` notebook to `True`, which allows the user to re", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\n    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-Tab\": QKeySequence(Qt.CTRL + Qt.Key_W),\n    \"Close-All-Tabs\": QKeySequence(", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\"\n\t\t\t\t+ this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\"\n\t\t\t\t+ this.j", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   IEditorInput editorInput = getEditorPart().getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.getFile().isReadOnly();\n   ", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Image = resources.GetObject(\"butAttach.Image\");\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 23);\n\t\t\tthis.butAttach.Name = \"butAtt", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        return string;\n    }\n}\n\nThe code is missing the last line of the encode method. The missing line should be:\n\n    return sb.toString();\n\nSo the complete encode", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC6\", hmac, data, digest);\n\t\t}\n\t}\n}", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n\t    switch (EnumSwitcher.option_1) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "     {\n        return null;\n      }\n      RegistryKey jdk = java.OpenSubKey(\"JavaHome\");\n      if (jdk == null)\n        return null;\n      return (String)jdk.GetValue(\"JavaHome\");\n    }\n    private static String", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   def find_job(self, name, job=None):\n        # attempt to find job by matching the job command\n        for l in self.lines:\n            if re.match(r'^%s\\s+' % shlex_quote(job), l):\n                return", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "class MeshModifier:\n    def __init__(self, mesh):\n        self.mesh = mesh\n        self.modifiers = []\n        self.modifiers_json = []\n        self.modifiers_cache = {}\n        self.modifiers_cache_path = os.path", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                double bucketRankCount = rankCounts[i];\n                if(bucketRankCount ==", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.contains(2));", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "```\ndef parser(self, choice, cap=None):\n    if cap:\n        for packet in cap:\n            if int(choice) == packet.num:\n                print(packet)\n                return\n        print(self.fatal+\"[!] Packet not", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.SelectedIndex = 0;\nanswers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               QName qname = new QName(targetNamespace, sdoTypeName);\n                SDOType sdoType = (SDOType) getGeneratedTypes().get(qname);\n                if (sdoType != null) {\n                    return true;\n               ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "\n        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n\n    def holidays_refuse(self, cr, uid, ids, context=None):\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets whether the Control is read only\n        /// </summary>\n        bool IBOColSelector.ControlReadOnly\n        {\n            get { return this.ReadOnly; }\n            set {", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\n            return String.Format(\"{0} ({1})\", this.Name, this.TypeDescription);\n        }\n    }\n}", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getId(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "       with cd(self.servo_dir()):\n            status = call([\"cargo\", \"build\"], env=env, cwd=self.servo_dir(), verbose=verbose)\n            if status:\n                return status\n            if release:\n                call(", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = Math.max(estP, estN);\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] {", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, gitStash.Name, gitItemStatuses);\n            }\n            Loading.Visible = false;\n            Loading.IsAnimating = false;\n            Stashes.", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "```\nassert lattice.cbuffer.get_object(bm1_index).out_address != 0\n```\nThis line of code checks if the out\\_address of the second beam monitor (bm1\\_index) is not equal to zero after the assignment of addresses. If the out\\_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "           b,\n            callback,\n            asyncState\n        });\n        }\n        public int EndAddInt(System.IAsyncResult result) {\n            object[] results = this.EndInvoke(result);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \";\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\narchive_index = load_archive_index(args.index_file)\n\nPlease complete the code to load the archive index from the given file.\n\nThe load\\_archive\\_index function is already defined in the code. It takes a path to the archive index file as an argument and returns the", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "```\nself.mosi_bits = [(ss, es) for i in range(8)]\n```\nThis line of code initializes a list of tuples, where each tuple contains the start and end sample numbers for each bit of the SPI data packet.\n\nThe list is created", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         // (, line 200\n          // delete, line 200\n          slice_del();\n          // setlimit, line 200\n          cursor = limit - v_3;\n          // tomark, line 200\n          if (cursor < I", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = handlers.createObject(cls, dins);\n            } catch (Exception ex) {\n                System.out.println(\"Error: \"+ex);\n            }\n            if (o != null) {\n                if (cd == null) {\n                    cd", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "def main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            path=dict(type='path', required=True),\n            content=dict(type='str', required=False),\n            select_crypto_backend=dict(type='str', choices=", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (_slots.find (i->first) != _slots.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\ti->second (*this);\n\"\"\", file=f)\n    if", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "#    interval_1word, interval_2word = get_contigous_intervals(X)\n\n# The following code is a workaround for the fact that the code above does not\n# work as expected.\ninterval_1word = Interval(0, 0)\ninterval", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t// TODO: Implement the code below\n\t\t\t// if (t.kind == 29) {\n\t\t\t//\tGet();\n\t\t\t//\tif (t.kind == 30) {\n\t\t\t//\t\tGet();\n\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "\n    def _edi_get_product_qty(self, cr, uid, product_id, product_uom, product_qty, context=None):\n        \"\"\"\n        Returns the quantity of a product in the given unit of measure.\n        \"\"\"\n        product_obj =", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private NodeRef createContent(NodeRef parent,\n                                  String name,\n                ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n    # This is the line that needs to be completed.\n    # It should return a list of all devices that match the given filter.\n    # The filter is a dictionary with keys that are the names of the properties\n    # to match and values that are the values to match.\n    #", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "\n    device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    user.login()\n    print user.userId\n    print user.mainmenu()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardCombo", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "def filter_uvfmeas_fit(output):\n    # We send back a dictionary.\n    rd = { 'fitCoefficients': [], 'alphaCoefficients': [],\n           'alphaReference': { 'fluxDensity': 0, 'frequency': 0", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011 + (m_Keys.Count * 10);\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget(KeyRing owner) : base(1, false", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Adding model to HDHR tuners\n            int model = liveModelMap.get(device", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 4) {\n        throw new PatternSyntaxException(line, 0, line.length(), \"Invalid number of fields in line \" + lineCount);\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "   for p in sub_path:\n        try:\n            n = SCons.Node.FS.FindFile(n, source_dir, path + p)\n            if n:\n                return n\n        except SCons.Errors.SConsesError:\n            pass\n   ", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# This is the main entry point for the Mapnik Python module.\n# It creates a Map instance and adds a layer to it.\n# The layer is populated with a simple polygon and a simple point.\n# The map is then rendered to a PNG image and saved to disk.\nif", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def main():\n\n# module logic goes here\n\nif __name__ == '__main__':\n    main()\n\n# main function\ndef main():\n    argument_spec = f5_argument_spec()\n    argument_spec = argument_spec.update(\n        dict(", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "\n```python\nclass Method(BaseEntity, Copiable, BaseCollection):\n    collection_name = 'Automate Methods'\n    entity_name = 'Automate Method'\n    entity_plural = 'Automate Methods'\n    entity_url_name = 'automate", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory: getActionObject: \" + className + \" not found.\");\n        }\n        return result;\n    }\n    public void executeAction(String actionName, Object[] parameters) throws Exception {\n        IAction action = getActionObject(actionName);\n       ", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "\n    def test_update_thread_no_body(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"title", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "embedManifestDllAction(target, [manifestSrc], env)\n\"\"\"\nEmbeds the manifest into the DLL.\n\"\"\"\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeAction to check for existence of manifest\n    and other", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           errorStatus[0] = execute(getSelectedResources(), getProgressMonitor());\n        } catch (OperationCanceledException e) {\n            // ignore\n        } catch (InvocationTargetException e) {\n            errorStatus[0] = StatusUtil.createErrorStatus(e);\n       ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\n\t\t// Allocate the data structures\n\t\tdata.values = new Object[meta.getFieldName().length];\n\t\tdata.counts = new long[meta.getFieldName().length];\n\t\tdata.fieldnrs = new int[meta.getFieldName().", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\n```\n# both relative\nassert f('-3..-2', last) == (d(2014,1,31, 19,48), d(2014,1,31, 19,48))\n```\n\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           int walkingrange = Utility.ToInt32(swalkingrange);\n            int homerange = Utility.ToInt32(shomerange);\n            int spawnid = Utility.ToInt32(sfakecountA);\n            int fakecountA = Ut", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_guest_suspend(test, params, vm):\n    \"\"\"\n    Test guest suspend and resume.\n    \"\"\"\n    suspend_test = GuestSuspend(test, params, vm)\n    # TODO: Add test code here\n    # ...\n    # ...\n   ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        assertThat(rc.get(), is(5));\n    }\n}\n\n// Ignore the testRaceConditionIssue322", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar bytes = new byte[4];\n\t\t\tWriteCompressedUInt32(new MemoryStream(bytes), value);\n\t\t\treturn bytes.Length;\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "\n    extract_command = CommandLoader.load_command('extract')\n\nThis line of code is used to load the 'extract' command from the command loader. The 'extract' command is used to extract files from an archive. The 'extracthere' command will use this 'extract' command to extract", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_Constructor ()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (typeof (COMTest).Assembly.Location, \"MonoTests.System.ActivatorTestInternal.COM", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        repo2 = self._setup(de, Action.ACCEPTED, Action.ACCEPTED)\n        avs =", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           userstate.texture = cmd.parameters[\"texture\"]\n\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(Player player, Player newLeader) {\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n```python\ndef render_table(table, formatter=\"Terminal\", outfile=None):\n    if outfile is None:\n        outfile = sys.stdout\n    if has_pygments:\n        formatter = Formats[formatter]\n    table.row", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "   def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, True)\n        tree_model.add_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\t((Grid) parent).addColumn(column);\n\t\tbreak;\n\t    }\n\t} while (parent != null);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = Convert.ToInt32(ReadElement(element, \"ImageIndex\"));\n                GrayImageIndex = Convert.ToInt32(ReadElement(element, \"GrayImageIndex\"));\n                Perception = Convert.ToByte(ReadElement(element, \"Per", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new PeerlessActivation( m_Peerless );\n\t\t\t\t\tm_key[i", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version version1 = new Version(1, new int[]{0, 1, 3, 5},\n                                 new ECBlocks(7, new ECB(1, 15), new ECB(1, 15)),\n                                 new ECBlocks(7, new ECB", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbC = kdf.DeriveBytes(pbMsg, p);\n\t\t\tif(!MemUtil.ArraysEqual(pbC, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2d-1\");\n#endif\n\t\t}\n", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n# Add any custom settings here\n# For example:\n# CUSTOM_SETTING = 'value'", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but LED_Queue has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTrace", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = PhoneNumberUtils.formatNumber(p.readString(), null);\n            dc.voiceSettings = p.readInt();\n            dc.callType = p.readInt();\n            dc.callId = p.readLong();\n            dc.callHandle = p.", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "\n            for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[x + y * xSizeP] = new Vector3(leftBottomCorner.x + x, leftBottomCorner.y + y, leftBottomCorner.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = (Integer) rawResult;\n\t\t\t\t\n\t\t\t\tif (result >= 0)", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void setBlock", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n    }\n}", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n    /* Draw the beam */\n    for (offs = 0; offs < BEAMDATA_SIZE; offs++) {\n        beamdata[offs] = stactics_beamdata_ram.read(offs);\n        if (beamdata[offs] != 0", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .Distance(position) <= spell.Width + 100)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.Heroes:\n                            foreach", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return existsInducingPath(graph, x, y);\n    }\n    public static boolean existsInducingPath(Graph graph, Node x, Node y) {\n        if (x.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\n        if", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        #region Methods\n        /// <summary>\n        /// Initializes the element.\n        /// </summary>\n        public override void Initialize()\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.getFileId() == null || other.getFileId() == null) {\n            return false;\n        }\n        return this.getFileId().equals(other.getFileId());\n    }\n    public void save() {\n        if (this.get", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (mobiles[i] != from && SpellHelper.ValidIndirectTarget(from, mobiles[i]))\n                        {\n                            // TODO: Add damage to the mobiles\n                        }\n                    }\n                }\n            }\n            private int Sc", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory[user] = msg;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (IsUser(user))\n\t\t\t{", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog10 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog10.", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.channel.close();\n    }\n    public void close(Packet packet) {\n        this.m();\n        this.channel.writeAndFlush(new PacketPlayOutDisconnect(packet));\n        this.channel.close();\n    }\n    public void close(", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n            z_arr[p_index, kk, 0] = z_dict[z_key][per][0]\n            z_arr[p_index, kk, 1] = z_dict[z_key][per][1]\n            z_err_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany, recipients.size());\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "```\n    env[\"PATH\"] = os.pathsep.join(extra_path)\n```\n\nThis line sets the PATH environment variable to a concatenated string of all the paths in the `extra_path` list, separated by the OS-specific path separator (`os", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "\ndef source_file_from_manifest(manifest, path):\n    for source_file in manifest.iterdir(path):\n        if source_file.rel_path == path:\n            return source_file\n    raise ManifestError(\"Source file not found: %s\"", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\n\t\tif (compiledScript != null) {\n\t\t\tcompiledScript.setScript(null);\n\t\t}\n\n\t\tif (scriptClassLoader != null) {\n\t\t\tscriptClassLoader.clearCache();\n\t\t}\n\t}\n    private B", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override closing for a wrapped server adapter\n        /// </summary>\n        protected abstract void ServerClose();\n        /// <summary>\n        /// Method to override closing for a wrapped client adapter\n        /// </", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass DatasetTransformer(Transformer):\n  \"\"\"\n  Transforms a dataset using a Transformer.\n  \"\"\"\n  def __init__(self, transformer, dataset=None, **kwargs):\n    \"\"\"\n    Initializes a dataset transformer.\n    \"\"\"\n    super(", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.getClass() != obj.getClass())\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\tif (caseInsensitive)\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithNoTags() throws Exception {\n        stacks[0].get", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new Parameter();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterValue(depth);\n        pf.addParameter(depthParameter);\n\n        //EXCLUSION_REGEXP\n        if (exclusionRegexp != null", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$not]\n\t\t\tif (pattern.Calls(S.Not))\n\t\t\t{\n\t\t\t\t// If the pattern is not, then the candidate must not match.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "               if (colisionList.Any())\n                {\n                    extendedWillHit++;\n                    extendedFarmLocation = colisionList.First().Position.To3D();\n                }\n                }\n                int shortenWillHit = MinionManager.GetMin", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t}\n\tpublic void setContextMenus(ims.framework.ContextMenus contextMenus)\n\t{\n\t\tsuper.setContextMenus(contextMenus);\n\t}\n\tpublic void setFormReportFields", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\n@task\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_MESSAGE)\n        return\n    prereq_cache(\"Python", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, [self.env['test_testing_utilities.sub2'].search([('name', '=', 'a')]).ids])]\n        })\n        f = Form(r)\n        with self.assertRaises(Assertion", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b)).change_var(y, (a, b))).doit() == Sum(y, (y, a, b))\n    assert simplify(Sum(x, (x, a, b)).change_var(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : new ReadOnlyCollection<object>(changedItems);\n                this._oldItemList = null;\n                this._oldStartingIndex = -1;\n               ", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            Document testDocument = parser.parse(inputSource);\n            writer", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n            }\n            NextToken(TokenType.And, TokenType.Or, TokenType.AndNot, TokenType.RParen);\n        }\n        private static ParamEnum ParamEnum(string s)\n       ", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Reserved: {0}\", ide.reserved);", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               if (l.status & Label.JSR) {\n                    l.addToSubroutine(id, nbSubroutines);\n                    if (l.next == null) {\n                        l.next = JSR;\n                    }\n                }", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method =", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.select(position.getValue());\n}\n\n\t\tprivate Position getPosition() {\n\t\t\treturn Position.values()[comboLabelPosition.getSelectionIndex()];\n\t\t}\n\n\t\tprivate void setPosition(Position position) {\n\t\t\tcom", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "\n        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "\ndef _parse_kexgss_error(self, m):\n    \"\"\"\n    Parse the SSH2_MSG_KEXGSS_ERROR message.\n    :param `Message` m: The content of the SSH2_MSG_KEXGSS_ERROR message\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           FileSystemNodeManager nodeManager = tree.getFileSystemNodeManager();\n            DefaultMutableTreeNode parentNode = nodeManager.getParentNode(connectionData);\n            if (parentNode != null) {\n                DefaultMutableTreeNode folderNode =\n                        nodeManager.createFolder", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_simulator_payslip as hp, hr_p", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "mf, dlnmdlnm = halo_mass_function(lnMassSigmaSpl, lnzarr, hzarr, BDarr, rhobarr, rho_crit_arr, omega_b0, omega_m0, cosmo_h, constk", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.height = font.getHeight() + getLineHeight() + getLineSpacing();\n        return d;\n    }\n    /**\n     * Adds a listener to the owner for the specified properties.\n     */\n    private void addModelListener() {\n        if (get", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "\n```\ndef steric_check(self,theta_res=0.1,phi=np.pi/2,flag='off_center',print_path=None):\n    #consider the steric constrain, flag 'off_center' (the center point is off the", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesClick(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "\nclass Hist(Object):\n    TYPE = 'F'\n    register(Hist)\n    def __init__(self, *args, **kwargs):\n        name = kwargs.get('name', None)\n        title = kwargs.get('title', None)\n        if len(args)", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.updateLastMessageTransmitted(protocol, contact);\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query : queries) {\n                if (query.queryId.equals(query", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "\n        h1 = im1.histogram()\n\nThis line of code is used to compute the histogram of the second image (im1). The histogram is a count of the number of pixels in the image for each intensity value. In this case, since im1 is a grayscale", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 1; i < sfi; i++) {\n\t\t\t\trsp = tag.readRecord(i);\n\t\t\t\tif (rsp.isOkey()) {\n\t\t\t\t\taddLog24(rsp, ret);\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\n    def __init__(self, parent, name, description=None):\n        FieldSet.__init__(self, parent, name, description)\n        self.blocks = []\n        self.current_block = 0\n        self.current_size = 0\n        self.current_", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\n\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\ndef my_crazy_app(environ, start_response):\n    status = '200 OK'\n    response_headers = [('Content-type', 'text/plain')]\n    start_response(status, response_headers)\n    return [b'Hello world!", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.trainmodel()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse :\n\t\tprint \"Usage : %s <datafile>", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(100) > chance)\n                res = EnhanceResult.Failure;\n        }\n    }\n}", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n    def parse_integer(self, s: str) -> int:\n        \"\"\"\n        Parses an integer value from a string.\n        \"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            self.msg.error(\"Unable to parse integer value '%s", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"No FOG Services found!\");\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isConfigFilePresent())\n            {\n                if (isConfigured())\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n                for(int tri = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    if(!insideBeginEnd)\n                    {\n                        Main.opengl.glBegin(Main.opengl.GL_TRI", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "\ndef cors_headers(response):\n    \"\"\"\n    Add Access-Control-Allow-Origin and Access-Control-Allow-Headers to responses\n    \"\"\"\n    response['Access-Control-Allow-Origin'] = '*'\n    response['Access-Control-Allow-Headers'] =", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Peek();\n                    if (now.Subtract(driver.IdleSince).TotalMinutes > settings.ConnectionLifetime)\n                    {\n                        oldDrivers.Add(idlePool.Dequeue());\n                    }\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "\ndef _format_list(var, name):\n    \"\"\"Ensure that parameter is list-like of numbers.\n    Used to let resolution and radius be single numbers if their elements are equal.\n    \"\"\"\n    if not isinstance(var, (list, tuple)):\n        if name in ('", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.register()", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60));\n\t\t\t\t\tstring[] str = new string[] { num.ToString(\"", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(this);\n        }\n        public ShaderProgram(ShaderType shaderType, String shaderCode,\n            bool flat = false)\n        {\n            PrimitiveType = PrimitiveType.Triangles;\n            Flat = flat;\n            Att", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def trim(self, reactions=None, genes=None, metabolites=None,\n             trim_solution=True, **kwargs):\n        \"\"\"Trim the model by removing reactions, genes, and metabolites.\n        This function will remove all reactions, genes, and met", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.beans.TumourGroupListVoBean bean = (ims.clinicaladmin.vo.beans.TumourGroupListVo", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=selected.size()-1; i>=0; i--){\n\t\t\t\t\t\tif(lines[i].contains(left, cy-", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\n        mListView.setLayoutAnimation(set);\n\n        mListView.setVisibility(View.VISIBLE);\n    }\n\n    /**\n     * Fill the list with data.\n     */\n    private void fillData() {\n        mCursor = mDbAdapter.", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.RowState != DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tInstance instance = this.dataset.get(i);\n\t\t\t\n\t\t\t// Fill in the values for the attributes\n\t\t\t// ...\n\t\t\t\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
