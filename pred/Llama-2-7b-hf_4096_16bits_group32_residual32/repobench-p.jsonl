{"pred": "\t\t\tif(CharacterUtils.isNewlineOrTabCharacter(curC)) {\n\t\t\t\tcharacterOption.add(CharacterUtils.isNewlineOrTabCharacter(curC) ? '\\n' : '\\t');\n\t\t\t\tcharacterCheck.add(CharacterUtils.is", "answers": ["\t\t\tfor(CharacterGeneralization generalization : CharacterUtils.getGeneralizations()) {"], "all_classes": null, "length": 819}
{"pred": "   assert Sentinel(\"Missing\") is not Sentinel(\"Missing\")\n\n\ndef test_sentinel_repr():\n    assert repr(Sentinel(\"Missing\")).startswith(\"Sentinel[Missing]\")\n\n\n\ndef test_sentin", "answers": ["    sentinel = Sentinel(\"name\")"], "all_classes": null, "length": 5523}
{"pred": "           importAction = new CustomImportAction(config, downloadAction);\r\n        }\r\n        \r\n        QueueAction afterSoundAction = new AfterSoundAction(config);\r\n        \r\n        QueueAction beforeSoundAction = new BeforeSoundAction(config);\r\n        \r\n        \r\n        Que", "answers": ["            importAction = new CustomImportAction(downloadAction, targetFileOrFolder);\r"], "all_classes": null, "length": 15635}
{"pred": "   I.set_tile(tile)\n    I.set_params(P, H, B, C)\n    I.set_params(P, H, B, C)\n    I.set_params(P, H, B, C)\n    I.set", "answers": ["    return states.ImageState(im, [B, I, H, P, C], pad=16, model_as_data=True)"], "all_classes": null, "length": 2705}
{"pred": "\tprivate static final String[] SELECTION = { \"AIC\", \"BIC\", \"AICc\", \"LK\",\n\t\t\t\"DT\", \"Disabled\" };\n\tprivate static final String[] SELECTION = { \"AIC\", \"BIC\", \"AIC\", \"L", "answers": ["\tprivate TreeFacade facade;"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tMinigameRoundEndEvent event = new MinigameRoundEndEvent(this, timeUp);"], "all_classes": null, "length": 3438}
{"pred": "\t\t\t\tTPosAuthorisationEntriesBeanHome home = (TPosAuthorisationEntriesBeanHome) IDOLookup.getHome(TPosAuthorisationEntriesBean.class);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tTPosAuthorisationEntriesBeanHome home = (TPosAuthorisationEntriesBeanHome) IDOLookup.getHome(TPosAuthorisationEntriesBean.class);"], "all_classes": null, "length": 1171}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRRelationQueryNode relationQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getRelationQueryNodeExplanations(relationQueryNode);\n\t\t\t\treturn expandAtom", "answers": ["\t\tpublic ExpansionResult visit(AlvisIROrQueryNode orQueryNode, Void param) {"], "all_classes": null, "length": 1248}
{"pred": "               Bernoulli(p=init_portfolio['AdjustPrb']),\n                seed=self.RNG.randint(0, 2 ** 31 - 1)\n            ).approx(\n                init_portfolio_solver['AdjustPrb'],\n           ", "answers": ["                Bernoulli,"], "all_classes": null, "length": 6188}
{"pred": "           map.put(\"aaid\", \"\");\n        }\n        map.put(\"locale\", AbstractLocaleUtils.getLocale(context));\n        map.put(\"screen_density\", ScreenDensity.get(context));\n\n        return Collections.unmodifiableMap(", "answers": ["            AaidService.requestAaid(context);"], "all_classes": null, "length": 5123}
{"pred": "           initials.update(dict(enable_flags=['track_trans_flag', 'sync_calendar']))\n        else:\n            initials.update(dict(enable_flags=['track_trans_flag', 'sync_flag']))\n        return initials\n\n    def get_", "answers": ["            initials.update(dict(transplatform_slug=WEBLATE_SLUGS[1]))"], "all_classes": null, "length": 3560}
{"pred": "       return analysis_api(analyser, poster_api, id)\n\n\ndef create_app():\n    app = Flask(__name__)\n    create_routes(app)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_", "answers": ["        return analysis_api(analyser, poster_api, id)"], "all_classes": null, "length": 2608}
{"pred": "\n@register(Theme)\nclass ThemeTranslationOptions(TranslationOptions):\n    fields = ('name', 'description')\n\n\n@register(SectorType)\nclass SectorTypeTranslationOptions(TranslationOptions):\n    fields = ('name', 'description')\n\n\n", "answers": ["@register(Goal)"], "all_classes": null, "length": 4289}
{"pred": "\nclass chumList(QtWidgets.QTreeWidget):\n    def __init__(self, mainwindow, **kwargs):\n        QtWidgets.QTreeWidget.__init__(self, **kwargs)\n        self.setColumnCount(2)\n        self.setColumnCount(2", "answers": ["class chumArea(RightClickTree):"], "all_classes": null, "length": 19323}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t  LoggerFactory.info(\"=================================JCV====================================\");"], "all_classes": null, "length": 26211}
{"pred": "     new Status(), StaticString.WHITESPACE,\n      new Fraction(), StaticString.WHITESPACE,\n      new ProgressBar(BAR_EQUALS), StaticString.WHITESPACE,\n      new Percentage(), StaticString", "answers": ["      StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"), StaticString.WHITESPACE,"], "all_classes": null, "length": 547}
{"pred": "\tpublic static Sub sub(Attribute... attributes) {\n\t\treturn new Sub(attributes);\n\t}\nNext line of code:\n\tpublic static Sup sup(Attribute... attributes) {\n\t\treturn new Sup(attributes);\n\t}\nNext line of code:\n\tpublic static Table", "answers": ["\tpublic static Sub sub(Attribute... attributes) {"], "all_classes": null, "length": 3029}
{"pred": "\t\tcreateTable(db, PipelineAppsNetTraffic.TBL_APP_NET_TRAFFIC, PipelineAppsNetTraffic.CREATE_APP_NET_TRAFFIC_TABLE);\r\n\t\tcreateTable(db, PipelineActivityRecognitionCompare.", "answers": ["\t\tcreateTable(db, PipelineCell.TBL_CELL, PipelineCell.CREATE_CELL_TABLE);\r"], "all_classes": null, "length": 2942}
{"pred": "         stat.put(TAG_FINISHED, \"true\");\n          stat.put(TAG_OK, \"true\");\n          stat.put(TAG_NAME, request.getParameter(PARAM_NAME));\n          stat.put(TAG_SIZE, request.getParameter(", "answers": ["          stat.put(TAG_FINISHED, RESP_OK);"], "all_classes": null, "length": 1517}
{"pred": "   for v in inputs:\n        if isinstance(v, File):\n            append_file(v)\n        elif isinstance(v, InputParameter):\n            if v.input_binding:\n                append_file(v.inputs, v.inputs, v.inputs", "answers": ["    map_rec_collection(append_file, inputs)"], "all_classes": null, "length": 5215}
{"pred": "\t\t\t\tterminal = new TerminalImpl();\n\t\t\t}\n\t\t\t// Set default config\n\t\t\tif (config == null) {\n\t\t\t\tconfig = new Config();\n\t\t\t}\n\t\t\t// Create the instance\n\t\t\t\treturn", "answers": ["\t\t\t\tterminal = new DefaultTerminalImpl();"], "all_classes": null, "length": 3372}
{"pred": "\t\t\tif args.cluster=='y':\n\t\t\t\tG.cluster=True\n\t\t\tG.split_size=CONVERTER_SPLIT_SIZE\n\t\t\tG.hdf52hdf5(args.out)\n\n\t\t\t\t", "answers": ["\t\tcheck_converter(args.out,args.study_name[0])"], "all_classes": null, "length": 2305}
{"pred": "       self.mask = recombine_skeletons(mask_objs,\n                                        corners, self.image.shape, 1)\n\n        # WARNING!! Setting some image values to 0 to avoid negative weights.\n        # This may cause issues, however it will allow", "answers": ["            if in_ipynb():"], "all_classes": null, "length": 5406}
{"pred": "\t\topenActivity(ManualMainActivity.class);\r\n\t}\r\n\r\n\t@OnClick(R.id.btn_course_main) public void course_main() {\r\n\t\topenActivity(CourseMainActivity.class);\r\n\t}\r\n\r\n\t@OnClick(R.", "answers": ["\t\topenActivity(ManualMainActivity.class);\r"], "all_classes": null, "length": 1651}
{"pred": "       self.config.container.setup()\n\n    def run_app(self):\n        if self.config.desktop_skip_build or self.custom_mode:\n            self.run_app_in_container()\n        else:\n            self.run_app_in_", "answers": ["            BuildCommand(self.config).run()"], "all_classes": null, "length": 3087}
{"pred": "       conditions.append(NotCondition(column))\n    else:\n        for operation in operations:\n            if operation == \"and\":\n                conditions.append(AndCondition(column, value, values))\n            elif operation == \"or\":\n                conditions.append(OrCondition(column, value", "answers": ["        conditions.append(Condition())"], "all_classes": null, "length": 3544}
{"pred": "       model_range_ = True\n    if has_index:\n        index_hash_ = True\n        index_range_ = True\n        by_index_ = True\n\n    if has_index_range_:\n        index_range_ = True\n        by_index_ =", "answers": ["        model_range_ = Column(Integer, range_key=True)"], "all_classes": null, "length": 3897}
{"pred": "       self.key_size = read_u32le(f)\n\n        self.key_pid = read_u32le(f)\n\n        self.objects = {}\n        for i in range(count):\n            key = read_u32le(f)", "answers": ["        self.key_pid = read_u16le(f)"], "all_classes": null, "length": 2255}
{"pred": "       self.broker = Broker(cls)\n        self.broker.init_broker_for_class(cls)\n        self.broker.init_broker_for_class(cls)\n        self.broker.init_broker_for_class(cls", "answers": ["        broker = get_broker(cls)"], "all_classes": null, "length": 3436}
{"pred": "   private InputProcessor keyboardAndMouse;\n    private boolean debugMode;\n    private boolean debugMode2;\n    private boolean debugMode3;\n    private boolean debugMode4;\n    private boolean debugMode5;\n    private boolean debugMode6;\n    private boolean debugMode7;\n", "answers": ["    private Array<GameObject> objectsToUpdate = new Array<>(75);"], "all_classes": null, "length": 12393}
{"pred": "\n    public static CallableBatchExecutionAssert assertThat(CallableBatchExecution actual) {\n        return new CallableBatchExecutionAssert(actual);\n    }\n\n    public static ExecutionParametersAssert assertThat(ExecutionParameters actual) {\n        return new ExecutionParametersAssert(actual);\n   ", "answers": ["    public static CallableBatchExecutionAssert assertThat(CallableBatchExecution actual) {"], "all_classes": null, "length": 1700}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n\n    def test_raises_error_on_invalid_handle(self):\n        _, library = dist.load()\n\n        with self.expect_error:\n        OpenProcess(\n            library.PROCESS_QU", "answers": ["        CloseHandle(handle)"], "all_classes": null, "length": 3814}
{"pred": "       // 1. 如果appName为空，则返回全局配置\n        // 2. 如果appName不为空，则返回当前环域的配置\n\t\tif (Objects.isNull(appEntity)){\n\t", "answers": ["\t\tList<AppconfigEntity> configs = ignoreGlobal ? new  ArrayList<>() : appconfigMapper.findGlobalConfig(env,appEntity.getGroupId(), version);"], "all_classes": null, "length": 2817}
{"pred": "       'single': SingleStateGenerator,\n        'update': UpdateStateGenerator,\n        'action': ActionGenerator,\n        'start': StartActionGenerator,\n        'stop': StopActionGenerator,\n        'restart': RestartActionGenerator,\n        'remove': RemoveActionGenerator,\n", "answers": ["        'create': (DependencyStateGenerator, simple.CreateActionGenerator),"], "all_classes": null, "length": 3744}
{"pred": "       self.__device = device\n        self.__ifb_device = None\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__ip_version = ip_version\n        self.__is_parse_filter_id = True\n", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 5653}
{"pred": "           assertEquals(\"Deadlock should contain of 2 threads\", 2, deadlock.size());\n        }\n    }\n\n    @Test\n    public void discoverDeadlockWithThreadsInDifferentThreadGroups() {\n        final Object lockA = new Object();\n        final", "answers": ["            for (JvmThread thread: deadlock) {"], "all_classes": null, "length": 3642}
{"pred": "\t\t\t\t\t\tFilesContainerInfo info = client.getContainerInfo(name);\n\t\t\t\t\t\tSystem.out.println(\"Container \" + name + \" has \" + info.getObjectCount() + \" objects\");\n\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tFilesContainerInfo containerInfo = client.getContainerInfo(name);"], "all_classes": null, "length": 4792}
{"pred": "   Map<String, Object> data = new HashMap<>();\n    data.put(\"extensions\", ExtensionUtil.getExtensions());\n    data.put(\"proxyMode\", PDownConfigContent.getInstance().getProxyMode());\n    data.put(\"proxyConfig\", PDownConfigContent.getInstance().get", "answers": ["    ExtensionContent.load();"], "all_classes": null, "length": 5854}
{"pred": "\t\t\tif (args.length < 2) {\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\t\n\t\t\tString[] args2 = new String[];\n\t\t\targs2 = args;\n\t", "answers": ["\t\tArgumentParser aParser = new ArgumentParser(args);"], "all_classes": null, "length": 11523}
{"pred": "       QueuesFragment.QueuesFragmentListener,\n        QueuedProjectFragment.QueuedProjectFragmentListener,\n        StashesFragment.StashesFragmentListener,\n        StashSearchFragment.StashSearchFragmentListener,\n        PatternFragment.PatternFragmentListener,\n        PatternSearchFragment.", "answers": ["        ProjectFragment.ProjectFragmentListener,"], "all_classes": null, "length": 13276}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room member.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 19103}
{"pred": "   '--sort-by-name Sort by name.',\n    '-n, --names-only Return only the object paths (names).',\n    CMD_OPTION_NAMESPACE_HELP_LINE,\n    CMD_OPTION_NAMES_ONLY_H", "answers": ["    CMD_OPTION_MULTIPLE_NAMESPACE_HELP_LINE,"], "all_classes": null, "length": 7829}
{"pred": "  * f2 -> ( Ord1Search() )?\r\n   */\r\n  public String visit(CheckOrd3Search n, String query) {\r\n    StringBuilder returnString = new StringBuilder();\r\n\r\n    returnString.append(n.f0.accept(this, query));\r\n\r", "answers": ["  public String visit(CheckOrd3Search n, String query) {\r"], "all_classes": null, "length": 1990}
{"pred": "           bs = BnuVJScanner()\n            l = bs.Scanner()\n        elif self.ojname=='bzoj':\n            bs = BzojScanner()\n            l = bs.Scanner()\n        elif self.ojname=='hust':\n", "answers": ["            bs = BnuVJScanner()"], "all_classes": null, "length": 2076}
{"pred": "   class Model(BaseModel):\n        id = Column(UUID, hash_key=True)\n\n    assert Model.Meta.table_name == \"Model\"\n\n\ndef test_meta_table_name_is_not_set():\n    \"\"\"If a model's Meta", "answers": ["    class MetaClass(IMeta):"], "all_classes": null, "length": 3962}
{"pred": "       return Matrix.getInstance(getActivity()).getSession(matrixId);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (mBackProgressView != null) {\n            mBackProgressView = (ViewGroup) m", "answers": ["        return Matrix.getMXSession(getActivity(), matrixId);"], "all_classes": null, "length": 37352}
{"pred": "       \"date_hired\": (\"Last %s\", \"Last %s\"),\n        \"last_incident\": (\"Last %s\", \"Last %s\")\n    }\n\n    order_by = (\"id\", \"name\", \"active\", \"department__name\", \"position__name", "answers": ["        \"last_incident\": [TODAY, YESTERDAY, TOMORROW, THIS_WEEK, WEEK_TO_DATE, LAST_WEEK, NEXT_WEEK, THIS_MONTH,"], "all_classes": null, "length": 5939}
{"pred": "       self.setpoint_output_list.append(SetpointOutput.ANALOGOUT0)\n        # Setpoint result outputs a value to Analog Out 1\nNext line of code:\n        self.setpoint_output_list.append(SetpointOutput.ANALO", "answers": ["        self.setpoint_output_list.append(SetpointOutput.DAC0)"], "all_classes": null, "length": 2360}
{"pred": "   self._processing = AsyncResult()\n    self._processing.SafeLink(self._AsyncProcessTransaction)\n    self._processing.SafeLink(self._AsyncProcessRequest)\n    self._processing.SafeLink(self._AsyncProcessResponse)\n    self._processing.Safe", "answers": ["        error=ChannelConcurrencyError("], "all_classes": null, "length": 1867}
{"pred": "       .addEmailValidation(new RegexValidation(Patterns.EMAIL_ADDRESS.pattern(),\n                context.getString(R.string.invalid_email)));\n        signupProviders.add(emailSignupProvider);\n\n        ArrayList<BaseProvider> loginProviders = new ArrayList<>();", "answers": ["                .addPasswordValidation(new LengthValidation(4, 8, getString(R.string.password_length)));"], "all_classes": null, "length": 2835}
{"pred": "\t\t\t.dithering(Dithering.DISABLE)\n\t\t\t.asBufferedImage();\n\t\t\n\t\t// then\n\t\tassertEquals(50, thumbnail.getWidth());\n\t\tassertEquals(50, thumbnail.getHeight());\n", "answers": ["\t\t\t.dithering(Dithering.DEFAULT)"], "all_classes": null, "length": 2634}
{"pred": "\t@Override\n\tpublic void pitchChanged(final Camera camera, final AngleF pitch) {\n\t\tthis.sliderPitch.setValue(pitch.getDegrees());\n\t}\n\t\n\t/**\n\t * Called by a {@link Camera} instance when its y", "answers": ["\tpublic void pitchChanged(final Camera camera, final AngleF pitch) {"], "all_classes": null, "length": 6136}
{"pred": "        * @param client HuaweiApiClient 实例\r\n         */\r\n        public static void getPushState(final IGetPushStateHandler handler, final HuaweiApiClient client) {\r\n            HMSAgentLog.INST.getPushState(handler, client);\r\n        }\r\n   ", "answers": ["        public static void getToken(GetTokenHandler handler){\r"], "all_classes": null, "length": 4453}
{"pred": "         PipeBundle pipeBundle = new PipeBundle(catBytes);\n          PipeReader reader = new PipeReader(pipeBundle);\n          FASTDecoder decoder = new FASTDecoder(reader);\n          FASTReaderReactor readerReactor = new FASTReaderReactor", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 15436}
{"pred": "\n    public ProjectFragment getProjectFragment() {\n        return new ProjectFragment_();\n    }\n\n    public ProjectSearchFragment getProjectSearchFragment() {\n        return new ProjectSearchFragment_();\n    }\nNext line of code:\n\n    public ProjectSearchFragment getProjectSearchFragment()", "answers": ["    public ProjectsFragment getProjectsFragment() {"], "all_classes": null, "length": 5548}
{"pred": "       if (prefs.getBoolean(ThemePreference.THEME_PREFERENCE_KEY, true)) {\n            setTheme(R.style.AppTheme);\n        } else {\n            setTheme(R.style.AppTheme);\n        }\n    }\n\n", "answers": ["        boolean dark = ThemeHelper.isDarkThemeSelected(this);"], "all_classes": null, "length": 9657}
{"pred": "\t */\n\tpublic VoiceList materialVoiceList(int offset, int count) {\n\t\treturn postJson(VoiceList.class,\n\t\t\t\t\"/material/batchget_material?access_token=\" + HttpUtil.urlEncode(cache.getAccess", "answers": ["\tpublic VoiceList materialVoiceList(int offset, int count) {"], "all_classes": null, "length": 868}
{"pred": "           word_embs,\n            name='word_embs')\n\n        def_embs = self._def_reader.apply(def_embeddings, def_mask)\n        application_call = application_call\n        application_call = application_call\n\n        def_", "answers": ["            masked_root_mean_square(word_embs, mask), name='word_emb_RMS')"], "all_classes": null, "length": 7421}
{"pred": "   eq_(newapp.app.auto_decimal_place, True)\n    eq_(newapp.app.show_schedule_scope_dialog, False)\n\ndef test_load_document():\n    # when the document is loaded, the date range type and the first weekday", "answers": ["    newdoc = Document(newapp)"], "all_classes": null, "length": 10150}
{"pred": "           raise ID3NoHeaderError(fn)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            raise ID3NoHeaderError(\"%s: too small\" % fn)"], "all_classes": null, "length": 1171}
{"pred": "\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tif (e.getCause() != null) e.getCause().printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t\tfinally {\n\t\t\tFile", "answers": ["\t\tcatch (FilesException e) {"], "all_classes": null, "length": 7363}
{"pred": "\tpublic void onDelete() {\n\t\tsuper.onDelete();\n\t\tEcho.getEventListener().onDeleteProfileObject(this);\n\t}\n\t\n\t@Override\n\tpublic void onNew() {\n\t\t\tsuper.onNew();\n\t\tEcho.get", "answers": ["\tprotected synchronized boolean setProperty(EchoProperty property) {"], "all_classes": null, "length": 2490}
{"pred": "               for o in COMMAND_OPTIONS[command]:\n                    if is_unused(o) and is_current(o):\n                        positionals.append(get_opt_name(o))\n\n                if positionals:\n                    yield ' '.join(positionals", "answers": ["                possible_options = [x for x in all_options(command) if is_unused(x)"], "all_classes": null, "length": 8051}
{"pred": "       ShelfBuilder builder = new ShelfBuilder();\n        builder.setShelfName(\"货架名称\");\n        builder.setShelfType(\"货架类型\");\n        builder.setShelfType(\"货架类型", "answers": ["        ShelfBuilder builder = ShelfBuilderTest.build();"], "all_classes": null, "length": 18113}
{"pred": "       // start the login fragment\n        if (success) {\n            activity.runOnUiThread(new Runnable() {\n                public void run() {\n                    LoginFragment.showLoginFragment();\n                }\n            });\n        }\n    }\n}\nyasme/", "answers": ["        ObservableRegistry.getObservable(classToNotify)"], "all_classes": null, "length": 8869}
{"pred": "           start_at = start_at.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n        if isinstance(end_at, datetime):\n            end_at = end_at.strftime(\"%Y-%m-%dT%H:%M:%", "answers": ["            start_time = timestamp_from_dt(start_at)"], "all_classes": null, "length": 6603}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class RedisBroker(Broker):"], "all_classes": null, "length": 2022}
{"pred": "                        ten_week_reminder_seven_days(\"English\").format(name=\"Roland\"))\n\n    @freeze_time(FAKE_NOW)\n    def test_remind_at_ten_weeks_one_day_english(self):\n", "answers": ["                         ten_week_reminder_seven_days(\"English\").format(name=\"Roland\"))"], "all_classes": null, "length": 3961}
{"pred": "               self.setprogram(self.KALK_MIX_TIME, \"Mixing Kalkwasser\")\n                self.setprogram(self.KALK_SETTLE_TIME, \"Kalkwasser settling\")\n                self.setprogram(self.KAL", "answers": ["                self.deviceoutput(Devices.KALK_STIRRER, 1, \"Mixing Kalkwasser\")"], "all_classes": null, "length": 4345}
{"pred": "   @encode.register(WccLineData)\n    def _(obj):\n        return dict(\n            __wcc_line_data__=True, wcc=encode(obj.wcc)\n        )\n\n\n@encode.register(VolumeData)\ndef _(", "answers": ["@encode.register(OverlapLineData)"], "all_classes": null, "length": 1300}
{"pred": "               send_connect_email(subject, template, moderator, site,\n                                   url, comments, new_user)\n\n            # Log the user in\n            login(request, new_user)\n\n            messages.success(request, _('Your account request has been '\n", "answers": ["                send_connect_email(subject=subject,"], "all_classes": null, "length": 3275}
{"pred": "           server = TelnetServer(sock, self.asset, self.system_user)\n        return server\n\n    def get_ssh_server_conn(self, cache=False):\n        if cache:\n            server = self.get_ssh_server\n        else:\n            server", "answers": ["            server = TelnetServer(sock, self.asset, self.system_user)"], "all_classes": null, "length": 4074}
{"pred": "       self.schema = AccelerationsSchema(self.fdmexec)\n\n    def get(self):\n        \"\"\"return the object data when a GET request is executed\"\"\"\n        return self.schema.dump(self.fdmexec.GetAccelerations())\n\n\nclass Vel", "answers": ["        self.accelerations = Accelerations(self.fdmexec)"], "all_classes": null, "length": 2668}
{"pred": " return 1 / (1 - exp(-bandwidth / 2))\n\n\n@resonator.strategy(\"poles_exp_2\")\ndef resonator(freq, bandwidth):\n  \"\"\"\n  Resonator filter with 2-poles (conjug", "answers": ["  R = exp(-bandwidth * .5)"], "all_classes": null, "length": 5895}
{"pred": "   public static final String RESTORE_IMAGE_URI = \"imageUri\";\r\n    public static final String RESTORE_IMAGE_URI = \"imageUri\";\r\n    public static final String RESTORE_IMAGE_URI = \"imageUri\";\r\n    public static final String RESTORE_IMAGE", "answers": ["    private ChatAdapter mAdapter;\r"], "all_classes": null, "length": 9141}
{"pred": "\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is Part:\n\t\t\treturn get_icon(\"part\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon", "answers": ["\t\telif type(obj) is SketchView:"], "all_classes": null, "length": 2198}
{"pred": "           url = savedInstanceState.getString(EXTRA_URL);\r\n        }\r\n        if (url.isEmpty()) {\r\n            url = Preferences.get(this).getWallpaperUrl();\r\n        }\r\n        if (url.isEmpty()) {\r\n            url = Preferences.get(this", "answers": ["            url = savedInstanceState.getString(Extras.EXTRA_URL);\r"], "all_classes": null, "length": 11773}
{"pred": "               if (syntax.op2QMarkGroupEffect()) {\n                    if (syntax.op2QMarkGroupEffect() == 2) {\n                        if (syntax.op2QMarkGroupEffect() == 2) {\n                            if (syntax.op2QMarkGroupEffect", "answers": ["                node = new AnchorNode(AnchorType.PREC_READ);"], "all_classes": null, "length": 10841}
{"pred": "\t\t// Downloader.downloadFromUrl(url, service, id);\n\t\treturn Downloader.downloadFromUrl(url, service, id);\n\t}\n\n\t/**\n\t * Calls\n\t * {@link Downloader#downloadFromUrl(String, es.prodevelop.", "answers": ["\t\tDownloader d = new Downloader();"], "all_classes": null, "length": 4492}
{"pred": "       self.beg_alt = self.beg_vect[1]\n        self.end_alt = self.end_vect[1]\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_vect, self.end_ve", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2103}
{"pred": "   public static native Repository globalGetRepository(String path);\n\n    public static native Repository globalGetRepository(InputStream stream);\n\n    public static native Repository globalGetRepository(String path);\n\n    public static native Repository globalGetRepository(InputStream stream);\n\n    public static native", "answers": ["    public static native <T extends GitObject> T objectLookup(Repository repository, ObjectId oid, int type);"], "all_classes": null, "length": 4474}
{"pred": "       root_dto.versions = {\"v1\": version1, \"v2\": version2}\n\n        method1 = Method()\n        method1.category = \"a\"\n        method1.name = \"m1\"\n        method1 = MethodDto(method1)\n", "answers": ["        category1 = MethodCategory(Category(\"c1\"))"], "all_classes": null, "length": 2083}
{"pred": "   listing_base = generate_resource_listing(\n        {'pyramid_swagger.schema_directory': 'tests/sample_schemas/good_app/'},\n        listing,\n    )\n\n    assert listing_base == {\n        'swaggerVersion': 1.", "answers": ["    listing = generate_resource_listing("], "all_classes": null, "length": 1195}
{"pred": "       MONTH_TO_DATE, THIS_QUARTER, QUARTER_TO_DATE, YEAR_TO_DATE, NEXT_QUARTER, NEXT_YEAR]\n    }\n\n    date_range_labels = {\n        \"last_inc", "answers": ["                          MONTH_TO_DATE, LAST_MONTH, NEXT_MONTH, THIS_YEAR, LAST_YEAR, NEXT_YEAR, YEAR_TO_DATE]"], "all_classes": null, "length": 346}
{"pred": "\n  def _ProcessTaggedReply(self, tag, stream):\n    msg = MessageHelper.read_message(stream)\n    if msg.type == MessageHelper.MESSAGE_TYPE_ERROR:\n      self._OnError(msg.error_code(msg.error_", "answers": ["class KafkaRouterSink(ClientMessageSink):"], "all_classes": null, "length": 2895}
{"pred": "       heading_indicator = HeadingIndicator(fdmexec)\n\n        orientation = Orientation(fdmexec)\n\n        self.assertAlmostEqual(heading_indicator.heading, orientation.psi, 3)\n\nclass VerticalSpeedIndicatorTests(TestCase):", "answers": ["        heading_indicator = HeadingIndicator(fdmexec)"], "all_classes": null, "length": 2873}
{"pred": "   form_class = DeviceForm\n\n    def form_valid(self, form):\n        device = form.save(commit=False)\n        device.user = self.request.user\n        device.save()\n        return super(DeviceAdd, self).form_valid(form)", "answers": ["    form_class = DeviceForm"], "all_classes": null, "length": 3288}
{"pred": "       return keyword, child_name, date\n\n\n    def process_keyword(self, keyword, child_name, date_of_birth, preg_update=False):\n        \"\"\"Process the keyword and return the message to send to the user.\"\"\"\n        if keyword == \"subscribe\":", "answers": ["        date = date_string_to_date(date) if date and date_is_valid(date) else None"], "all_classes": null, "length": 2150}
{"pred": "               new RegisterFragment.RegistrationParam(name, email, password, password_check));\n        if (success) {\n            AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n            activity.runOnUiThread(new Runnable() {\n                public void", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 6645}
{"pred": "                   SleepTimer.setTimer(MainActivity.this, getSharedPreferences(SleepTimer.PREFERENCES_NAME, MODE_PRIVATE), 0);\n                    break;\n                case DialogInterface.BUTTON_NEGATIVE:\n                    S", "answers": ["                    DialogUtils.showSleepHmsPicker(MainActivity.this, mHmsPickerHandler);"], "all_classes": null, "length": 12019}
{"pred": "\t\t// Create a new custom list\n\t\tCustomListsPopupAdapter adapter = new CustomListsPopupAdapter(Db.getCustomLists(this, beer._id));\n\t\tList<CustomList> customLists = adapter.getCustomLists();\n\t\t//", "answers": ["\t\tCustomList newList = new CustomList();"], "all_classes": null, "length": 2472}
{"pred": "\t\t\treturn UserManagement.addUser(user);\n\t\t}\n\n\t@POST\n\t@Path(\"adduser/{user}/{password}\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic boolean addRemittUser(UserDTO user, String password", "answers": ["\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),"], "all_classes": null, "length": 1811}
{"pred": "       assertThat(pe, param(1, is(100)));\n        assertThat(pe, param(1, is(100L)));\n        assertThat(pe, param(1, is(1000));\n        assertThat(pe, param(1, is", "answers": ["        assertThat(pe, paramAsInteger(1, is(100)));"], "all_classes": null, "length": 1904}
{"pred": "                   DefaultExtendsStandardTestFieldEvaluator.INSTANCE);\n    \n    public static final Set<StandardTestFieldEvaluationSpec> ALL_SPECS = \n            Collections.unmodifiableSet(new HashSet<StandardTestFieldEvaluationSpec>(Arrays.", "answers": ["                    DefaultExtendsStandardTestFieldEvaluator.INSTANCE);"], "all_classes": null, "length": 2718}
{"pred": "     'serialization_successes': Counter,\n      'deserialization_successes': Counter,\n      'serialization_time': AverageRate,\n      'deserialization_time': AverageRate,\n      'serialization_time': AverageRate,\n", "answers": ["      'message_bytes_sent': AverageRate,"], "all_classes": null, "length": 3991}
{"pred": "       FragmentObservable<QRData, QRData> observable = ObservableRegistry.getObservable(QRCodeFragment.class);\n        observable.register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 3508}
{"pred": "       self.source_path = self.source_model.filePath\n        self.source_path = self.source_model.filePath\n        self.source_path = self.source_model.filePath\n        self.source_path = self.source_model.filePath\n", "answers": ["        self._merge_view_model = FileViewModel()"], "all_classes": null, "length": 1908}
{"pred": "   public static <$SystemUnderTest> AndGiven<$SystemUnderTest> givenSut(Class<$SystemUnderTest> sutClass,\n            CheckedSupplier<$SystemUnderTest> givenStep) {\n        return givenSutClass(sutClass).given(", "answers": ["    public static ThenWithoutResult<Void> when(CheckedRunnable whenStep) {"], "all_classes": null, "length": 1908}
{"pred": "               return SnmpSetRequest.newFromEncodedSnmpVariable(this);\n            default:\n                throw new IllegalArgumentException(\"Unknown SnmpType: \" + this.getSnmpType().name());\n        }\n    }\n\n    public SnmpType getSn", "answers": ["                return SnmpSetRequest.newFromEncodedSnmpVariable(this);"], "all_classes": null, "length": 6041}
{"pred": "\tprivate FOInsertCoverPagePostprocessor foInsertCoverPage = new FOInsertCoverPagePostprocessor();\n\n\tprivate FOInsertEndQuestionPostprocessor foInsertEndQuestion = new FOInsertEndQuestionPostprocessor();\n\n\tprivate FOMailing = new FOMailing();\n\n\tprivate", "answers": ["\tprivate FOInsertCoverPagePostprocessor foInsertCoverPage = new FOInsertCoverPagePostprocessor();"], "all_classes": null, "length": 2214}
{"pred": "   converter = TextConverter(\n        logger=logger,\n        con=con,\n        symbol_replace_value=ctx.obj[Context.SYMBOL_REPLACE_VALUE],\n        add_pri_key_name=ctx.ADD_PRIMARY_KEY_NAME,", "answers": ["    converter = TextConverter("], "all_classes": null, "length": 6384}
{"pred": "           raise FinTSError('No pending signature')\n\n        self.pending_signature.sign(self.pin)\n        message += self.pending_signature\n\n    def verify(self, message: FinTSMessage):\n        if not self.pending_signature:", "answers": ["            raise FinTSError(\"No signature is pending\")"], "all_classes": null, "length": 2202}
{"pred": "   ComparisonCondition, ContainsCondition, InCondition,\n    NotCondition, OrCondition,\n}\n\n\ndef test_comparison_aliases():\n    for alias, comparison in comparison_aliases:\n        assert alias == comparison\n        assert alias == comparison\n        assert alias == comparison", "answers": ["    ComparisonCondition, Condition, ContainsCondition, InCondition, NotCondition, OrCondition}"], "all_classes": null, "length": 3646}
{"pred": "   private EditText cardNumberEditText;\n    private EditText cardAliasEditText;\n    private EditText cardExpirationEditText;\n    private Spinner currencySpinner;\n    private Button saveButton;\n    private Button cancelButton;\n    private Button editButton;\n    private Button;\n", "answers": ["    List<Currency> currencies;"], "all_classes": null, "length": 6622}
{"pred": "   private int bgTasksRunning = 0;\n\n    private SearchContactFragment.DataClass dataClass;\n    private SearchContactFragment.UsersClass usersClass;\n\n    private SearchContactFragment.UsersClass users;\n\n    private SearchContactFragment.UsersClass users;\n\n    private Search", "answers": ["    private UserAdapter mAdapter;"], "all_classes": null, "length": 3414}
{"pred": "\t\tcontextRef = new SoftReference<Context>(context);\n\t\tapps = new ArrayList<BaseData>();\n\t\tbuttons = new ArrayList<ImageView>();\n\t\tdockBar = (LinearLayout) findViewById(R.id.dock_bar);\n\t\tdefaultHeight = (", "answers": ["\t\tApps mainActivity = (Apps) context;"], "all_classes": null, "length": 2204}
{"pred": "\n        self.mc.events.post(\"add_widget1_to_current\")\n        self.advance_real_time()\n\n        self.assertEqual(self.mc.widgets[0].x, 45)\n        self.assertEqual(self.mc.", "answers": ["        widget = Rectangle(self.mc, config)"], "all_classes": null, "length": 3717}
{"pred": " private PluginService pluginService;\n\n  @Inject\n  private ScenicView scenicView;\n\n  @FXML\n  private BorderPane borderPane;\n\n  @FXML\n  private TabPane tabPane;\n\n  @FXML\n  private Tab tabCache", "answers": ["  private PluginService pluginService;"], "all_classes": null, "length": 1599}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected Location lastLocation;\n  protected Location lastLocationCheck;\n  protected Location lastLocationCheckTime;\n  protected Location lastLocationCheckinTime;\n  protected Location lastLocationCheckin;\n  protected Location lastLocationCheckin;\n", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 3556}
{"pred": "   private GuiTextField textField;\n    private String text;\n    private int xPos;\n    private int yPos;\n    private int width;\n    private int height;\n    private boolean isFocused;\n    private boolean isFocused;\n    private boolean isF", "answers": ["    private GuiText textField = new GuiText(new GuiTextField(0, fr, 0, 0, 0, 0) {"], "all_classes": null, "length": 3564}
{"pred": "                                       visualization = new Starfield3D();\n                                    } else if (periodModel.getVisualizer().equalsIgnoreCase(\"Star Field 3D\")) {\n                                        visualization = new Starfield3D();\n                                    } else if (periodModel.getVisual", "answers": ["                                        visualization = new Starfield3D();"], "all_classes": null, "length": 7206}
{"pred": "           // 1. get the picture for every single user\n            // 2. when the GetImageWithoutSavingTask returns, add the user to the adapter\n            // 3. call notifyDateSetChanged()\n            DatabaseManager.INSTANCE.getUserDAO().getUserDAO", "answers": ["            FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs ="], "all_classes": null, "length": 4823}
{"pred": "       return new BattleFlowPresenter(provider);\n    }\n\n    @ActivityScope\n    @Provides\n    @IntoMap\n    @CLEnumKey(CodeLabData.JUST)\n    public static CodeLabContract.Presenter provideJustPresenter(BaseScheduler", "answers": ["        return new BattleFlowPresenter(provider);"], "all_classes": null, "length": 4354}
{"pred": "   Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n     */\n    @GET(\"api", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 5458}
{"pred": "                   node = parse(tokenize(source, errors=errors))\n            except ParseError as e:\n                with errors.module_ctx(name):\n                    raise ParseError('{}; unexpected token \"{}\"'\n                                     .format(e.msg, e.token.type", "answers": ["                    node = parse(list(tokenize(source.content, errors)), errors)"], "all_classes": null, "length": 3940}
{"pred": "               _n.value += 1\n                _count += 1\n        except:\n            pass\n\n        if _multiprocessing:\n            _buffer.write(struct.pack(\"=H\", _count)\n            _buffer.write(struct.pack(\"=H\", _", "answers": ["                write_block(_buffer, _count, struct.pack(\"=II\", sec, usec) + packet)"], "all_classes": null, "length": 3837}
{"pred": " Call<ListResult<ListenNowSituation>> listListenNowSituations(@Body PagingRequest body);\n\n  @POST(\"sj/v2.5/listennow/situations\")\n  Call<ListResult<ListenNowSituation>> list", "answers": ["  Call<ListenNowSituation> getListenNowSituation(@Body TimeZoneOffset offset);"], "all_classes": null, "length": 4201}
{"pred": "           timestamp = TH.get_current_timestamp()\n            file_url = await self.MyBingoCardManager.save_bingo_card(ctx.message.guild.id, card_for.id, bingo_card, event_pokemon, timestamp)\n\n       ", "answers": ["            timestamp = TH.as_local_time(TH.epoch(message.created_at, 'UTC'), timezone)"], "all_classes": null, "length": 5684}
{"pred": "       MinecraftForge.EVENT_BUS.register(new PlayerSpawnHandler());\n        MinecraftForge.EVENT_BUS.register(new PlayerTickHandler());\n        MinecraftForge.EVENT_BUS.register(new CommandDelayHandler());\n       ", "answers": ["        LoreLoader.initialize();"], "all_classes": null, "length": 3141}
{"pred": "               \"ConditionExpression\": condition,\n            })\n            if attrs[\"Attributes\"]:\n                obj.unload()\n                obj.load(attrs[\"Attributes\"])\n            if sync == \"old\":\n                obj.load(attrs=attrs=attrs=attrs=attr", "answers": ["                **render(self, obj=obj, condition=condition)"], "all_classes": null, "length": 8967}
{"pred": "       MovieDetailsIntentService.start(appContext, mMovieDBId);\n    }\n\n    /**\n     * Start the MovieDetailsIntentService to retrieve trailers and reviews\n     */\n    private void startMovieDetailsIntentService () {\n        Context appContext = getActivity().getApplicationContext", "answers": ["        Intent intent = new Intent(appContext, MovieDetailsIntentService.class);"], "all_classes": null, "length": 6771}
{"pred": "       Intent intent = raw;\n        if (intent == null) {\n            return null;\n        }\n        // 获取目标Activity\n        ComponentName componentName = intent.getComponent();\n        if (componentName == null) {\n            return null;\n        }\n       ", "answers": ["        if (!raw.hasExtra(ApkConstant.EXTRA_APK_MODIFIED)"], "all_classes": null, "length": 867}
{"pred": "\t\t\treturn dataParser.parseServiceList(rawServiceListData);\n\t\t} catch (MalformedURLException e) {\n\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\"Malformed URL while trying to get the service list\",\n\t\t\t\t\t\t", "answers": ["\t\t} catch (DataParsingException e) {"], "all_classes": null, "length": 2262}
{"pred": "           '/gateways':                    RestGateways,\n            # AppInterface endpoints\n            '/appinterface/<int:appinterface_id>': RestAppInterface,\n            '/appinterfaces':              RestAppInterfaces,\n            # AppProperty endpoints\n            '/appproperty/", "answers": ["            '/gateways':                    RestGateways,"], "all_classes": null, "length": 5652}
{"pred": "       EncodedTextSpec(\"text\", default=u\"\"),\n        ID3FramesSpec(\"sub_frames\"),\n    ]\n\n    @property\n    def HashKey(self):\n        return '%s:%s' % (self.element_id, self.encoding)\n\n   ", "answers": ["        MultiSpec('text', EncodedTextSpec('text'), sep=u'\\u0000', default=[]),"], "all_classes": null, "length": 5066}
{"pred": "       self.assertFalse(UserCreationForm.base_fields.get('username'))\n\n\nclass CustomUserChangeFormTest(TestCase):\n    \"\"\"\n    Test our customised change password form.\n    These tests are a modified version of those found at\n    django.contrib.auth", "answers": ["        form = CustomUserCreationForm()"], "all_classes": null, "length": 1804}
{"pred": "   baseline_data = create_caltrack_daily_design_matrix(\n        meter_data, temperature_data\n    )\n\n\n@pytest.fixture\ndef baseline_data_billing(il_electricity_billing_daily):\n    meter", "answers": ["    baseline_meter_data, warnings = get_baseline_data("], "all_classes": null, "length": 5676}
{"pred": "       return self.parser.expression(rbp=40)\n\n\n@method(infix('-', bp=40))\ndef evaluate_minus_operator(self, context=None):\n    if len(self) == 1:\n        arg = self.get_", "answers": ["        op1, op2 = self.get_operands(context, cls=ArithmeticProxy)"], "all_classes": null, "length": 4889}
{"pred": "public class SearchPatternsFragment extends PagingListFragment<PatternShort, PatternsResult> implements SearchCriteriaDialog.SearchCriteriaDialogListener {\n\n    @Pref\n    private YarrnPrefs_ prefs;\n    @Pref\n    private Collection<SearchCriteria> search", "answers": ["public class PatternSearchFragment extends PagingListFragment<PatternsResult, PatternShort> {"], "all_classes": null, "length": 6286}
{"pred": "               push(new MediaTypeNode()),\n                MediaTypeDefinition(), peek(1).addChild(pop()),\n                Ws0Nodes()\n        );\n    }\n\n    /**\n     * \"@media\" Ws0 \"only\"? \"(\" Css property \")\"\n     */", "answers": ["            push(new MediaTypeNode()),"], "all_classes": null, "length": 7110}
{"pred": "   return node.clone_with(\n        [self.visit(i) for i in node.values])\n\ndef def_args(node):\nNext line of code:\n    return node.clone_with(\n        [self.visit(i) for i in node.", "answers": ["    assert isinstance(node, List), type(node)"], "all_classes": null, "length": 2370}
{"pred": "       BitcodinApi api = new BitcodinApi(apiKey);\n\n        /* Create HTTPInputConfig */\n        HTTPInputConfig httpInputConfig = new HTTPInputConfig();\n        httpInputConfig.setUrl(\"http://bitmovin.com/api/vtt/mpd/", "answers": ["        BitcodinApi bitApi = new BitcodinApi(apiKey);"], "all_classes": null, "length": 2587}
{"pred": "   class Meta:\n        table_name = \"my-table-name\"\n\n    model = LocalModel()\n    assert model.Meta.table_name == \"my-table-name\"\n\n\ndef test_default_table_name_template(dynamodb, dynamodbstream", "answers": ["        id = Column(Integer, hash_key=True)"], "all_classes": null, "length": 8175}
{"pred": "\t\t\tif (value instanceof EAtom) {\n\t\t\t\tEAtom a = (EAtom) value;\n\t\t\t\tif (a.testAtom() == ERT.am_exit) {\n\t\t\t\t\texitCode = a.testAt", "answers": ["\t\t\tESmall val = value.testSmall();"], "all_classes": null, "length": 10614}
{"pred": "       Bit('CP', ReprName='Control Protocol Flag', Pt=13, BitLen=1, \\\r\n            Dict=SMSCP_dict, Repr='hum'),\r\n        Bit('CP', ReprName='Control Protocol', Pt=13,", "answers": ["        Int('Type', Type='uint8', Dict=SMSCP_dict),\r"], "all_classes": null, "length": 13531}
{"pred": "   var docerConf = config.getOrThrow(name(), DocerConf.class);\n    var convention = config.getOrThrow(\"convention\", ConventionFacade.class);\n    var moduleDependencyPath = modulePathOrDependencyPath(docerConf.moduleDependencyPath", "answers": ["    var log = Log.create(name(), config.getOrThrow(\"pro\", ProConf.class).loglevel());"], "all_classes": null, "length": 7396}
{"pred": "                   [\n                        None,\n                        MIN_PACKET_DUPLICATE_RATE,\n                        MIN_VALID_PACKET_DUPLICATE_RATE,\n                        MAX_PACKET_DUPLICATE_RATE,\n", "answers": ["                    [None, MIN_PACKET_DUPLICATE_RATE, MAX_PACKET_DUPLICATE_RATE],  # duplicate"], "all_classes": null, "length": 3444}
{"pred": "       self.connector = HttpConnector(loop, self.event_loop, self.version)\n        self.node = Node(PUBKEY, self.version, '127.0.0.1', 127.0.0.1)\n        self.", "answers": ["                                           PRIVATE_KEY, 999999)"], "all_classes": null, "length": 5045}
{"pred": "       root = self.factory.create_from_root(Root())\n        self.assertEqual(root.version_name, \"v1\")\n        self.assertEqual(root.categories[0].name, \"root\")\n        self.assertEqual(root.categories[0].name", "answers": ["        root = Root()"], "all_classes": null, "length": 3856}
{"pred": "               config_interface=ConfigInterfaceCommandProcessor(),\n                config_vrf=ConfigVRFCommandProcessor(),\n                enabled=EnabledCommandProcessor()))\n\n\nclass Cisco3850SwitchCore(BaseCiscoSwitchCore):\n    def __init__(self, switch_configuration", "answers": ["                config_vrf=ConfigVRFCommandProcessor(),"], "all_classes": null, "length": 9432}
{"pred": "               self.setstatus(Statuses.ALERT, \"Auto-topoff has been suspended.\", True)\n                return\n\n            if self.program[ProgramCodes.CODE] == self.OFF_PROGRAM:\n                self.setstatus(Statuses.UNDEFINED", "answers": ["                if sumpLevel == WaterLevels.LOW:"], "all_classes": null, "length": 5263}
{"pred": "       DoubleDerivatives callDeltaSad = BlackFormula2.delta_Sad(DATA[looptest][0], DATA[looptest][1],\n            DATA[looptest][2], DATA[looptest][3], DATA[looptest][", "answers": ["        DoubleSad callPriceSadA = BlackFormula2.price_Sad_Automatic(DATA[looptest][0], DATA[looptest][1],"], "all_classes": null, "length": 2873}
{"pred": "   log.info(\"Using configuration: {}\", cfg);\n\n    log.info(\"Starting TESOBE's OBP kafka north demo...\");\n\n    log.info(\"Using configuration: {}\", cfg);\n\n    log.info(\"Starting TESOB", "answers": ["    connector = Transport.defaultFactory().connector(new SimpleNorth(cfg));"], "all_classes": null, "length": 1503}
{"pred": "       self._append(FIELD_INT)  # session_id\n        self._append(FIELD_INT)  # cluster_num\n        self._append(FIELD_INT)  # session_id\n        self._append(FIELD_INT)  # cluster_num\n", "answers": ["        self._append(( FIELD_BYTE, DB_CLOSE_OP ))"], "all_classes": null, "length": 2765}
{"pred": "\t\t\t\tintegrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t} catch (AbortCheckException e) {\n\t\t\tprint(e.getMessage());\n\t\t} catch (IOException e) {\n\t\t\tprint(", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 373}
{"pred": " private static final String SERVER_URI = \"http://localhost:8080/sherpa\";\n  private static final String SERVER_URI_WITH_PORT = \"http://localhost:8080808080808080808", "answers": ["  public Solutions helpExecuteQuery(DummySherpaServer server, int batchSize) {"], "all_classes": null, "length": 6650}
{"pred": " private final ListenNowStationDeserializer listenNowStationDeserializer = new ListenNowStationDeserializer();\n  private final ModelPostProcessor modelPostProcessor = new ModelPostProcessor();\n  private final ResultDeserializer resultDeserializer = new ResultDeser", "answers": ["  private RequestInterceptor interceptor;"], "all_classes": null, "length": 2251}
{"pred": "\tprivate static Service<Journal> service;\n\tprivate static Service<Journal> service;\n\tprivate static Service<Journal> service;\n\tprivate static Service<Journal> service;\n\tprivate static Service<Journal> service;\n\tprivate static Service<Journal> service", "answers": ["\tprivate static OpenBSDBCryptAuthManager auth;"], "all_classes": null, "length": 5061}
{"pred": "\n  public Tropo() {\n\n    super();\n    setName(\"tropo\");\n  }\n\n  public Tropo(Key... keys) {\n\n    super(keys);\n    setName(\"tropo\");\n  }\n\n  public Tropo(String url", "answers": ["  private ActionSupportHandler<WaitAction>           waitActionSupportHandler        = new ActionSupportHandler<WaitAction>(WaitAction.class);"], "all_classes": null, "length": 3155}
{"pred": "           transition = lambda self, CRRA : CRRAutility(self.cNrm, self.CRRA),\n            control = True\n        ),\n        Frame(\n            ('CRRA'), ('U', 'cNrm'),\n            transition = lambda self, CRRA : CRRAut", "answers": ["            transition = lambda self, cNrm, CRRA : (CRRAutility(cNrm, CRRA),),"], "all_classes": null, "length": 6703}
{"pred": "       context['form'].fields['region'].queryset = self.request.user.perfil.regiones_permitidas.all()\n        return context\n\n    def form_valid(self, form):\n        messages.success(self.request, self.success_message)\n       ", "answers": ["        context['form'].fields['region'].queryset = Region.objects.filter("], "all_classes": null, "length": 1903}
{"pred": "   metrics['Marginals'] = dict()\n    metrics['Marginals']['scale'] = grid['scale']\n    metrics['Marginals']['slope'] = grid['slope']\n    metrics['Marginals']['gamma'] = grid['gamma']\n    metrics['M", "answers": ["    metrics = _extract_metrics_grid(data, options, metrics, posterior, grid)"], "all_classes": null, "length": 6590}
{"pred": "               corpus = Corpus.objects.get(id=options['corpus'])\n            except Corpus.DoesNotExist:\n                raise CommandError(\n                    \"No corpus with ID '{}' in the database\".format(options['corpus'])\n                )\n\n       ", "answers": ["                corpus = Corpus.objects.get(id=options['corpus'])"], "all_classes": null, "length": 3887}
{"pred": "           GCActivity gcActivity) {\n        gcActivity.addListener(this);\n\n        update();\n        int gcTraceNum = datasetGenerator.getGCTraceNum();\n        if (gcTraceNum == 1) {\n            // the main tabbed pane should be", "answers": ["            GCActivity gcActivity) {"], "all_classes": null, "length": 6752}
{"pred": " private static final String DEFAULT_FORMAT = SimpleProgressFormat.DEFAULT;\n\n  private final transient Configuration configuration;\n  private final transient ProgressMonitorListenerFactory delegate;\n  private final transient ProgressMonitorListenerFactory delegateFactory;\n  private final transient ProgressMonitorListenerFactory", "answers": ["  private final transient Map<String, ProgressMonitorListener> cache = new LruCache(getCacheSize());"], "all_classes": null, "length": 948}
{"pred": "       metricsCollector.collect(action);\n      }\n    }\n  }\n\n  public HttpClient httpClient;\n  public HttpClientContext httpClientContext;\n  public HttpClientConfig httpClientConfig;\n  public HttpClientConfig httpClientConfig2;\n  public HttpClientConfig", "answers": ["        MetricsResponseFilter responseFilter = new MetricsResponseFilter();"], "all_classes": null, "length": 1676}
{"pred": "       registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<QueryExp>(QUERY_EXP));\n        registry.put((byte) (QUERY_MBEANS ^ RESPONSE_MASK),", "answers": ["        registry.put((byte) (INVOKE ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(OBJECT));"], "all_classes": null, "length": 786}
{"pred": "   \"\"\"\n    Decodes Z2Pack types from JSON / msgpack - compatible types.\n    \"\"\"\n\n\n@export\n@singledispatch\ndef decode(obj):\n    \"\"\"\n    Decodes Z2Pack types from JSON / msgpack - compatible types.\n    \"\"\"\n   ", "answers": ["@encode.register(VolumeData)"], "all_classes": null, "length": 1781}
{"pred": "       return Optional.of(new AttachedProtectionImpl(protectionBlock.get(), blockFinder, settings));\n\n        return Optional.of(new AttachedProtectionImpl(protectionBlock.get(), blockFinder, settings));\n    }\n\n    @Override\n   ", "answers": ["        return findProtectionForBlock(protectionBlock.get(), SearchMode.NO_SUPPORTING_BLOCKS);"], "all_classes": null, "length": 4375}
{"pred": "   def move(self, location: Location) -> None:\n        if location == self.location:\n            return\n        self.location = location\n        self.notify_player_arrived(self, self.location)\n        self.notify_player_arrived(self,", "answers": ["    def do_purr(self, ctx: Context) -> None:"], "all_classes": null, "length": 7039}
{"pred": "       json_file = 'manualReduction_{:s}.json'.format(state_date_str)\n\n        # Save the JSON file\n        with open(json_file, 'w') as f:\n            json.dump(json_dict, fp, indent=4)", "answers": ["        json_file_name = jd2Date(jdt_ref, dt_obj=True).strftime('%Y%m%d_%H%M%S.%f') + '_' \\"], "all_classes": null, "length": 2996}
{"pred": "       output = await DecryptRSA_PKCS1_v1_5(vault, bundle).read()\nNext line of code:\n        assert output == b'ab' * i\nNext line of code:\n        assert output == b'ab' * i\nNext line of code", "answers": ["        pipe = Once(input) \\"], "all_classes": null, "length": 951}
{"pred": "\t\t\telse {\n\t\t\t\theaderStr = args.get(0);\n\t\t\t\trefit_freq = Integer.parseInt(args.get(1));\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t", "answers": ["\t\theaderStr = Utility.readStringFromFile(args.get(0));"], "all_classes": null, "length": 6740}
{"pred": "           self.assertFalse(pid_exists(process.pid, wait=library.INFINITE))\n\n\nclass TestCreateProcess(TestCase):\n    \"\"\"\n    Tests for :func:`pywincffi.kernel32.CreateProcess`\n    \"\"\"\n    def test", "answers": ["            with self.assertRaises(PyWinCFFINotImplementedError):"], "all_classes": null, "length": 4853}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate SubmissionList submissionList;\n\t@Resource\n\tprivate SubmissionController submissionController;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate ChallengeController challengeController;\n\t@Resource\n\t", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6828}
{"pred": "       return fp.digest()\n\n    def __bytearray__(self):\n        return self.keymaterial.__bytearray__()\n\n    def __len__(self):\n        return self.keymaterial.__len__()\n\n    def __int_to_bytes(self", "answers": ["        return Fingerprint(fp.hexdigest().upper())"], "all_classes": null, "length": 4607}
{"pred": "\t\t\t\tself['l_parent_due'].SetLabel(parent.due)\n\t\t\telif parent.type == enums.TYPE_CHECKLIST:\n\t\t\t\tself['l_parent_due'].SetLabel(parent.due)\n\t\t\t\t\t\t", "answers": ["\t\t\t\tself['l_parent_due'].SetLabel(fmt.format_timestamp("], "all_classes": null, "length": 2433}
{"pred": "   return ConditionRenderer(engine)\n\n\n@pytest.fixture\ndef condition_renderer(engine):\n    return ConditionRenderer(engine)\n\n\n@pytest.fixture\ndef condition(engine):\n    return Condition(engine)\n\n\n\n@py", "answers": ["    return ConditionRenderer(engine)"], "all_classes": null, "length": 3382}
{"pred": "               myProfile = FriendAPI.fetchFriendProfile(username);\r\n                friendProfile = FriendAPI.fetchFriendProfile(username);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return null;\r\n            }\r\n            @Override\r\n            protected", "answers": ["                    myProfile = FriendAPI.fetchFriendProfile(Declaration.configuration.getUsername());\r"], "all_classes": null, "length": 3536}
{"pred": "       facebookProvider.setDefaultPermission();\n\n        //setting permissions required by google to get specific data\n        facebookProvider.setDefaultPermission();\n\n        //setting permissions required by email to get specific data\n        emailSignupProvider.setDefaultPermission();\n\n        //setting permissions required by email to", "answers": ["        permissionList.add(FacebookConfig.PUBLIC_PROFILE);"], "all_classes": null, "length": 2930}
{"pred": "       AlarmClock alarmClock = alarmClockRepository.findOne(alarmClockId);\n        if (null == alarmClock) {\n            throw new NotFoundMyLazyClockException();\n        }\n        List<Calendar> calendars = alarmClock.", "answers": ["        AlarmClock alarmClock = AlarmClockRepository.getInstance().findOne(Long.decode(alarmClockId));"], "all_classes": null, "length": 2574}
{"pred": "   private final static Map<String, Channel> CHANNELS = Maps.newHashMap();\n\n    private final static Map<String, Channel> CHANNELS = Maps.newHashMap();\n\n    private final static Map<String, Channel> CHANNELS = Maps.", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 4296}
{"pred": "\t * \n\t * @return VideoList object.\n\t */\n\tpublic VideoList getVideoList() {\n\t\treturn getJson(VideoList.class, \"/getvideolist\", MapUtil.createMap(\"access_token\", cache.getAccessToken()));\n\t}\n", "answers": ["\tpublic ImageList materialImageList(int offset, int count) {"], "all_classes": null, "length": 1310}
{"pred": "   WatchlistComponent plus(WatchlistModule watchlistModule);\n    ActorInfoComponent plusActorInfoComponent();\n    ActorMoviesComponent plusActorMoviesComponent();\n    ActorDetailsComponent plusActorDetailsComponent();\n}\n\n\n\n\n\n\n\n\n", "answers": ["    WatchlistComponent plus(WatchlistModule watchlistModule);"], "all_classes": null, "length": 1459}
{"pred": "   assert ex.value.message == \"Parameter 'show_config_dialog' must be a boolean\"\n\n\ndef test_show_config_dialog_bool(echo):\n    echo.show_config_dialog_bool = True\n    echo.show_config_dialog()\n    assert", "answers": ["        assert ex.result is RESULT.UNSUPPORTED"], "all_classes": null, "length": 2276}
{"pred": "       self._buffers = KytosBuffers(self._loop)\n        #: KytosConfig: KytosConfig object with Controller config\n        self._config = Kytos_config = Kytos_config = KytosConfig(options)\n        #: K", "answers": ["        self.buffers = KytosBuffers(loop=self._loop)"], "all_classes": null, "length": 12161}
{"pred": "\t\t// builderTypeBuilder.addModifiers(Modifier.PUBLIC, Modifier.STATIC);\n\t\t// builderTypeBuilder.addSuperinterface(bundleTypeName);\n\t\t// builderTypeBuilder.addModifiers(Modifier.PUBLIC, Modifier.STATIC", "answers": ["\t\tPredicate<FieldModel> modelPredicate = fm -> fm.annotation(Arg.class).isPresent()"], "all_classes": null, "length": 1424}
{"pred": "       self.config.container.setup()\n\n    def run_app(self):\n        if self.config.desktop_skip_build or self.custom_mode:\n            self.config.container.pull_files(self.config.app_dir, self.config.app_", "answers": ["        if is_command('xhost'):"], "all_classes": null, "length": 2731}
{"pred": "       data_array = cast(c_double * total_count, POINTER(c_double))\n        data_array[0] = 0.0\n        data_array[1] = 0.0\n        data_array = cast(c_double * 10", "answers": ["        scan_options = ScanOptions.FOREGROUND | ScanOptions.SCALEDATA"], "all_classes": null, "length": 4461}
{"pred": "\tpublic static Form form(Attribute... attributes) {\n\t\treturn new Form(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes", "answers": ["\tpublic static Frame frame(Attribute... attributes) {"], "all_classes": null, "length": 2934}
{"pred": "   calstars_list = CALSTARS.loadCALSTARS(os.path.join(dir_path, calstars_file))\n\n\n    # Get the catalog of stars\n    star_dict = StarCatalog.loadStarCatalog(os.path", "answers": ["    calstars_list = CALSTARS.readCALSTARS(dir_path, calstars_file)"], "all_classes": null, "length": 17270}
{"pred": " @Override\n  public void execute(MutableConfig config, WatcherRegistry watcherRegistry) {\n    var packagerConf = config.getOrUpdate(name(), PackagerConf.class);\n    var moduleSourcePath = packagerConf.moduleSourcePath();\n    var moduleTestPath =", "answers": ["  public void watch(Config config, WatcherRegistry registry) {"], "all_classes": null, "length": 2878}
{"pred": "   elif all(isinstance(x, (int, Decimal)) for x in operands):\n        pass\nNext line of code:\n    elif all(isinstance(x, (int, Decimal)) for x in operands):\n        pass\nNext line of code:\n    elif", "answers": ["    elif all(isinstance(x, (str, UntypedAtomic, AnyURI)) for x in operands):"], "all_classes": null, "length": 8995}
{"pred": "\t\t#############################\n\t\t###### FWER CORRECTION ######\n\t\t#############################\n\t\t#############################\n\t\t###### FWER CORRECTION ######\n\t\t##############################\n\t\t#############################\n\t", "answers": ["\t\t_, image_array, masking_array, maskname, affine_array, vertex_array, face_array, surfname, adjacency_array, tmi_history, columnids = read_tm_filetype('%s' % opts.tmifile[0], verbose=False)"], "all_classes": null, "length": 2236}
{"pred": "   return self.__parser.parse(ping_text)\n\n    def __parse_icmp_reply(self, ping_lines: Sequence[str]) -> IcmpReplies:\n        icmp_reply_regexp = re.compile(self.__parser_name)\n", "answers": ["        logger.debug(f\"parsing ping result: {ping_text}\")"], "all_classes": null, "length": 3482}
{"pred": "           logger.error(msgfy.to_error_message(e))\n            sys.exit(errno.EINVAL)\n\n        return 0\n\n    def __create_tc(self, device):\n        tc = Tc(device=device)\n        t", "answers": ["            logger.error(IPV6_OPTION_ERROR_MSG_FORMAT.format(e))"], "all_classes": null, "length": 4797}
{"pred": "           embed=Embeds.make_embed(fields=fields, title=title, icon=Icons.RAID_BOSS))\n\n\n    @cmd_raid_boss.command(pass_context=True, category='Bot Info', aliases=['add', 'add", "answers": ["            embed=Embeds.make_embed(header=f\"Current Raid Bosses {title}\", header_icon=Icons.raid_report, fields=fields,"], "all_classes": null, "length": 5526}
{"pred": "   STRIP_DEBUG(action(\"--strip-debug\", Jlink::stripDebug)),\n    STRIP_NATIVE_COMMANDS(action(\"--strip-native-commands\", Jlink::stripNativeCommands)),\n    INCLUDE_SYSTEM_J", "answers": ["    STRIP_DEBUG(exists(\"--strip-debug\", Jlink::stripDebug)),"], "all_classes": null, "length": 4905}
{"pred": "\t\tprogressTitle = title;\n\t}\n\n\tpublic void setProgress(float progress) {\n\t\tthis.progress = progress;\n\t}\n\n\tpublic void setMenu(Menu menu) {\n\t\t\t\n\t}\n\n\tpublic void setMenu(Menu menu)", "answers": ["\t\t((ProgressMenu) menu).setProgressTitle(title);"], "all_classes": null, "length": 5267}
{"pred": "\tprivate Callback<Button, Button> optionButtonColumnCellFactory = new Callback<Button, Button>() {\n\t\t\n\t\t@Override\n\t\tpublic Button call(Button param) {\n\t\t\tButton button = new Button();\n\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate static class ResultCallback implements io.uploader.drive.util.Callback<DriveOperations.OperationResult> {"], "all_classes": null, "length": 2246}
{"pred": "       EditorScene scene = new EditorScene(context, descriptor);\n        return scene;\n    }\n\n    /**\n     * Loads a scene.\n     *\n     * This does not open the scene.\n     *\n     *\n     *\n     *\n     *\n    ", "answers": ["        EditorScene scene = DescriptorConverter.convert(descriptor, context.assetManager.getAssetMap());"], "all_classes": null, "length": 9274}
{"pred": "       return issubclass(subclass, Decimal)\n\n    @classmethod\n    def validate(cls, value: object) -> None:\n        if isinstance(value, cls):\n            return\n        elif isinstance(value, str):\n            value = collapse_white_", "answers": ["        return issubclass(subclass, (int, Decimal, Integer)) and not issubclass(subclass, bool)"], "all_classes": null, "length": 3837}
{"pred": "                           ActionItem item = new ActionItem(ratios[finalI], new ActionItem.OnClickListener() {\n                                @Override\n                                public void onClick(View v, int position) {\n                                    imageCropper.setAspectRatio(position);\n                                   ", "answers": ["                            items.add(new UIAlertAction(null, ratios[i], new ActionItemClickListener() {"], "all_classes": null, "length": 22242}
{"pred": "       registerAdvanced(CRATER, new TileCrater());\n        \n        CHEST_IRON = new AdvancedBlock(new TileChestIron()).setUnlocalizedName(QuantumStorage.MOD_ID + \".chest_iron\");\n        registerAd", "answers": ["        CHEST_IRON = new AdvancedBlock(new TileChestIron()).setUnlocalizedName(QuantumStorage.MOD_ID + \".chest_iron\");"], "all_classes": null, "length": 5395}
{"pred": "       objs = self.get_created_ltm_objects(ltm_service_manager, HTTPMonitor)\n        assert 1 == len(objs)\n        assert objs[0].name == 'http_monitor'\n        assert objs[0].data['metadata", "answers": ["        objs = self.get_created_ltm_objects(ltm_service_manager, HTTPMonitor)"], "all_classes": null, "length": 6175}
{"pred": "\n\ndef get_key_schedule(key_length):\n    \"\"\"Return the key schedule for the given key length.\"\"\"\n    assert key_length >= 128\n    assert key_length <= 256\n    assert key_length % 32 == 0\n", "answers": ["class Shacal1KeySchedule(KeySchedule):"], "all_classes": null, "length": 2972}
{"pred": "       elif t['type'] == LONG:\n            _content = struct.pack(\"!q\", v)\n        elif t['type'] == BYTE:\n            _content = struct.pack(\"!b\", v)\n        elif t['type'] == BYTES:\n            _", "answers": ["        elif t['type'] == LONG:"], "all_classes": null, "length": 1790}
{"pred": "           move(srcPath,\n                location(\"target/image/plugins/\" + name + \"/deps\")));\n  }\n\n  private static void run(String... args) {\n    var args = Arrays.asList(args);\n    var command = new Pro.Command(args", "answers": ["                walkAndFindCounterpart("], "all_classes": null, "length": 4447}
{"pred": "       self.parser.next_token.bind_namespace(namespace)\n    except ElementPathKeyError:\n        self.parser.advance()  # Assure there isn't a following incomplete comment\n        self[:] = self.parser.token\n        self.value = namespace\n       ", "answers": ["        AnyURI(namespace)"], "all_classes": null, "length": 6092}
{"pred": "       return ret\n    except Exception:\n        return unit1 * unit2\n\n\n@lru_cache(maxsize=128, typed=False)\ndef _divide_units(unit1, unit2):\n    try:\n        ret = (unit1 / unit", "answers": ["    except SymbolNotFoundError:"], "all_classes": null, "length": 2336}
{"pred": "\t\tBufferedImage javaImage422_444 = getJavaDecodedImage(aSrc, SubsamplingMode._422_444);\n\t\tBufferedImage javaImage4222_4444444444444", "answers": ["\t\tnew JPEGImageIO().setCompressionType(CompressionType.Huffman).setQuality(100).setSubsampling(SubsamplingMode._411).write(aSrc, output1);"], "all_classes": null, "length": 2365}
{"pred": "       environment.lifecycle().manage(new JobsManaged(recurringJob));\n\n        // auth\n        environment.lifecycle().manage(new AuthDynamicFeature(\n                new AuthValueFactoryProvider(\n                        new AuthTokenAuthenticator(financeService.class,\n", "answers": ["        environment.lifecycle().manage(new JobsManaged(recurringJob));"], "all_classes": null, "length": 7593}
{"pred": "\tprivate int time;\n\tprivate int pickup;\n\tprivate Tile tile;\n\tprivate int value;\n\tprivate int xo;\n\tprivate int yo;\n\tprivate int zo;\n\tprivate int xd;\n\tprivate int yd;\n\tprivate int zd;", "answers": ["\tpublic Player(Level level, String par1) {"], "all_classes": null, "length": 1547}
{"pred": "       return Playlist.create(\n            self, title, section=section, items=items, smart=smart, limit=limit,\n            libtype=libtype, sort=sort, filters=filters, **kwargs)\n\n    def createPlaylist(self, title, section=None", "answers": ["        return Playlist.create("], "all_classes": null, "length": 16000}
{"pred": "    * @throws FlowParseException if the action cannot be parsed\n     */\n    public abstract Action.Result execute(Runner runner, RunState run, Input input) throws FlowParseException;\n\n    /**\n     * Returns the JSON representation of this action\n     */\n    public abstract JsonElement", "answers": ["    public abstract Result execute(Runner runner, RunState run, Input input);"], "all_classes": null, "length": 8840}
{"pred": "   assert almost_eq(data, [1, -1] * 30)\n\n  def test_saw_table_with_zero_step(self):\n    data = saw_table(lag2freq(30), step=0).take(30)\n", "answers": ["    for d0, d1 in blocks(data, size=2, hop=1):"], "all_classes": null, "length": 1563}
{"pred": "def view_list_edit(request, group, list, is_admin=False):\n    if not is_admin:\n        raise Http404\n\n    list = List.objects.get(pk=list.pk)\n\n    if not list.public:\n        raise Http", "answers": ["@limit_to_admin"], "all_classes": null, "length": 6686}
{"pred": "       final Request request = newRequest(context.getUrl());\n\n        // Setup request.Next line of code:\n        request.setMethod(HttpMethod.POST);\n\n        // Setup request.Next line of code:\n        request.setEntity(new StringEntity(context.", "answers": ["        final URI uri = Transports.buildNegotiateUri(context);"], "all_classes": null, "length": 3391}
{"pred": "       return BooleanProxy(value)\n    except ValueError as err:\n        raise self.error('FORG0001', err) from None\n    except TypeError as err:\n        raise self.error('XPTY00004', err) from None\n\n\n@", "answers": ["        return BooleanProxy(value)"], "all_classes": null, "length": 5540}
{"pred": "\t\t\t\tConfigurationOption[] options = new ConfigurationOption[1];\n\t\t\t\toptions[0] = new ConfigurationOption(\"remitt\", \"plugin\",\n\t\t\t\t\t\t\"org.remitt.prototype.ConfigurationOption\");\n\t\t\t\t\t\treturn options;\n", "answers": ["\t\treturn Configuration.getConfigValues(userName);"], "all_classes": null, "length": 2996}
{"pred": "             if (i instanceof BlobstoreFileItem) {\n                bfi = (BlobstoreFileItem) i;\n                break;\n              }\n            }\n          }\n          if (bfi == null) {\n            bfi = new BlobstoreFileItem(e.get", "answers": ["              if (i.getFieldName().replaceFirst(\"-\\\\d+$\", \"\").equals(e.getKey().replace(UConsts.MULTI_SUFFIX, \"\"))) {"], "all_classes": null, "length": 1916}
{"pred": "       self.raid_parties = await self._dbi.table('raid_party').query().select().getjson()\n\n\n    @commands.command(aliases=['rp'])\n    async def raid_party(self, ctx, *, party_id):\n        party", "answers": ["        Logger.info(\"load_raid_parties()\")"], "all_classes": null, "length": 2167}
{"pred": "       self.config = config\n        self.message_cache = []\n        self.otagrange = set()\n        self.task = {}\n        self.commands = {}\n        self.adrprocessing = False\n        self.band = None\n        self.band = None\n        self", "answers": ["        log.info(\"Initialising the server\")"], "all_classes": null, "length": 10277}
{"pred": "       super(context, autoInitialize);\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        if (Build.VERSION.SDK_INT >= VERSION_CODES.O_19) {\n            // TODO: remove this when we", "answers": ["        Ohmage.app().getApplicationGraph().inject(this);"], "all_classes": null, "length": 7974}
{"pred": "       if not os.path.exists(directory):\n            os.makedirs(directory)\n        with open(os.path.join(directory, basename + \".meta\"), \"w\", encoding=\"utf8\") as f:\n            f.write(self.meta)\n        with", "answers": ["        acoustic_model = AcousticModel.empty(basename, root_directory=self.working_log_directory)"], "all_classes": null, "length": 7769}
{"pred": "   def get_resource_class(self, resource_name):\n        if resource_name in self._resources_definition:\n            return self._resources_definition[resource_name]\n        else:\n            raise Tuttle.Tuttle.Tuttle.Tuttle.T", "answers": ["        self._processors['csv2sqlite'] = CSV2SQLiteProcessor()"], "all_classes": null, "length": 7215}
{"pred": "\tpublic void setHistory(FoodHistory history)\n\t{\n\t\tthis.history = history;\n\t}\n\n\t@Override\n\tpublic void setHistory(FoodHistory history)\n\t{\n\t\tthis.history = history;\n\t}\n\n\t@Override\n", "answers": ["\tpublic void pack(IByteIO data)"], "all_classes": null, "length": 870}
{"pred": "\nlivingroom.add_exits([door])\n\n\n# define the door\n\ndoor.init()\ndoor.title(\"door\", \"door\")\ndoor.description(\"door\", \"door\")\ndoor.open(actor: Living, item: Item=None) -> None\ndoor", "answers": ["closet.insert(woodenYstick.clone(), None)"], "all_classes": null, "length": 13735}
{"pred": "    * @see ch.dermitza.securenio.packet.worker.AbstractPacketWorker#addPacketListener(PacketListener)\n     */\n    @Override\n    public void addPacketListener(PacketListener listener) {\n        // TODO: addPacket", "answers": ["    public void addListener(PacketListener listener) {"], "all_classes": null, "length": 5457}
{"pred": "       ExpressTemplateBuilder b = new ExpressTemplateBuilder();\n        b.setExpressId(\"xxxx\");\n        b.setExpressName(\"xxxx\");\n        b.setExpressTemplate(\"xxxx\");\n        b.setDeliveryTemplate(new DeliveryTemplate());\n        b.setExpressTemplate(new", "answers": ["        ExpressTemplate expressTemplate = ExpressTemplateBuilderTest.build().build(RequriedType.ADD);"], "all_classes": null, "length": 13428}
{"pred": "   return f'{path}{suffix}'\n\n###\n# Functions and operators on nodes\n@method(function('path', nargs=(0, 1), sequence_types=('node()?', 'xs:string?'))\n    )\ndef evaluate_path_function", "answers": ["    for e, path in etree_iter_paths(root, path):"], "all_classes": null, "length": 13429}
{"pred": "\n    def _get_params(self, endog, exog, start=None, transform=None,\n                    **kwargs):\n\n    def _get_params(self, endog, exog, start=None, transform=None, **kwargs):\n\n    def _get", "answers": ["class VARMAXResultsWrapper(MLEResultsWrapper):"], "all_classes": null, "length": 28754}
{"pred": "               print(data)\n\n            for track in ff['tracks']:\n                data[track['type']][track['id']] = track\n\n            for track in ff['tracks']:\n                if track['type'] == 'video':\n                    data['video'][", "answers": ["                return json.dumps(ff, cls=get_json_encoder(context), indent=4, ensure_ascii=False)"], "all_classes": null, "length": 3435}
{"predanswers": ["                              '<B2 /><B3>simple text</B3></A>' % XSI_NAMESPACE)"], "all_classes": null, "length": 3430}
{"pred": "\t\t\t\t// VersionRepository versionRepository = VersionRepository.getInstance();\n\t\t\t\t// get the version of the data\n\t\t\t\tVersion version = client.getVersion(context);\n\n\t\t\t\t// check if the version of the data is newer than the version\n\t\t", "answers": ["\t\t\t\tVersionRepository versionRepostiroy = VersionRepository.getInstance();"], "all_classes": null, "length": 1906}
{"pred": "   from arxpy.bitvector.operation import RotateLeft\n\n    from arxpy.bitvector.operation import RotateLeft\n\n    from arxpy.bitvector.operation import RotateLeft\n\n    from arxpy.bitvector.operation import RotateLeft\n   ", "answers": ["class Multi2Encryption(Encryption):"], "all_classes": null, "length": 6709}
{"pred": "               self.map_last_to_IE(ID)\n            elif self[-1].T() == IEType['Mobile Country Code']:\n                self.map_last_to_IE(MCC)\n            elif self[-1].T() == IEType['Mobile Network Code']:", "answers": ["                self.map_last_to_IE(ID)"], "all_classes": null, "length": 15325}
{"pred": "public class FavoritesFragment extends PagingListFragment<FavoritesResult, BookmarkShort> {\n\n    @Pref\n    private YarrnPrefs_ prefs;\n\n    @SystemService\n    private IRavelryActivity activity;\n\n    @ViewById\n    private ListView", "answers": ["public class FavoritesFragment extends PagingListFragment<FavoritesResult, BookmarkShort> {"], "all_classes": null, "length": 1851}
{"pred": "\t\tpublic Boolean visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Collection<String> param) {\n\t\t\treturn true;\n\t\t}\n\n\t\t@Override\n\t\tpublic Boolean visit(AlvisIRQueryNode queryNode, Collection<String> param", "answers": ["\t\tpublic Boolean visit(AlvisIRRelationQueryNode relationQueryNode, Collection<String> param) {"], "all_classes": null, "length": 2652}
{"pred": "   def _load_header(self, fileobj):\n        self._header = MakeID3v1(fileobj)\n\nNext line of code:\n    def _load_header_v2(self, fileobj):\n        self._header = MakeID3v1(fileobj", "answers": ["    @convert_error(IOError, error)"], "all_classes": null, "length": 2055}
{"pred": "           post_list = post_list.filter(user=request.user)\n\n        context = {\n            'post_list': post_list,\n            'sort_by': sort_by,\n        }\n        return render(request, self.template_name, context)\n", "answers": ["            user_votes = VotePost.objects.filter(user=request.user)"], "all_classes": null, "length": 1736}
{"pred": "           // 执行查询\n            // 执行查询\n            // 执行查询\n            // 执行查询\n            // 执行查询\n            // �", "answers": ["            BackendConnection backCon = MockMySQLServer.mockDBNodes.get(MockMySQLServer.MOCK_HOSTNAME)"], "all_classes": null, "length": 16980}
{"pred": " protected boolean isInBackground = false;\n  protected boolean isInForeground = false;\n  protected boolean isInBackground = false;\n  protected boolean isInForeground = false;\n  protected boolean isInBackground = false;\n  protected boolean isInForeground = false;\n ", "answers": ["  protected SharedPreferenceSaver sharedPreferenceSaver;"], "all_classes": null, "length": 4900}
{"pred": "       seqi[seq_id] = -1\n        logger.info(\"Assigned lengths of -1 to all problematic sequences\")\n    logger.info(\"Reading assembly points\")\n    assembly_points_by_sources = camsa_io.read_assembly_points_from", "answers": ["                    seqi[seq_id] = Sequence(name=seq_id, length=-1)"], "all_classes": null, "length": 3969}
{"pred": "   def __getitem__(self, key):\n        return self.data[self.keys.index(key)]\n\n    def __setitem__(self, key, value):\n        self.data[self.keys.index(key)] = value\n\n    def __delitem__(self", "answers": ["    def add_column(self, k, v, dtype=None, index=None, align='top'):"], "all_classes": null, "length": 2960}
{"pred": "\t\t\t\t}\n\t\t\t} else if (tmpSelection instanceof IFileEditorInput) {\n\t\t\t\tIFile ifile = fileEditorInputTmp.getFile();\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tHashMap<MethodRef, IMethod> existingMethods = methodSelection"], "all_classes": null, "length": 7706}
{"pred": "   return (discard_message, discard_message.Encode(), discard_message.Encode())\n\n  def _SendDiscardMessage(self, tag):\n    \"\"\"Constructs and sends a Tdiscarded message.\"\"\"\n    self._log.debug('Sending", "answers": ["    buf = BytesIO()"], "all_classes": null, "length": 1385}
{"pred": "   task_cancelable = DataElementField(type='jn', required=False, _d=\"Auftrag löschbar\")\n    task_changeable = DataElementField(type='jn', required=False, _d=\"Auftrag änderbar\")\n\n\nclass", "answers": ["    sepa_c_code = CodeField(enum=SEPACCode1, _d=\"SEPA-C-Code\")"], "all_classes": null, "length": 1051}
{"pred": "\t\tgrainTypes.add(MultiGrain.class);\r\n\t\tgrainTypes.add(MultiPort.class);\r\n\t\tgrainTypes.add(Square.class);\r\n\t}\r\n\t\r\n\tprivate List<Class<? extends Grain> grainTypes = new", "answers": ["\t\tgrainTypes.add(MultiPort.class);\r"], "all_classes": null, "length": 2837}
{"pred": "               final List<T> results = new ArrayList<>(splitScanners.length);\n                for (ResultScanner scanner : splitScanners) {\n                    try {\n                        T t = action.extractData(scanner);\n                        results.add(t);\n", "answers": ["                final ResultScanner scanner = new DistributedScanner(rowKeyDistributor,"], "all_classes": null, "length": 3527}
{"pred": "\t\t\t\t.registerTypeAdapter(BrewerySearchResult.class, new BrewerySearchResultDeserializer())\n\t\t\t\t.registerTypeAdapter(BreweryDetails.class, new BreweryDetailsDeserializer())\n\t\t\t\t\t.registerType", "answers": ["\t\t\t\t.registerTypeAdapter(BeerRating.class, new BeerRatingDeserializer())"], "all_classes": null, "length": 1466}
{"pred": "       self.assertEqual(msg.uuid, self.message.uuid)\n        self.assertEqual(msg.key, self.message.key)\n        self.assertEqual(msg.value, self.message.value)\n        self.assertEqual(msg.timestamp, self.message", "answers": ["        self.assertIsInstance(msg, Store)"], "all_classes": null, "length": 16690}
{"pred": "   return 1\n\ndef t2():\nNext line of code:\n    return 2\n\ndef t3():\nNext line of code:\n    return 3\n\ndef t4():\nNext line of code:\n    return 4\n\ndef t5():\nNext line", "answers": ["    Int._endian = 'big'"], "all_classes": null, "length": 22563}
{"pred": "       new SignResponse(UserPresenceVerifier.USER_PRESENT_FLAG, COUNTER_VALUE, SIGNATURE_AUTHENTICATE), 0L))\n        .thenReturn(new SecurityKeyData(KEY_HANDLE, USER_PUBLIC_", "answers": ["        new SignResponse(KEY_HANDLE_BASE64, SIGN_RESPONSE_DATA_BASE64, BROWSER_DATA_SIGN_BASE64, SESSION_ID)))"], "all_classes": null, "length": 2733}
{"pred": "       return output.value\n\n    @output.setter\n    def output(self, output):\n        output = prepare_int(output)\n        ckresult(_dll.FMOD_System_SetOutput(self._ptr, output))\n\n    @property\n    def output", "answers": ["        return OUTPUTTYPE(output.value)"], "all_classes": null, "length": 3419}
{"pred": "   u1.get_conversion_factor(Unit(\"m\"))\n\n    with pytest.raises(UnitConversionError):\n        u1.get_conversion_factor(Unit(\"degF\"))\n\n    with pytest.raises(UnitConversionError):\n       ", "answers": ["    reg = UnitRegistry(unit_system=cgs_unit_system)"], "all_classes": null, "length": 2485}
{"pred": "   train_set, valid_set, test_set = load_mnist(dataset)\n\n    #################################################################\n    # Create a GPS imputer and train it on the training data. #\n    #####################################################################\n    gps_imput", "answers": ["    datasets = load_udm(dataset, as_shared=False, zero_mean=False)"], "all_classes": null, "length": 11203}
{"pred": "  * f1 -> CheckNextSearch() f2 -> ( CurrentSearch() )?\n   */\r\n  public Query visit(CheckNextSearch n, Query query) {\r\n    n.f0.accept(this, query);\r\n\r\n    return null;\r\n  }\r\n\r\n  /**", "answers": ["  private void visitBooleanOp(VisitOp op, Occur occur) {\r"], "all_classes": null, "length": 4809}
{"pred": " public Board(BaseFSM fsm) {\n    this.fsm = fsm;\n    pos = new Vector2[6];\n    checkers = new Checker[6][6];\n    points = new Points();\n    dices = new Dices();\n    available", "answers": ["  public JSONProperties jp;"], "all_classes": null, "length": 12255}
{"pred": "\t\t\txstream.alias(\"acquisitionImage\", AcquisitionImage.class);\n\t\t\txstream.alias(\"activeConnection\", ActiveConnection.class);\n\t\t\txstream.alias(\"application\", Application.class);\n\t\t\t\txstream.alias(\"driver\", Driver.", "answers": ["\t\txstream.alias(\"CaseLog\", CaseLogModule.class);"], "all_classes": null, "length": 1920}
{"pred": "   class _SM1(StateMachine):\n        @state(first=True)\n        def the_state(self):\n            pass\n\n    with pytest.raises(RuntimeError) as exc_info:\n        _SM1()\n    assert isinstance(exc_info", "answers": ["    with pytest.raises(InvalidStateName):"], "all_classes": null, "length": 1771}
{"pred": "           @Override\n            public void onTimeout(final FiComRequest req) {\n                System.out.println(\"Got a timeout\");\n            }\n        };\n        \n        // Send the request\n        Fi.laverca.ficom.Request request = new Fi.", "answers": ["            public void onOutstandingProgress(final FiComRequest req, final ProgressUpdate update) {"], "all_classes": null, "length": 13791}
{"pred": " public void visit(final DeleteQuery deleteQuery) throws QueryException {\n    for (final SetClause clause : deleteQuery.getSetClauses())\n      clause.accept(this);\n    final Exp whereClause = deleteQuery.getWhereClause();\n    if (whereClause", "answers": ["  public void visit(final InsertQuery insertQuery) throws QueryException {"], "all_classes": null, "length": 1912}
{"pred": "       Product p = ProductBuilderTest.build();\n        p.setId(\"xxxxxxxxxxxx\");\n        p.setName(\"xxxxxxxxxxxx\");\n        p.setStatus(ProductStatus.OnSale);\n        p.setPrice(100);\n        p.setStock", "answers": ["        ProductBuilder p = new ProductBuilder();"], "all_classes": null, "length": 15369}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE_SIGN,\n", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 4601}
{"pred": "\t\t\tUserGrantPermItem item = new UserGrantPermItem();\n\t\t\titem.setAppId(e.getAppId());\n\t\t\titem.setOperate(e.getOperate());\n\t\t\t\treturn item;\n\t\t\t}).collect(", "answers": ["\t\t\tString operate = userId.equals(e.getOwnerId()) ? GrantOperate.RW.name() : null;"], "all_classes": null, "length": 939}
{"pred": "   private TILuxometerTranslator luxTranslator = new TILuxometerTranslator();\n    private TIGyroscopeTranslator gyroTranslator = new TIGyroscopeTranslator();\n    private TIMagnetometerTranslator magTranslator", "answers": ["    private TIGyroscopeTranslator gyroTranslator = new TIGyroscopeTranslator();"], "all_classes": null, "length": 882}
{"pred": "\t\tPostProcessor[] postProcessors = setPostProcessors(pipeline.getPostProcessing());\n\t\treturn new GenerationService(preprocessors, generator, postProcessors);\n\t}\n\n\tprivate PreProcessor[] setPreProcessors(PreProcessing preProcessing, InFormat", "answers": ["\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());"], "all_classes": null, "length": 2487}
{"pred": "       ang_separation = angularSeparation(self.normal_ra, self.normal_dec, ra, dec)\n\n        return ang_separation\n\n\n    def getGCPhase(self, ra, dec):\n        \"\"\" Get the phase of the great circle that is closest", "answers": ["        ang_separation = np.degrees(abs(np.pi/2 - angularSeparation(np.radians(ra), \\"], "all_classes": null, "length": 2676}
{"pred": "       mFloatingActionButton.setBackgroundTint(color);\n    }\n\n    @Override\n    public void setFabButtonColor(int color, int colorPrimary) {Next line of code:\n        mFloatingActionButton.setBackgroundTint(color);\n       ", "answers": ["        MDTintUtil.setTint(mFloatingActionButton, color);"], "all_classes": null, "length": 5346}
{"pred": "\t\t\t\t// eventBus.registerHandler(addressPojo, null, (error, in) -> { // onmessage\r\n\t\t\t\t// \tmessages.li(null, in.get(\"body\").asString());\r\n\t\t\t\t\t// });\r\n\t\t\t", "answers": ["\t\t\t\tPojofy.eventbusReceive(eventBus, addressPojo, null, AllExamplesClient.dto,\r"], "all_classes": null, "length": 1093}
{"pred": "       self.assertEqual(AnyURI(None), AnyURI(None))\n        self.assertNotEqual(AnyURI(None), AnyURI('http://example.com'))\n        self.assertNotEqual(AnyURI(None), AnyURI(None))\n\n        self.assertNotEqual", "answers": ["        uri = AnyURI('http://xpath.test')"], "all_classes": null, "length": 13145}
{"pred": "\t\t\telse:\n\t\t\t\tG=GenotypeHDF5(args.study_name[0],reader=R)\n\n\t\t\tif args.mapper_chunk is not None:\n\t\t\t\tG.mapper_chunk(G,args.", "answers": ["\t\t\t\tG.split_size=CONVERTER_SPLIT_SIZE"], "all_classes": null, "length": 1536}
{"pred": "       when(logMock.isDebugEnabled()).thenReturn(true);\n        when(logMock.isWarnEnabled()).thenReturn(true);\n        when(logMock.isErrorEnabled()).thenReturn(true);\n        when(logMock.isTraceEnabled()).thenReturn(true);", "answers": ["        when(jobMock.validate()).thenReturn(new ValidationErrors());"], "all_classes": null, "length": 2804}
{"pred": "                                      join_keyword=u'\\u0930\\u0935')\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up +", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 5573}
{"pred": "           (r'/problem\\/{0,1}', ProblemHandler),\n            (r'/status\\/{0,1}', StatusHandler),\n            (r'/redirector\\/{0,1}', RedirectorHandler),\n            (r'/problemlist\\/{0", "answers": ["            (r'/problem/(\\w+)/(\\w+)', ProblemHandler),"], "all_classes": null, "length": 8523}
{"pred": "   @TestCase(class1 = TestObjectGeneric.class, class2 = ObjectSpecimen.class)\n    @TestCase(class1 = IContract.class, class2 = InterfaceSpecimen.class)\n    @TestCase(class1 = ZonedDateTime.class, class2 =", "answers": ["    @TestCase(class1 = IContract.class, class2 = InterfaceSpecimen.class)"], "all_classes": null, "length": 3168}
{"pred": "   \"\"\"\n    pass\n\n\n@command(ProjectInfo, False)\ndef project_info(command_options, args):\n    \"\"\"\n    Usage: zanata project info [OPTIONS]\n\n    Displays project information\n\n    \"\"\"\n    pass\n\n\n@command", "answers": ["@command(ZanataInit, False, 'init')"], "all_classes": null, "length": 8471}
{"pred": "           ExportComptaCotisationsModifications(inscrits, periode, self.export_compta_choice).ShowModal()\n\n    def OnExportComptaReglements(self, _):\n        inscrits, periode = self.__GetSelection()\n        if", "answers": ["            DocumentDialog(self, ExportComptaCotisationsModifications(inscrits, periode)).ShowModal()"], "all_classes": null, "length": 15390}
{"pred": "       self.assertEqual(assign_preg_signup(row=row, headers=headers), True)\n        headers_mock.return_value = \"False\"\n        self.assertEqual(assign_preg_signup(row=row, headers=headers), False)\n       ", "answers": ["        self.assertTrue(assign_preg_signup(row=row, headers=headers))"], "all_classes": null, "length": 2863}
{"pred": "               return new BtnStartCommand();\n            case ConstantStr.FUNC_NAV_HIDE_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_NAV_HIDE_CODE:\n                return new BtnScreenOff();\n           ", "answers": ["                return new BtnStartCommand(sc.getShellStr());"], "all_classes": null, "length": 4830}
{"pred": "   @scoped_subgraph\n    def decoder_frequency(self) -> StandardRNN:\n        \"\"\"\n        Creates the frequency decoder RNN.\n        \n        The frequency decoder RNN receives the final hidden states of the time decoder at each time step of a sequence", "answers": ["    def decoder_time(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 5627}
{"pred": "   self.node = Node(self.public_key, self.private_key, self.event_loop,\n                      self.connector, self.reply_port)\n\n    def tearDown(self):\n        \"\"\"\n        A whole bunch of generic stuff we regularly need", "answers": ["        self.seal = get_seal(signed_item, PRIVATE_KEY)"], "all_classes": null, "length": 15023}
{"pred": "   if encoding and not in_py2:\n        args = (encoding,)\n    else:\n        args = ()\n\n    # We would like to return string literals\n    if not in_py2:\n        valtype = lambda x: converter(x, *args).decode", "answers": ["    if isinstance(encoding, compat.string_types):"], "all_classes": null, "length": 2171}
{"pred": "   p_xip1_given_zi = InfNet(rng=rng, Xd=x_in_sym, \\\n            params=params, shared_param_dicts=None)\n    p_xip1_given_zi = p_xip1", "answers": ["    p_xip1_given_zi = HydraNet(rng=rng, Xd=x_in_sym, \\"], "all_classes": null, "length": 4256}
{"pred": "   def read_data_element(tag, VR, length, defer_size=None, encoding=default_encoding):\n        \"\"\"Read a DICOM data element from a file-like object.\n\n        Parameters\n        - tag : str\n            The tag\n        - V", "answers": ["    debugging = config.debugging"], "all_classes": null, "length": 3641}
{"pred": "                   mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n            }\n            mushroom.textureName = mushroom.text", "answers": ["                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 28701}
{"pred": "       return round(item, precision)\n    except (TypeError, ValueError):\n        pass\n\n\n@method(function('round-half-to-even', nargs=(1, 2),\n                 sequence_types=('numeric?', 'xs:integer', 'numeric?')))", "answers": ["        elif isinstance(item, Float10):"], "all_classes": null, "length": 8534}
{"pred": "                   node = parse(tokenize(source))\n            except NoParseError as e:\n                with errors.module_ctx(name):\n                    raise ParseError('{}; unexpected token \"{}\"'\n                                     .format(e.msg, e.token))\n            except Parse", "answers": ["                    node = parse(list(tokenize(source.content, errors)), errors)"], "all_classes": null, "length": 2031}
{"pred": "           bgp_session = BGPSession(jsoned, self)\n            bgp_sessions.append(bgp_session)\n        return bgp_sessions\n\n    def get_bgp_sessions(self, device_id):\n        data = self.call", "answers": ["            bpg_session = BGPSession(jsoned)"], "all_classes": null, "length": 4363}
{"pred": "   List<CreditCardBackground> creditCardBackgrounds;\n    List<CreditCard> creditCards;\n    CreditCard mCurrent;\n    int mPosition;\n    SelectableCreditCardViewHolder mViewHolder;\n    private EditText alias;\n    private EditText cardNumber", "answers": ["    List<CreditCard> mCreditCardList;"], "all_classes": null, "length": 2636}
{"pred": "   def _handle_imported_df_model(self, path):\n        self.tree_view.refresh_tree()\n        self.tree_view.refresh_tree()\n        self.tree_view.refresh_tree()\n        self.refresh_tree()\n        self.", "answers": ["    def tree_view(self) -> QtGui.QTreeView:"], "all_classes": null, "length": 11244}
{"pred": "           generate_pronunciations_func(jobs, self.working_log_directory)\n        for j in jobs:\n            j.export_lexicon(output_directory)\n\n    def generate_pronunciations(self) -> None:\n        \"\"\"\n        Generate", "answers": ["            run_non_mp(generate_pronunciations_func, jobs, self.working_log_directory)"], "all_classes": null, "length": 3088}
{"pred": "       left_menu_rv.setFocusable(true);\n        left_menu_rv.setFocusableInTouchMode(true);\n        left_menu_rv.setOnItemClickListener(this);\n        List<Movie> list = new ArrayList<Movie>();\n        for (int i", "answers": ["        GeneralAdapter generalAdapter = new GeneralAdapter(new LeftMenuPresenter());"], "all_classes": null, "length": 9233}
{"pred": "       final ByteArrayOutputStream output = new ByteArrayOutputStream();\n        final ITestResult result = new TestExecutionResult();\n        final ITestResult result2 = new TestExecutionResult();\n        final ITestResult result3 = new TestExecutionResult();\n        final ITestResult result4 = new Test", "answers": ["        ITestResult testResult = null;"], "all_classes": null, "length": 3239}
{"pred": "               showSnackBar(\"Day details not implemented yet!\");\n                return;\n            case R.id.action_edit:\n                OhaEnergyUseDayFragment.update(this, beginDate, kwhCost);\n                return;\n            case R.id.action_delete", "answers": ["                long endDateTime = OhaHelper.getDateEnd(new Date(beginDate), false).getTime();"], "all_classes": null, "length": 11399}
{"pred": "           new AddEditFavoriteDialog(getActivity(), listener, prefs).show(getFragmentManager(), \"AddEditFavoriteDialog\");\n        } else if (item.getItemId() == MENU_DELETE) {\n            new DeleteFavoriteRequest(prefs,", "answers": ["            new AddEditFavoriteDialog(getActivity(), new AddEditFavoriteDialog.AddEditFavoriteDialogListener() {"], "all_classes": null, "length": 2157}
{"pred": "   binary_op = {BvAnd, BvOr, BvXor, BvComp, BvUlt, BvUle, BvUgt, BvUge, BvShl, BvLshr, BvAdd, BvSub, Bv", "answers": ["others = {RotateLeft, RotateRight, Concat, Extract, ZeroExtend, Repeat, Ite}"], "all_classes": null, "length": 8365}
{"pred": "\t\tJComboBox<IDCT> mIDCTSelect;\n\t\tJComboBox<ColorSpace> mColorSpaceSelect;\n\t\tJComboBox<ColorSpace> mColorSpaceSelect;\n\t\tJComboBox<ColorSpace> mColorSpaceSelect;\n\t\t\tJComboBox<ColorSpace", "answers": ["\t\tJComboBox<IDCT> mIDCTSelect;"], "all_classes": null, "length": 2971}
{"pred": "   url(r'^job-template$', job_template, name=\"ajax-job-template\"),\n]\n\napp_settings_urls = [\n    url(r'^languages$', LanguagesSettingsView.as_view(), name=\"settings-languages\"),\n    url", "answers": ["    url(r'^refresh-pipeline$', refresh_ci_pipeline,"], "all_classes": null, "length": 7824}
{"pred": "       com = PointMass(self.com, self.mass, self.pd, color='r', visible=True)\n        return com\n    def get_com_point_mass(self):\n        \"\"\"\n        Get the center of mass as a PointMass instance.\n\n       ", "answers": ["        return PointMass(pos=self.com, mass=self.mass)"], "all_classes": null, "length": 6574}
{"pred": "               yield seq\n            else:\n                # If not a SQ, then it is a value with undefined length\n                # Read the bytes and yield the value\n                value = fp_read(length)\n                if debugging:\n                    logger_debug(\"Reading undefined length value: %", "answers": ["                yield DataElement(tag, VR, seq, value_tell,"], "all_classes": null, "length": 19001}
{"pred": "       qdisc_major_id=None,\n        qdisc_minor_id=None,\n        iptables_base_command=None,\n        iptables_base_command_helper=None,\n        iptables_mangle_controller=None,\n", "answers": ["        tc_command_output=TcCommandOutput.NOT_SET,"], "all_classes": null, "length": 3752}
{"pred": "    * \n     * @return ausgewählte Einzellastschrift; <tt>null</tt>, falls keine\n     *         ausgewählt ist\n     */\n    private EinzellastModel.Data getSelectedEinzellast() {\n        int row = einzellastTable", "answers": ["    private DataLastschriftMandat getSelectedEinzellast() {"], "all_classes": null, "length": 7988}
{"pred": "         gtimeout = gevent.Timeout.start_new(0)\n        result = method(msg.args)\n        if result:\n          self._on_message.Set(result)\n        else:\n          self._on_faulted.Set(result)\n      finally:\n", "answers": ["          gtimeout = NoopTimeout()"], "all_classes": null, "length": 907}
{"pred": "       PipelineConfig.objects.filter(package_name=self.object).delete()\n        # delete all associated graphs\n        Graph.objects.filter(graph_name=self.object.package_name).delete()\n        # delete all associated languages\n        Language.objects.filter(language", "answers": ["        CIPipeline.objects.filter(ci_package=self.object).delete()"], "all_classes": null, "length": 6570}
{"pred": "\t\t\t\tself.queue_director.putFlow(self, e)\n\t\t\texcept Exception as e:\n\t\t\t\tlog.error(e)\n\t\t\t\tself.queue_director.putFlow(self, e)\n\t\t\t\t\t\n", "answers": ["\t\t\texcept NoTemplateException:"], "all_classes": null, "length": 1210}
{"pred": "                                                       MSS_FORMATS.PKCS1,        // MSS format\n                                                        MessagingModeType.SIGNATURE); // Messaging mode\n            \n            // Send the request\n            EtsiResponse resp = this.client.send(req);\n            ", "answers": ["                                                        MSS_Formats.KIURU_PKCS1, // MSS Format"], "all_classes": null, "length": 7076}
{"pred": "\n    public static ExecutionParametersAssert assertThat(ExecutionParameters actual) {\n        return new ExecutionParametersAssert(actual);\n    }\n\n    public static ExecutionParameterAssert assertThat(ExecutionParameter actual) {\n        return new ExecutionParameterAssert(actual);\n    }\n\n   ", "answers": ["    public static CallableExecutionAssert assertThat(CallableExecution actual) {"], "all_classes": null, "length": 1142}
{"pred": "       // Compare configs\n        if (!compareWorkspaceConfigs(workspace1, workspace2)) {\n            return Integer.MAX_VALUE;\n        }\n\n        // Compare commands\n        if (!compareWorkspaceCommands(workspace1, workspace2)) {\n", "answers": ["        WorkspaceConfig workspace1Config = workspace1.getConfig();"], "all_classes": null, "length": 2293}
{"pred": "\t\tif (!TextUtils.isEmpty(brewery.email)) {\n\t\t\tproperties.add(new Property(R.drawable.ic_prop_email, brewery.email, v -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tItemClickSupport.addTo(propertiesBeersList).setOnItemClickListener((parent, pos, v) -> {"], "all_classes": null, "length": 1759}
{"pred": "   mRecyclerView.addOnItemTouchListener(new RecyclerViewGestureListener(this, new RecyclerViewGestureListener.OnItemLongClickListener() {\n      @Override public boolean onItemLongClick(RecyclerView.ViewHolder viewHolder, int position) {\n        //  holder.mView.setOnClickListener", "answers": ["    mGestureDetector = new GestureDetector(SMTHApplication.getAppContext(), new RecyclerViewGestureListener(this, mRecyclerView));"], "all_classes": null, "length": 8305}
{"pred": "\n            # Parse the error\n            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException( exception_class, exception_message", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1973}
{"pred": "               pointing_dir = np.arctan2(y_mean - platepar.dec_d, x_mean - platepar.lat)\n                pointing_dir_mag = np.sqrt(np.square(np.square(np.square(np.square(np.square(np", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 24387}
{"pred": "           dclient = DockerClient(tc_command_output=options.tc_command_output)\n        except DockerException as e:\n            logger.error(msgfy.to_error_message(e))\n            sys.exit(errno=errno, errno=errno", "answers": ["            dclient = DockerClient(options.tc_command_output)"], "all_classes": null, "length": 5083}
{"pred": "       fdm_builder.simulator = Simulator(fdmexec)\n        fdm_builder.simulator.add_listener(MockSimulatorDataListener())\n        fdm_builder.simulator.start()\n\n        fdm_client = SimulatorDataClient(\"127", "answers": ["        factory = SensorDataFactory(aircraft)"], "all_classes": null, "length": 2329}
{"pred": "       \"\"\"Test 1D barcodes\"\"\"\n        res = engine.decode_file(str(TESTDATA / type + '.png'))\n        self.assertEqual(len(res), 1)\n        self.assertEqual(res[0].type, type)\n        self.assert", "answers": ["        expected = [Barcode(type=type, data=b'Stegosaurus')]"], "all_classes": null, "length": 2305}
{"pred": "   url(r'^settings/ip-address/$', ip_list, name='ip-address-list'),\n    url(r'^settings/ip-address/new/$', new_ip, name='new-ip'),\n    url(r'^settings/ip-address/", "answers": ["    url(r'^settings/ip/list/$', ip_list, name='ip-list'),"], "all_classes": null, "length": 2204}
{"pred": "   self.vocabulary = StressVocabulary()\n\nNext line of code:\n    self.generator = Generator(self.vocabulary, self.stress_predictors)\n\nNext line of code:\n    def get_stress_", "answers": ["    def get_vocabulary(self, dump_path: str, markup_path: str) -> StressVocabulary:"], "all_classes": null, "length": 4236}
{"pred": "                   node.event_loop.call_soon(response_received.cancel)\n                    node.event_loop.call_later(RESPONSE_TIMEOUT,\n                                                 response_received.cancel)\n                    node.event_received.set", "answers": ["                    error = TimedOut('Response took too long.')"], "all_classes": null, "length": 8374}
{"pred": "   return RotateLeft(x, 16) ^ (BvOr(x, R))\n\n\ndef pi5(L, k_i, k_j):\n    if REFERENCE_VERSION:\n        y = RotateLeft(L + k_i,", "answers": ["class Multi2KeySchedule(KeySchedule):"], "all_classes": null, "length": 2763}
{"pred": "       binder.bind(PackageDao.class).to(PackageDaoImpl.class).in(Scopes.SINGLETON);\n        binder.bind(PackageService.class).to(PackageServiceImpl.class).in(Scopes.SINGLETON", "answers": ["        binder.bind(PackageDao.class).to(PackageDaoImpl.class).in(Scopes.SINGLETON);"], "all_classes": null, "length": 537}
{"pred": "       GuiSettingString strDefault = new GuiSettingString(sett.defaultChannel);\n        strDefault.setCaption(new TextComponentTranslation(DEFAULT_CHANNEL_COMMAND_DESC));\n        this.addComponent(strDefault, new int[]{5, pos", "answers": ["        GuiSettingString strChannels = new GuiSettingString(sett.channelCommand);"], "all_classes": null, "length": 4090}
{"pred": "           publisher.publishEvent(new RoundSingleResultSkippedEvent(event.getBlockNumber(), nonce, event.getChunkPartStartNonce(), calculatedDeadline,\n                                                                      poolMining));\n            }\n          }\n        }\n        else\n       ", "answers": ["              publisher.publishEvent(new RoundSingleResultSkippedEvent(event.getBlockNumber(), nonce, event.getChunkPartStartNonce(), calculatedDeadline,"], "all_classes": null, "length": 3377}
{"pred": "           pronunciations[word] = self.generate_pronunciation(word)\n        return pronunciations\n\n    def generate_pronunciation(self, word: str) -> Word:\n        \"\"\"\n        Generate a pronunciation for the word\n\n        Parameters", "answers": ["            pronunciation = Pronunciation(tuple(word), 1, None, None, None)"], "all_classes": null, "length": 2182}
{"pred": "   def __init__(self,\n                 team_member_ids=None,\n                 external_ids=None,\n                 emails=None):\n    def is_team_member_ids(self):\n    def is_external_ids(self):\n    def is_emails(self", "answers": ["DeviceSession.created.validator = bv.Nullable(common.DropboxTimestamp_validator)"], "all_classes": null, "length": 2273}
{"pred": "\t\tgr.addOperationListener(new NetworkOperationListener<List<GeoLocation>>() {\n\n\t\t\t@Override\n\t\t\tpublic void operationExcecuted(OperationResult<List<GeoLocation>> result) {\n\t\t\t\tassertFalse(\"Errors when retrieving", "answers": ["\t\tgr.addOperationListener(new NetworkOperationListener<List<GeoLocation>>() {"], "all_classes": null, "length": 715}
{"pred": "   private NetworkErrorDialogFragment networkErrorDialogFragment = new NetworkErrorDialogFragment();\n    private ErrorDialogFragment errorDialogFragment = new ErrorDialogFragment();\n    private ActionSelectorFragment actionSelectorFragment = new ActionSelectorFragment();\n    private PanelSelectorFragment panelSelectorFragment = new PanelSelectorFragment();", "answers": ["    private ProgrammerFragment programmerFragment = new ProgrammerFragment();"], "all_classes": null, "length": 14781}
{"pred": "   private static ApplicationComponent applicationComponent;\n    private static ApplicationModule applicationModule;\n    private static ApplicationComponent applicationComponent;\n    private static ApplicationModule applicationModule;\n    private static ApplicationComponent applicationComponent;\n    private static ApplicationModule applicationModule;\n    private static ApplicationComponent applicationComponent;\n   ", "answers": ["    private BrowseMoviesComponent browseMoviesComponent;"], "all_classes": null, "length": 1275}
{"pred": "\t\tif (params == null)\n\t\t\tparams = new GAParameters();\n\t\telse\n\t\t\tparams = params.copy();\n\t\t\n\t\t// TODO: should be a method on GAParameters\n\t\tpublic GAParameters getParams() {\n\t\t", "answers": ["\tList<Pair<String,String[]>> argmap;"], "all_classes": null, "length": 12949}
{"pred": "           '/appinterface/<int:appinterface_id>': RestAppInterface,\n            '/appinterfaces':               RestAppInterfaces,\n            # Application property endpoints\n            '/appproperty/<int:appeui>':     RestAppProperty,\n            '/appproperties':            Rest", "answers": ["            '/interface/<appinterface_id>': RestAppInterface,"], "all_classes": null, "length": 6445}
{"pred": "   public static <$SystemUnderTest> GivenWhenSteps<$SystemUnderTest> givenSut($SystemUnderTest systemUnderTest) {\n        return new GivenWhenSteps<$SystemUnderTest>(systemUnderTest);\n    }\nNext line of code:\n    public static <$", "answers": ["    public static <$SystemUnderTest> Given<$SystemUnderTest> givenSut(CheckedSupplier<$SystemUnderTest> givenSutStep) {"], "all_classes": null, "length": 2103}
{"pred": "       // Uri uri = Uri.parse(\"content://\" + getPackageName() + \"/\" + cachedLicenseFile.getName());\n        Uri uri = Uri.parse(\"content://\" + getPackageName() + \"/\" + cachedLicenseFile.getName());\n\n        // check if", "answers": ["        Uri uri = ConsoleContentProvider.absolutePathToUri(this, cachedLicenseFile.getAbsolutePath());"], "all_classes": null, "length": 26552}
{"pred": "   \"\"\"Test that unsupported mixin functions raise InvalidCondition\"\"\"\n    with pytest.raises(InvalidCondition):\n        op(c, *args)\n\n\ndef test_mixin_invalid_comparison_condition():\n    \"\"\"Test that invalid comparison condition raises InvalidCondition\"\"", "answers": ["    class Model(BaseModel):"], "all_classes": null, "length": 3852}
{"pred": "               'codec': VideoCodec(config, 'codec_id', description='video codec'),\n                'forced': YesNo('forced', hide_value=False, description='video track forced'),\n                'default': YesNo('default', hide_value=False, description", "answers": ["                'language': LanguageRule('video language'),"], "all_classes": null, "length": 4674}
{"pred": "\tprivate SubjectBasedMessageEvaluationCallback subjectCallback;\r\n\tprivate DateBasedMessageEvaluationCallback dateCallback;\r\n\tprivate SenderBasedMessageEvaluationCallback senderCallback;\r\n\tprivate Map<String, String> groupValues;\r\n\tprivate IMAPCrypt imap", "answers": ["\tprivate FilterPanel filterPanel;\r"], "all_classes": null, "length": 897}
{"pred": "\t\tList<Hints> hintslist = hintServices.selectAllHints();\n\t\tif (hintslist!=null) {\n\t\t\tmv.addObject(\"hintslist\", hintslist);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\tList<Hints> allhint = hintServices.getAllHints();"], "all_classes": null, "length": 8430}
{"pred": "       MIN_PACKET_LOSS_RATE,\n        MAX_PACKET_LOSS_RATE,\n        default=0,\n        help=\"\"\"round trip packet loss rate [%%]. the valid range is from {:d} to {:d}.\n        \"\"\".format", "answers": ["            MIN_PACKET_LOSS_RATE, MAX_PACKET_LOSS_RATE"], "all_classes": null, "length": 5890}
{"pred": "           ex = Hitbtc('bccbtc')\n        elif name == \"%s_ETH_BTC\" % constant.EX_HITBITC:\n            ex = Hitbtc('ethbtc')\n        elif name == \"%s_ETH_USD\" % constant", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 3761}
{"pred": "   private final KadConfiguration configuration;\n    private final KadServer server;\n    private final KademliaNode localNode;\n    private final KademliaId lookupId;\n    private final KademliaId origin;\n    private final KademliaId lookupId;", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3921}
{"pred": "           return\n\n        # get the region\n        region = self._buf.get_bounds(start, end)\n\n        # get the paragraphs\n        paragraphs = get_paragraphs_selected(self._buf, region)\n\n        # get the paragraphs\n        paragraphs =", "answers": ["            start, end = get_paragraphs_selected(self._buf)"], "all_classes": null, "length": 2157}
{"pred": "           eventBus.post(new PlaybackFatalErrorEvent(audioBook, path));\n        }\n\n        @Override\n        public void onPlaybackStopping() {\n            eventBus.post(new PlaybackStoppingEvent(audioBook));\n        }\n\n        @Override\n", "answers": ["            eventBus.post(new PlaybackFatalErrorEvent(path));"], "all_classes": null, "length": 5863}
{"pred": "           initials.update(dict(transplatform_slug=TRANSIFEX_SLUGS[1]))\n        return initials\n\n    def get_form(self, form_class=None, data=None):\n        kwargs = {}\n        kwargs.update({'action", "answers": ["            initials.update(dict(transplatform_slug=TRANSIFEX_SLUGS[0]))"], "all_classes": null, "length": 9623}
{"pred": "       throw new ConnectionPoolException(\"dataSource is null\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建安全对象\r\n   *\r\n   * @param securityClassName 安全类名\r\n   * @return 安全对", "answers": ["        Map<String, CommonDataSource> dataSourceMap = DataSourceHolder.getDataSourceMap();\r"], "all_classes": null, "length": 1475}
{"pred": "\t\t\tif (wordBlockLeftRightMidLine.equalsIgnoreCase(median)) {\n\t\t\t\tif (wordBlock.getY1() < median) {\n\t\t\t\t\tleftBlocks.add(wordBlock);\n\t\t\t\trigthBlocks.", "answers": ["\t\t\tif (wordBlockLeftRightMidLine.equals(Block.LEFT))"], "all_classes": null, "length": 1574}
{"pred": "   url(r'^new$', staff_member_required(NewLanguageView.as_view(), login_url=LOGIN_URL), name=\"settings-languages-new\"),\n    url(r'^edit/(?P<slug>[\\w\\-\\+]+)$',\n", "answers": ["    url(r'^new$', staff_member_required(NewLanguageView.as_view()),"], "all_classes": null, "length": 9431}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n    protected List<ViewHolder", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 5429}
{"pred": "       for (Background background : level.backgrounds)\n        {\n            JSONObject jBackground = new JSONObject();\n            jBackground.put(\"type\", background.type);\n            jBackground.put(\"color1_red\", background.color1_red);\n            jBackground.put(\"", "answers": ["        for (Background bg : level.backgrounds)"], "all_classes": null, "length": 3097}
{"pred": "\ndef check(arg, env):\n    if isinstance(arg, _MarkupLike):\n        return check_markup(arg, env)\n    elif isinstance(arg, _StringLike):\n        return check_string(arg, env)\n    elif isinstance(arg,", "answers": ["__var = VarsGen()"], "all_classes": null, "length": 2114}
{"pred": "\t\tAnnotationCreate a = new AnnotationCreate(\n\t\t\t\t\"Testing Annotation Create\", \"Testing Annotation Create\",\n\t\t\t\tnew GeoPoint(360, 360), sessionInfo);\n\t\ta.addOperationListener(new NetworkOperation", "answers": ["\t\tAnnotationCreate ac = new AnnotationCreate(\"Test\", \"Test body\", \"test\","], "all_classes": null, "length": 756}
{"pred": "           raise PyOrientBadMethodCallException( 'Invalid cluster type' )\n\n        # mandatory if not passed by method\n        self._new_cluster_id = params[4]\n\n        # order matters\n        self._append( ( FIELD_STRING, self._cluster_name", "answers": ["            raise PyOrientBadMethodCallException("], "all_classes": null, "length": 387}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('low_rate')\nNext line of code:\n  assert isinstance(LowRateConfig)\n", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 5787}
{"pred": "       this.eventDispatcher.update(new DiskWriterEvent(this.drumName, this.bucketId, byteLengthKV, byteLengthAux));\n    }\n\n    /**\n     * Returns the DRUM operation to be executed for the given key.\n     *\n     *\n", "answers": ["        this.eventDispatcher.update(new DiskWriterEvent(this.drumName, this.bucketId, byteLengthKV, byteLengthAux));"], "all_classes": null, "length": 5055}
{"pred": "   # get the indices of training samples for this batch update\n    batch_idx += batch_size\n    if (np.max(batch_idx) >= tr_samples):\n        # we finished an \"epoch\", so we rejumble the training set\n        Xtr = row_sh", "answers": ["        Xb = to_fX( Xtr.take(batch_idx, axis=0) )"], "all_classes": null, "length": 5557}
{"pred": "               //  var constantClasses = nodes.stream().map(MethodInsnNode::owner).distinct().collect(toList());\n                //  var constantClasses = nodes.stream().map(MethodInsnNode::owner).distinct().collect(toList());\n                var constantClasses = nodes", "answers": ["                var analyzer = new Analyzer<>(new ConstInterpreter());"], "all_classes": null, "length": 4589}
{"pred": "           codec = CODECS[codec_id]\n        elif bytes_ == 4:\n            codec_id = cdata.uint32_le_from(data, offset)\n            codec = CODECS[codec_id]\n        else:\n           ", "answers": ["            if codec_id in CODECS:"], "all_classes": null, "length": 3694}
{"pred": "       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_INPUT);\n        }\n        setContentView(R.layout", "answers": ["        setTheme(Themes.get(this).getCurrentTheme());"], "all_classes": null, "length": 9354}
{"pred": "           self.zanata_resource.version.get(version_id)\n        except NoSuchProjectException:\n            self.log.error(\"Project %s does not exist\" % project_id)\n            sys.exit(1)\n        except UnAuthorizedException:\n            self", "answers": ["        except NoSuchProjectException as e:"], "all_classes": null, "length": 8281}
{"pred": "\n    public DrupalNode getNode(String nid) throws DrupalFetchException;\n\n    public DrupalNode getNode(int nid) throws DrupalFetchException;\n\n    public DrupalNode getNode(String nid, String type) throws DrupalFetchException;\n\n", "answers": ["    void connect() throws DrupalFetchException;"], "all_classes": null, "length": 2860}
{"pred": "           run_classify_speakers(args, unknown)\n        elif args.subcommand == \"transcribe\":\n            run_transcribe_corpus(args, unknown)\n        elif args.subcommand == \"anchor\":\n            run_anchor(args, unknown)\n        elif args", "answers": ["            run_classify_speakers(args, unknown)"], "all_classes": null, "length": 2254}
{"pred": "           mWifiStateListener.onWifiEnabled();\n        }\n\n        @Override\n        public void onWifiDisabled() {\n            wifiLog(\"WIFI DISABLED...\");Next line of code:\n            mWifiStateListener.onWifiDisabled();\n", "answers": ["            unregisterReceiver(mContext, mWifiStateReceiver);"], "all_classes": null, "length": 2486}
{"pred": "                       spatialFilter = new SpatialFilter(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation(new PolygonLocation", "answers": ["                        spatialFilter = new SpatialFilter(Dimension.SPATIAL, new PolygonLocationProfile(new SQLPolygonDataProvider(OutProfileActivity.this), new LastLocationImpl(OutProfileActivity.this), exec), ((double) seekbarProfileThreshold.getProgress()) / 100);"], "all_classes": null, "length": 5996}
{"pred": "       self._waveform_loader = WaveformLoader(n_samples, order, low, high)\n\n    def _create_waveform_filter(self):\n        \"\"\"Create a bandpass filter.\"\"\"\"\n        order = self._metadata['filter_order']\n        low =", "answers": ["        b_filter = bandpass_filter(rate=rate,"], "all_classes": null, "length": 5430}
{"pred": "       return FloodFillDetector(probe_adjacency_list=graph,\n                                 join_size=join_size,\n                                 channels_per_group=probe_channels,\n                                                                      )\n        # Create the detector.\n        return Flo", "answers": ["        return FloodFillDetector(probe_adjacency_list=graph,"], "all_classes": null, "length": 4431}
{"pred": "   TableAPI,\n    UserAPI,\n):\n    \"\"\"TD API class.\n\n    This class is inherited by :class:`tdclient.api.API`.\n    \"\"\"\n\n    def __init__(self, api_version=None, api_version=None, api_version=", "answers": ["    TableAPI,"], "all_classes": null, "length": 17192}
{"pred": "       return download_session\n\n    def get_manifest(self, manifest_id, ids, api_url, repos, portal):\n        \"\"\"\n        Function that returns a manifest json object from the icgc api.  This function is called by the download_manifest\n        function to retrieve the manifest", "answers": ["        if not flatten_file_data(file_data):"], "all_classes": null, "length": 3549}
{"pred": "       \"date_hired\": DATE_RANGE,\n        \"last_incident\": DATE_RANGE\n    }\n\n    date_range_choices = {\nNext line of code:\n        \"date_hired\": DATE_RANGE,\n        \"last_incident", "answers": ["        \"last_incident\": [TODAY, YESTERDAY, TOMORROW, THIS_WEEK, WEEK_TO_DATE, LAST_WEEK, NEXT_WEEK, THIS_MONTH,"], "all_classes": null, "length": 318}
{"pred": "           resource = RestAppInterfaces(restapi=self.restapi, server=self.server)\n            \n            # Fail to find the app interface: raises 404 NotFound\n            interfaceManager.getInterface = MagicMock(return_value=None)\n            yield self.", "answers": ["            resource = RestAppInterfaces(restapi=self.restapi, server=self.server)"], "all_classes": null, "length": 17889}
{"pred": "       parameters.put(\"bankId\", bankId);\n        Response response = connector.send(new Message(Message.Type.GET,\n          \"banks\", parameters));\n        System.out.println(response.data());\n      }\n      catch(Exception e)\n      {\n", "answers": ["        parameters.put(Bank.bankId, bankId);"], "all_classes": null, "length": 2253}
{"pred": "\t\t\t\tconsensus = facade.createConsensus(selection);\n\t\t\t}\n\t\t\tif (consensus != null) {\n\t\t\t\tdisplayArea.setText(consensus.toString());\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tthrow new ProtTestInternalException("], "all_classes": null, "length": 6774}
{"pred": "                                                                       RESPONSE_TIMEOUT)\n        self.assertEqual(True, node.pending.pop(message.uuid, None) is None)\n        self.assertEqual(True, node.pending_count)\n        self.assertEqual(1,", "answers": ["                             REPLICATE_INTERVAL)"], "all_classes": null, "length": 15671}
{"pred": "               mProgressBarSpinner.setVisibility(View.GONE);\n            }\n        });\n    }\n\n    public void queryForkMeBackendApiForTrendingRepositories() {\n        OkHttpClient.Builder okHttpBuilder = new OkHttpClient.Builder();\n        ok", "answers": ["                NetworkAsyncCheck n = NetworkHelper.checkNetworkConnection(mSwipeDeck);"], "all_classes": null, "length": 3650}
{"pred": "               if (query.getQueryType() == RequestType.TIMEBOUNDARY) {\n                    return pgm;\n                }\n            }\n        }\n        return pgm;\n    }\n\n    public Program<BaseStatementMeta> getCompiledAST(String sqlQuery, N", "answers": ["                if (query.queryType == RequestType.SELECT) {//classifyColumnsToDimAndMetrics"], "all_classes": null, "length": 3207}
{"pred": "\tprivate double maxInteratomicDistance = -1;\n\tprivate double minAngle = -1;\n\tprivate double maxAngle = -1;\n\tprivate double minDihedralAngle = -1;\n\tprivate double maxDihedralAngle = -1;\n\tprivate double min", "answers": ["\tprivate List<Triplet<Element,Element,Double>> perSpeciesMIDs;"], "all_classes": null, "length": 3748}
{"pred": "   private UserSession userSession;\n    private BomberManMediator bomberManMediator;\n    private InputMultiplexer inputMultiplexer;\n    private GestureDetector gestureDetector;\n    private List<Button> buttons;\n    private List<Image> images;", "answers": ["    private LabyrinthModel labyrinthModel;"], "all_classes": null, "length": 2975}
{"pred": "\n    @SuppressLint(\"NewApi\")\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ActionBar actionBar = getSupportActionBar();\n        actionBar.", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 5320}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic QueryContent toFrom(JpaQueryImpl jpaQueryImpl) {"], "all_classes": null, "length": 3936}
{"pred": "       response_code_dto = ResponseCodeDto(parameter)\n\n        self.assertEqual(\"a\", response_code_dto.name)\n        self.assertEqual(\"b\", response_code_dto.description)\n        self.assertEqual(300, response", "answers": ["        parameter_dto = ResponseCodeDto(parameter)"], "all_classes": null, "length": 3129}
{"pred": "       index = LocalSecondaryIndex(range_key=\"id\", projection=\"keys\")\n\n    assert isinstance(Model.index.range_key, UUID)\n    assert isinstance(Model.index.hash_key, UUID)\n\n\ndef test_index_keys_with", "answers": ["        other = Column(DateTime, range_key=True)"], "all_classes": null, "length": 2432}
{"pred": "           Url1_0,\n            NSLessCandidate1_0,\n            NSLessConfirmedCommit1_0,\n            NSLessValidate1_0,\n            NSLessUrl1_0,\n            NSLessConfirmedCommit", "answers": ["            Url1_0,"], "all_classes": null, "length": 4589}
{"pred": "   if __name__ == \"__main__\":\n        parser.print_help()\n        return\n\n\ndef run_command(args: Namespace) -> None:\n    \"\"\"\n    Wrapper function for running command line commands\n\n    Parameters\n    ----------\n    args", "answers": ["    check_third_party()"], "all_classes": null, "length": 2352}
{"pred": "               \"org.n52.youngs.harvest.CswSource\");\n        mapper = new CswToBuilderMapper(mapping);\n    }\n\n    @Test\n    public void testCswSource() throws Exception {\n        CswSource cs = new CswSource", "answers": ["                new XPathHelper());"], "all_classes": null, "length": 13702}
{"pred": "\t\t\t\t// save the structure to a POSCAR file\n\t\t\t\tFile f = new File(makePOSCARPath(s));\n\t\t\t\tif (!f.getParentFile().mkdirs())\n\t\t\t\t\tGAParameters.usage(\"ERROR:", "answers": ["\t\t\t\tVaspIn.writePoscar(s.getCell(), makePOSCARPath(s), false);"], "all_classes": null, "length": 12694}
{"pred": "       ContentValues contentValues = new ReviewContentValues();\n        contentValues.putReviewMoviedbId(movieMovieDBId);\n        contentValues.putAuthor(movie.getAuthor());\n        contentValues.putContent(ReviewColumns.CONTENT_URI, contentValues);\n", "answers": ["        MovieCursor movieCursor = movieSelection.query(getContentResolver());"], "all_classes": null, "length": 3589}
{"pred": "       with tqdm.tqdm(total=len(self.vad_path), unit=\"utterances\") as pbar:\n            for i, vad_path in enumerate(self.vad_path):\n                if not os.path.exists(vad_path):", "answers": ["        speaker = Speaker(\"speech\")"], "all_classes": null, "length": 13269}
{"pred": "                       marshaller.writeByte(OBJECT_ARRAY);\n                        marshaller.writeObject(params);\n\n                        marshaller.writeByte(STRING_ARRAY);\n                        marshaller.writeUTF(signature);\n\n                        marshaller.", "answers": ["                        marshaller.writeByte(OBJECT_ARRAY);"], "all_classes": null, "length": 2424}
{"pred": "     memory = [0] * lm\n    else:\n      if isinstance(memory, Stream):\n        memory = memory.to_list()\n      else:\n        memory = list(memory)\n\n    # Create the filter\n    if lb > 0:\n      if lb", "answers": ["      memory = [zero for unused in xrange(lm)]"], "all_classes": null, "length": 8435}
{"pred": "       self.__parser = NullPingParser()\n\n        if typepy.is_null_string(ping_text):\n            logger.debug(\"ping_message is empty\")\n\n            return PingStats()\n\n        )\n\n        for parser_class in parser_class_list", "answers": ["            LinuxPingParser,"], "all_classes": null, "length": 4203}
{"pred": "       self.completer = VCompleter(smart_completion)\n\n        # Initialize toolbar\n        self.toolbar = create_toolbar_tokens_func(c['main']['toolbar'])\n\n        # Initialize prompt\n        self.prompt = create_prompt(", "answers": ["        completer = VCompleter(smart_completion, vspecial=self.vspecial)"], "all_classes": null, "length": 12029}
{"pred": "           raise ProtocolError(\"{}'s protocol is not supported\".format(self.system_user.username))\n\n    def connect(self):\n        \"\"\"\n        连接到远程服务器\n        :return:\n        \"\"\"\n        self.get_system_user", "answers": ["            msg = _('Asset {} do not contain system user {} protocol {}')"], "all_classes": null, "length": 3168}
{"pred": "   CubicEaseInOut(CubicEaseInOut.class),\n\n    ElasticEaseIn(ElasticEaseIn.class),\n    ElasticEaseOut(ElasticEaseOut.class),\n\n    ExpoEaseIn(Expo", "answers": ["    CubicEaseInOut(CubicEaseInOut.class),"], "all_classes": null, "length": 1254}
{"pred": "       ChatUtils.print(message, TextFormatting.RED, args);\n    }\n\n    @Override\n    protected void handleWarning(Throwable throwable, String message, Object... args) {\n        ChatUtils.print(message, TextFormatting.RED, args);\n", "answers": ["        ChatUtils.print(\"minema.error.label\", TextFormatting.RED);"], "all_classes": null, "length": 3352}
{"pred": "\n        await response_message.add_reaction(':white_check_mark:')\n        await response_message.add_reaction(':white_large_square:')\n\n        await response_message.wait_for_reaction()\n\n        if response_message.emo", "answers": ["        await response_message.add_reaction(MyEmojis.TRASH)"], "all_classes": null, "length": 4697}
{"pred": "       if vdict[\"type\"] == \"prefix\":\n            quirk = pesterQuirk(vdict)\n        elif vdict[\"type\"] == \"suffix\":\n            quirk = pesterQuirk(vdict)\n        elif vdict[\"type\"] == \"regexp\":", "answers": ["        quirk = pesterQuirk(vdict)"], "all_classes": null, "length": 6012}
{"pred": "\t\t\tFopFactory fopFactory = new FopFactory();\n\t\t\tFop fop = fopFactory.newFop(isXconf, fopFactory.newURIResolver(imgFolderUri));\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1040}
{"pred": "   @Provides\n    VpaidClient provideVpaidClient() {\n        return new VpaidClient() {\n            @Override\n            public void init(MediaModel adMediaModel) {\n\n            }\n\n            @Override\n            public void notifyAdError(int code", "answers": ["    AdInterface provideAdInterfaceNoPreroll() {"], "all_classes": null, "length": 3649}
{"pred": "           jsonl_encoder(self.speakers)\n\n    def _write_files(self):\n        \"\"\"Write file information for speeding up future runs\"\"\"\n        with open(\n            os.path.join(self.corpus_output_directory, \"files.jsonl", "answers": ["            writer = jsonlines.Writer(f, dumps=jsonl_encoder)"], "all_classes": null, "length": 5726}
{"pred": "   private final int[] bucketCounts;\n\n    protected AbstractRingMap(int replicationFactor, Supplier<M> mapSupplier, MapMergePolicy<V> mergePolicy) {\n        this.replicationFactor = replicationFactor;\n        this.mergePolicy", "answers": ["    protected final Member localMember;"], "all_classes": null, "length": 1919}
{"pred": "       return new RemoteInfoScmResult( null, null, null, true );\n    }\n\n    @Override\n    public ListScmResult list( ScmProviderRepository repository, ScmFileSet fileSet, CommandParameters parameters )\n        throws ScmException\n    {\n        initialize", "answers": ["        return new SvnJavaRemoteInfoCommand().executeRemoteInfoCommand( repository, fileSet, parameters );"], "all_classes": null, "length": 8278}
{"pred": "   return t\n\n\ndef arg_var_list(names):\n    t = TypeVar[list]\nNext line of code:\n    return t\n\n\ndef arg_var_named(name):\n    t = TypeVar[dict]\nNext line of code:\n    return", "answers": ["    t.__backref__ = ArgRef(name)"], "all_classes": null, "length": 2565}
{"pred": "       platepar = loadPickle(self.dir_path, self.config.platepar_name)\n\n        # Set the platepar\n        self.platepar = platepar\n\n        # Set the platepar as the default file name\n        self.config.platepar_name", "answers": ["        platepar_file = openFileDialog(self.dir_path, initialfile, 'Select the platepar file', matplotlib)"], "all_classes": null, "length": 5113}
{"pred": "       self.title = element.get('title', '')\n\n        #: The element attributes\n        self.attributes = element.attrib\n\n        #: The element children\n        self.children = []\n\n        #: The element content\n        self.content = None\n\n        #", "answers": ["        self.title = element.findtext('{%s}title' % (XMLNS,))"], "all_classes": null, "length": 1554}
{"pred": "       bind(GerritActionsModule.class);\n        bind(GerritDiffModule.class);\n        bind(GerritCheckoutProvider.class);\n        bind(GerritPushExtensionPanel.class).asEager.class;\n        bind(GerritPushExtension", "answers": ["        bind(GerritCheckoutProvider.class);"], "all_classes": null, "length": 13508}
{"pred": "       return configurations.Configuration(None, self.fake_config)\n\n    def get_configurations_c_123_instances(self):\n        return configurations.ConfigurationParameters(None,\n                                                     self.fake_config_instances)\n\n   ", "answers": ["        return configurations.Configuration(None, self.fake_config[0])"], "all_classes": null, "length": 921}
{"pred": "\n@unittest.skipUnless(SoftekEngine.available(), 'SoftekEngine unavailable')\nclass TestSoftekEngine(TestEngine):\n    def test_1d(self):\n        self._test_1d(SoftekEngine(datamatrix=", "answers": ["@unittest.skipUnless(SoftekEngine.available(), 'SoftekEngine unavailable')"], "all_classes": null, "length": 2688}
{"pred": "                                labelColor='DEFAULT', value=DropLocation())\n        self.memory = self.add(npyscreen.TitleFixedText, name='Memory:',\n                                 labelColor='DEFAULT', value=Cpu())\n        self.cpu_widget = self.add(npyscreen.", "answers": ["                                 value=PathDirs().meta_dir,"], "all_classes": null, "length": 38176}
{"pred": "           'system': RestSystem,\n            # Device endpoint\n            'device': RestDevice,\n            # Gateway endpoint\n            'gateway': RestGateway,\n            # Application endpoint\n            'application': RestApplication,\n            # AppInterface endpoint\n            'appinterface': RestApp", "answers": ["            '/system':                      RestSystem,"], "all_classes": null, "length": 6255}
{"pred": "   return NamedGreenlet.spawn(name, *args, **kwargs)\n\n  def _OpenImpl(self):\n    \"\"\"Opens the connection to the remote host.\n    \"\"\"\n    self._log.debug('Opening connection to %s' % self._socket_source", "answers": ["    return NamedGreenlet.spawn("], "all_classes": null, "length": 1412}
{"pred": "   protected static WorldItemManager wmanager;\r\n    protected static ResidenceVaultAdapter vault;\r\n    protected static ResidenceBank bank;\r\n    protected static ResidenceChatManager chat;\r\n    protected static ResidenceItemListManager itemlist;\r\n    protected static ResidenceLeaseManager le", "answers": ["    protected static LeaseManager leasemanager;\r"], "all_classes": null, "length": 28849}
{"pred": "           headMarshaller = new Marshaller();\n            headMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            headMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,", "answers": ["            helpsCoxtext = JAXBContext.newInstance(Helps.class);"], "all_classes": null, "length": 3788}
{"pred": "       // Bind the resource to the connection\n        bindResource(resource);\n\n        // Wait until server sends response containing the <session> element\n        synchronized (this) {\n            if (!sessionEstablished) {\n                try {\n                    wait(30000);\n", "answers": ["        Bind bindResource = new Bind();"], "all_classes": null, "length": 2681}
{"pred": "\tprivate JpaQueryRender render;\n\t/**\n\t * 默认finder渲染器\n\t */\n\tprivate JpaQueryRender render;\n\t/**\n\t * 默认finder渲染器\n\t */\n\tprivate Jpa", "answers": ["\tJpaQueryRender finderRender;"], "all_classes": null, "length": 1395}
{"pred": " assert config == NormalRateConfig\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('high_rate')\n  assert config == HighRateConfig\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  assert config == NormalRateConfig"], "all_classes": null, "length": 7835}
{"pred": "\t\tself._properties_dock.add_change_handler(self.on_properties_dock_changed)\n\n\t\tself._properties_dock.add_change_handler(self.on_properties_dock_changed)\n\n\t\tself._properties_dock", "answers": ["\t\tfor initializer in plugin_initializers:"], "all_classes": null, "length": 3888}
{"pred": "   ul.set_config(InfoType.BOARDINFO, board_num, channel, BoardInfo.TEMPSCALE,\n                  TempScale.FAHRENHEIT)\n\n    channel = 3\n    # Set channel type to voltage\n    ul.set_config(", "answers": ["                  TempScale.FAHRENHEIT)"], "all_classes": null, "length": 4468}
{"pred": "           output = random_subset(10, 5)\n            str_output = ''.join(map(lambda x: str(x), output))\n            seen[str_output] += 1\n\n        for val in seen.values():\n            assert 5 <= val <= ", "answers": ["            output = random_subset(10, 1)"], "all_classes": null, "length": 2441}
{"pred": "   eventBus.on(new EventListenerSniffer(System.out)); // OPTIONAL: listen to events\n\n    EventBusClient eventBusClient = new EventBusClient.Builder()\n        .connect(56789)\n        .id(\"bus-id\")\n", "answers": ["    EventListener listener = new EventListener() {"], "all_classes": null, "length": 4096}
{"pred": "   mvp.addPresenter(new ControlPresenter());\n    mvp.addPresenter(new PhonebookPresenter());\n    mvp.addPresenter(new PeoplePresenter());\n    mvp.addPresenter(new LoadersPresenter());\n    mvp.addPres", "answers": ["    mvp.addPresenter(new LoadersPresenter());"], "all_classes": null, "length": 2971}
{"pred": "       \"\"\"Test the `from_pair` method.\"\"\"\n        x, y = Variable(\"x\", width), Variable(\"y\", width)\n        alpha = RXDiff.from_pair(x, y)\n        self.assertEqual(alpha, RXorYorZ(x,", "answers": ["        for diff_type in [XorDiff, RXDiff]:"], "all_classes": null, "length": 4909}
{"pred": "   \t\t\tif ( (i == 14) || (i == 20) || (i == 26)) {\n    \t\t\t\tteam2Score++;\n    \t\t\t}\n    \t\t\t}\n    \t\t\tif (i == 10", "answers": ["    \t\t\tnewPercept.setHighlight(new Highlight(new PlayerAction(ActionType.GOAL, 0,0), playerInfos.get(randomPlayer), null));"], "all_classes": null, "length": 1216}
{"pred": "    *\n     * @param limit The maximum number of queries to return.\n     */\n    public Observable<List<QueryReport>> queries(int limit) {\n        return apiService.queries(apiKey, limit);\n    }\n\n    /**\n     * Use this method to obtain", "answers": ["    public Observable<QueryReport> queries() {"], "all_classes": null, "length": 2490}
{"pred": "               if settings.ANDROID_DYNAMIC_ANALYZER == \"MobSF_REAL_DEVICE\":\n                    is_avd = False\n                elif settings.ANDROID_DYNAMIC_DYNAMIC_ANALY", "answers": ["                install_and_run(toolsdir, app_path, package, launcher, True)"], "all_classes": null, "length": 4486}
{"pred": "   public void onPacket(Packet packet) {\n        if (packet.getType() == PacketType.ACK) {\n            AckRequest ackRequest = packet.getAckRequest();\n            if (ackRequest != null) {\n                ackManager.onA", "answers": ["    public void onPacket(Packet packet, NamespaceClient client, Transport transport) {"], "all_classes": null, "length": 3197}
{"pred": "           st.create_store(ObjectStore('workers', Worker))\n            st.create_store(ObjectStore('logs', LogEntry))\n            st.create_store(ObjectStore('data', DataDict))\n            self.storage = st\n\n        self.storage = self.", "answers": ["            st.create_store(ObjectStore('workers', Worker))"], "all_classes": null, "length": 10509}
{"pred": "       self.index_name = decode_utf16le(self.data)\n\nNext line of code:\n        self.index_name = decode_utf16le(self.data)\n\nNext line of code:\n        self.index_name = decode_utf16", "answers": ["        count = read_u32le(f)"], "all_classes": null, "length": 1216}
{"pred": "   if ctx.invoked_subcommand == 'configure':\n        ConfigureDispatcher(ctx.obj['logdir'], config_file)\n        return\n\n    if ctx.invoked_subcommand == 'configure':\n        ConfigureDispatcher(ctx.obj['logdir'], ctx.obj", "answers": ["        logger.debug(__version__ + ' ' + ctx.invoked_subcommand)"], "all_classes": null, "length": 7000}
{"pred": "       self.assertEqual(MODULE_NAME, \"_pywincffi\")\n\n\n\n\n\nclass TestDistHeaderFiles(TestCase):\n    def test_header_files(self):\nNext line of code:\n        self.assertEqual(HEADER_FILES, [\"", "answers": ["        self.assertEqual(MODULE_NAME, \"_pywincffi\")"], "all_classes": null, "length": 2922}
{"pred": "           VotingModule.class,\n            AthenaGM.class\n    };\n\n\n    /**\n     * Load all modules\n     */\n    public static void loadModules() {\n\n        // Load all modules\n        for (Class moduleClass : moduleClasses) {\n            try {", "answers": ["            VotingModule.class"], "all_classes": null, "length": 8984}
{"pred": "           def __init__(self, *args, **kwargs):\n                self._sandbox = kwargs.pop('sandbox', False)\n                self._all = [H(**kwargs)]\n\n        return H\n\n    def get_definition(self):\n        \"\"\" Use local hosts.", "answers": ["            h1 =  LocalSSHHost1"], "all_classes": null, "length": 1729}
{"pred": "       self.cleanup_process(process)\n\n    def test_lpProcessAttributes_none(self):\n        with mock_library(CreateProcess=self.NoOpCreateProcess):\n            _, library = dist.load()\n\n            match = r\".*lpProcessAttributes in call to", "answers": ["        self.assertIsInstance(process, CreateProcessResult)"], "all_classes": null, "length": 2346}
{"pred": "           return command.startswith(\"tc qdisc\")\n\n        return [\n            command\n            for command in self.__tc_command_output.command_history\n            if tc_command_filter(command)\n        ]\n\n    def get_command_history(self):\n", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 7155}
{"pred": "       self.assertEqual(bool(NumericProxy()), False)\n        self.assertEqual(bool(NumericProxy(10)), True)\n        self.assertEqual(bool(NumericProxy('10')), True)\n        self.assertEqual(bool(NumericProxy(", "answers": ["        self.assertTrue(BooleanProxy(1))"], "all_classes": null, "length": 6837}
{"pred": "   raise MultipleModelTypesFoundError(args.name, available_languages)\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n   ", "answers": ["                raise PretrainedModelNotFoundError(args.name, args.model_type, available_languages)"], "all_classes": null, "length": 1586}
{"pred": "   assert _list_channels(model._kwik.h5py_file) == channels\nNext line of code:\n    assert _list_recordings(model._kwik.h5py_file) == [1, 2]\nNext line of code:\n    assert _", "answers": ["    assert _list_recordings(model._kwik.h5py_file) == [0, 1]"], "all_classes": null, "length": 1921}
{"pred": "       self.packages_manager.delete_package(self.object.package_name)\n        return super(DeletePackageView, self).delete(request, *args, **kwargs)\n\n\nclass PackageListView(ListView):\n    model = Package\n    template_name = 'packages/", "answers": ["        SyncStats.objects.filter(package_name=self.object).delete()"], "all_classes": null, "length": 3161}
{"pred": "\t\t\t\t\t\t\tif colorbar:\n\t\t\t\t\t\t\t\twrite_ply(v,\n\t\t\t\t\t\t\t\t\t\"output_ply/%d_%s_%s_%s_%s_%s_%s_%s_", "answers": ["\t\t\t\t\t\t\tout_color_array = paint_surface(opts.outputply[0],"], "all_classes": null, "length": 1441}
{"pred": "       self.instances = instances.Instances(self)\n        self.quotas = quotas.Quotas(self)\n        self.clusters = clusters.Clusters(self)\n        self.extensions = extensions\n        self.service_type = service_type\n", "answers": ["        self.backup_strategies = backup_strategy.BackupStrategiesManager(self)"], "all_classes": null, "length": 1381}
{"pred": "           mAdapter.setSortOrder(SortOrder.valueOf(sortOrder));\n\n        }\n\n        @Override\n        public void onLoaderReset(Loader<List<Album> loader) {\n            mAdapter.setData(null);\n        }\n    };\n\n\n    public", "answers": ["            mShowScrollerBubble = SortOrder.AlbumSortOrder.ALBUM_A_Z.equals(sortOrder) || SortOrder.AlbumSortOrder.ALBUM_Z_A.equals(sortOrder);"], "all_classes": null, "length": 5594}
{"pred": "                                                  null,      // AdditionalServices\n                                                   null,      // AdditionalServices\n                                                   null,      // AdditionalServices\n                                                   null,      // AdditionalServices\n                                                                  // AdditionalServices\n                                                                  //", "answers": ["                                                   SignatureProfiles.SWISSCOM_AUTHENTICATION, // Signature profile"], "all_classes": null, "length": 4932}
{"pred": "\t\tfinal Bounds bounds = new Bounds(cubeV, cubeI);\n\t\treturn bounds;\n\t}\n\t\n\tpublic static Bounds cubeBounds(float[] cubeV, short[] cubeI) {\n\t\t//@formatter:off\n\t\tfinal Bounds", "answers": ["\t\tfinal LinkedList<Polyhedron> parts = new LinkedList<Polyhedron>();"], "all_classes": null, "length": 5361}
{"pred": "   assert almost_eq(gammatone_erb_constants(n),\n                      (an, cninv))\n\n\nclass TestGammatoneERB(object):\n\n  @p((\"n\", \"an\",  \"aninv\", \"cn\",  \"", "answers": ["    x, y = gammatone_erb_constants(n)"], "all_classes": null, "length": 1454}
{"pred": "   public TypesApi getTypesApi() {\n        return typesApi;\n    }\n\n    @Override\n    public DataStore getLocalDataStore() {\n        return dataStore;\n    }\n\n    @Override\n    public KryptnosticClient newClient() throws ClassNotFoundException,", "answers": ["    public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException,"], "all_classes": null, "length": 3227}
{"pred": "\n    public static AbstractDurationAssert<?> resultOf(CheckedDurationSupplier whenStep) {\n        return assertThat(result(whenStep));\n    }\n\n    public static AbstractFileAssert<?> resultOf(CheckedFileSupplier whenStep) {\n        return assertThat(result(when", "answers": ["    public static AbstractFileAssert<?> resultOf(CheckedFileSupplier whenStep) {"], "all_classes": null, "length": 1785}
{"pred": "\t\tfor (OWLObjectPropertyExpression objectPropertyExp : normalizedOntology.m_objectPropertyExpressions) {\n\t\t\t// TODO\n\t\t}\n\t\tfor (OWLObjectPropertyExpression objectPropertyExp : normalizedOntology.m_objectPropertyExpressions)", "answers": ["\t\tfor\t(ComplexObjectPropertyInclusion complexObjPropertyInclusion : normalizedOntology.m_complexObjectPropertyInclusions) {"], "all_classes": null, "length": 25372}
{"pred": "   (\n        \"S\",\n        \"N\",\n        \"B\",\n        \"D\",\n        \"L\",\n        \"M\",\n        \"T\",\n        \"U\",\n        \"I\",\n        \"F\",\n        \"D\",\n        \"S\",\n       ", "answers": ["    Type(), String(), Binary(), Number(), Boolean(),"], "all_classes": null, "length": 2409}
{"pred": "       add(new PopulatorStateTree(this, config));\n        add(new PopulatorStateGrass(this));\n        add(new PopulatorStateSnow(this));\n        add(new PopulatorStateSand(this));\n        add(new PopulatorStateDirt(this", "answers": ["        add(\"WaterLakes\", new RareResource(new WorldGenLakesOld(STATIONARY_WATER), HeightDistrubution.DEFAULT, 4));"], "all_classes": null, "length": 1257}
{"pred": "       if(wls.getApplicationContext() == MainActivity.getContext()) {\n            // send settings\n            final SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(wls);\n            Handler sendSettings = new Handler(Looper.getMainLooper.getMainLo", "answers": ["        MainActivity activity = (MainActivity) ActivityController.getInstance().get(\"MainActivity\");"], "all_classes": null, "length": 26334}
{"pred": "       if (bmp != null) {\n            mDecodeManager.handleDecode(new Result(data, bmp));\n        }\n        mCaptureActivityHandler.onResume();\n    }\n\n    private Rect getCropRect() {\n        Rect cropRect =", "answers": ["        TesseractThread mTesseractThread = new TesseractThread(bmp, new TesseractCallback() {"], "all_classes": null, "length": 5626}
{"pred": "                   DefaultCacheStandardTestFieldEvaluator.INSTANCE);\n    \n    public static final StandardTestFieldEvaluationSpec CONTEXT_FIELD_SPEC = \n            new StandardTestFieldEvaluationSpec(\n                    StandardTestFieldNaming.FIELD_NAME_", "answers": ["                    DefaultCacheStandardTestFieldEvaluator.INSTANCE);"], "all_classes": null, "length": 2448}
{"pred": "               if thread_ident == self.slave.thread_ident:\n                    self.slave.lock.acquire(1)\n                    self.slave.lock.release()\n                    self.slave = None\n                    self.start_master()\n                    self", "answers": ["                action = Action(thread_ident,"], "all_classes": null, "length": 4037}
{"pred": "\t\t\tthis.contentExtractor = new SinaNewsContentExtractor();\r\n\t\t\tthis.linkExtractor = new SinaNewsLinkExtractor(deepth - 1, topN);\r\n\t\t\tthis.titleExtractor = new SinaNewsTitleExtractor();\r\n\t", "answers": ["\t\t\tthis.contentExtractor = new SinaNewsContentExtractor();\r"], "all_classes": null, "length": 656}
{"pred": "   private final MongoManager mongoManager;\n\n    private final Notifier notifier;\n\n    private final DefaultActionGroup actionGroup;\n\n    private final TreeSpeedSearch treeSpeedSearch;\n\n    private final DefaultMutableTreeModel mutableTreeModel;\n\n    private final MongoTreeBuilder mongoTree", "answers": ["    private final MongoManager mongoManager;"], "all_classes": null, "length": 6783}
{"pred": "           file_url = await self.MyBingoCardManager.save_bingo_card(ctx.message.guild.id, card_for.id, bingo_card, timestamp)\n\n        if file_url:\n            file_card_url = file_url\n       ", "answers": ["            file_path = BingoCardWriter.generate_board(user_name=card_for.id, bingo_card=bingo_card,"], "all_classes": null, "length": 7706}
{"pred": "\tprivate HashMap<String, IssueType> issueTypes = new HashMap<String, IssueType>();\n\tprivate HashMap<String, Priority> priorities = new HashMap<String, Priority>();\n\tprivate HashMap<String, Status> statuses = new HashMap<String, Status>();\n\tprivate HashMap", "answers": ["\tprivate ImagesCacher imagesCacher;"], "all_classes": null, "length": 803}
{"pred": "       self.link = linkobj(self, config)\n\n        self.link.run()\n\n        self.cleaner.run()\n\n        self.link.run()\n\n        self.cleaner.run()\n\n        self.link.run()\n\n        self.", "answers": ["        self.listener = PacketListener.PacketListener(self)"], "all_classes": null, "length": 14151}
{"pred": "   logger.info(\"Computing assembly points conflicts\")\n    compute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)\n\n    ###################################################################################################################################################################################################################################", "answers": ["    update_gap_sizes_in_merged_assembly(original_assembly_points_by_ids=original_assembly_points_by_ids,"], "all_classes": null, "length": 3739}
{"pred": "       self.data = np.array(self.data, dtype=np.float)\n        self.data = np.array(self.data, dtype=np.float)\n        self.data = np.array(self.data, dtype=np.float)\n        self.data", "answers": ["        dropnan_table(self)"], "all_classes": null, "length": 4537}
{"pred": "\t\t\n\t\tSubject subject = SecurityUtils.getSubject();\n\t\tString userid = subject.getPrincipal().toString();\n\t\t\n\t\tList<Users> users = userServices.getUsers(userid);\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\tCommonUtils.setControllerName(request, mv);"], "all_classes": null, "length": 6888}
{"pred": "   api.add_resource(PositionResource, \"/fdm/position\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(AircraftResource, \"/aircraft\",\n                     resource_class_args=(aircraft,))\n", "answers": ["    api.add_resource(PositionResource, \"/fdm/position\","], "all_classes": null, "length": 4683}
{"pred": "                           produto=ProdutoServico(\n                                    ICMS=ICMSSN102(\n                                            vItem12741=Decimal('0.00')\n                                    ),\n                                    ),\n                            imposto=Imposto(\n", "answers": ["                            produto=ProdutoServico("], "all_classes": null, "length": 9268}
{"pred": "   self.append( GA_PSR_UP_hdr(type=type) )\n\n\n\nclass GA_PSR_UP_hdr(Block):\n    def __init__(self, type=RCMsgType['GA-PSR-UP DISCOVERY RE", "answers": ["class GA_RC_hdr(Layer):"], "all_classes": null, "length": 19116}
{"pred": "       Int('KSI', Pt=0, Type='uint32', Repr='hex')\n        ]\n    def __init__(self, KSI=0):\n        Layer.__init__(self, KSI=KSI)\n        self.KSI = KSI\n       ", "answers": ["        Int('SN', ReprName='Sequence Number', Pt=0, Type='uint8')"], "all_classes": null, "length": 21510}
{"pred": "   @Inject public Player player;\nNext line of code:\n    @Inject public DurationQueryController durationQueryController;\nNext line of code:\n    @Inject public PlaybackController playbackController;\nNext line of code:\n    @Inject public AudioBookManager audioBookManager;\nNext", "answers": ["    private Player player;"], "all_classes": null, "length": 4703}
{"pred": "   def __init__(self, server, key, section=None, **kwargs):\n        super().__init__(server, key, section=section, **kwargs)\n        self._server = server\n        self._key = key\n        self._section = section\n        self._section = section", "answers": ["        CollectionMixin, CountryMixin, DirectorMixin, GenreMixin, LabelMixin, ProducerMixin, WriterMixin):"], "all_classes": null, "length": 8343}
{"pred": "\t\t\t\t\t// Pojofy.socketSend(urlPojo, dto, (Void) -> {\n\t\t\t\t\t// });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n}\n", "answers": ["\t\t\t\t\tPojofy.socketSend(socket, urlPojo, new Dto(\"violet\"), AllExamplesClient.dto,"], "all_classes": null, "length": 2114}
{"pred": "   ContainsCondition, InCondition, NotCondition, OrCondition,\n}\n\n\ndef test_search_repr():\n    \"\"\"\n    Test that the search_repr function works as expected.\n    \"\"\"\n    def test_search_repr_test_repr_test_", "answers": ["    ComparisonCondition, Condition, ContainsCondition, InCondition, NotCondition, OrCondition}"], "all_classes": null, "length": 3761}
{"pred": "       self._append( ( FIELD_BYTE, DATA_CLUSTER_DROP_OP ) )\n\n    @need_db_opened\n    def prepare(self, params=None):\n\n        if isinstance( params, int ):\n            # mandatory if", "answers": ["        self._append( ( FIELD_BYTE, DATA_CLUSTER_DROP_OP ) )"], "all_classes": null, "length": 944}
{"pred": "   assert u.get_base_equivalent(\"cgs\") == Unit(\"T\")\n\n\ndef test_code_unit_conversion():\n\n    ureg = UnitRegistry()\n    ureg.add(\"code_length\", 10.0, length)\n    ureg", "answers": ["    with pytest.raises(UnitsNotReducible):"], "all_classes": null, "length": 3344}
{"pred": "       assert_index_equal(binning_to_index(binning), index_to_binning(index))\n\n\nclass TestHistogram1D:\n    def test_h1(self):\n        h1d = h1d(data=np.array([1", "answers": ["        binning = static_binning(data=None, bins=[1, 2, 3, 4])"], "all_classes": null, "length": 5518}
{"pred": "           self.compiled_template_cache = CompiledTemplateManager(compiled_template_cache_max)\n\n        else:\n            self.compiled_template_cache = None\n\n    def decode(self, bufr_message):\n        \"\"\"\n        :type: bytes\n", "answers": ["            self.compiled_template_manager = CompiledTemplateManager(compiled_template_cache_max)"], "all_classes": null, "length": 9818}
{"pred": "#\n# CSN1() is a Layer instance\n# any GSM IE (e.g. MobAlloc) are actually Layer instances\n# and any Bit() instances (including LHFlag)\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["CSN1FIELDS = (Bit, Layer)"], "all_classes": null, "length": 16903}
{"pred": "   private ProtectionUpdater protectionUpdater;\n    private SignSelector signSelector;\n    private BlockFinder blockFinder;\n    private BlockLockerCommand blockLockerCommand;\n    private BlockDestroyListener blockDestroyListener;\n    private BlockPlaceListener blockPlaceListener;", "answers": ["    private ProtectionUpdater protectionUpdater;"], "all_classes": null, "length": 9151}
{"pred": "               writeLine(writer, writeRecord(new FileControl()), false);\n            }\n\n            writeLine(writer, writeRecord(new ACHDocument()));\n        } catch (IOException e) {\n            throw error(\"Error writing ACH document\", e);\n        }\n    }\n\n", "answers": ["                String emptyLine = new String(new char[ACHRecord.ACH_RECORD_LENGTH]).replace(\"\\0\", \"9\");"], "all_classes": null, "length": 2882}
{"pred": "\r\n    public static final String __START_JAR = \"start.jar\";\r\n    public static final String __START_INI = \"start.ini\";\r\n    public static final String __LIB_FOLDER = \"lib\";\r\n    public static final String __JSP_FOL", "answers": ["    private StartIni _startIniConfig;\r"], "all_classes": null, "length": 6619}
{"pred": "       movieInfoComponent = applicationComponent.plus(new MovieInfoModule());\n        return movieInfoComponent;\n    }\n\n    public MovieReviewsComponent createMovieReviewsComponent(){\n        movieReviewsComponent = applicationComponent.plus(new MovieReviewsModule());\n        return movieReviewsComponent", "answers": ["        movieInfoComponent = applicationComponent.plus(new MovieInfoModule());"], "all_classes": null, "length": 1787}
{"pred": " public ProgressMonitorListener createProgressMonitorListener(String name) {\n    ProgressMonitorListener listener = cache.get(name);\n    if (listener == null) {\n      listener = createProgressMonitorListener(name);\n      cache.put(name, listener);\n    }", "answers": ["  public Map<ProgressUpdateType, Slf4JProgress.Level> levels(String name) {"], "all_classes": null, "length": 2054}
{"pred": "       self.toast = PesterToastMachine(self, extraToasts)\n        self.toast.setWindowTitle(\"Pesterchum\")\n        self.toast.setWindowIcon(self.windowIcon())\n        self.toast = self.toast\n        self", "answers": ["        if pytwmn.confExists():"], "all_classes": null, "length": 11549}
{"pred": "       Configuration configuration, HandshakeData handshakeData, Store store) {\n        this.sessionId = sessionId;\n        this.handshakeData = handshakeData;\n        this.store = store;\n        this.disconnectableHub = disconnectable;\n       ", "answers": ["            StoreFactory storeFactory, HandshakeData handshakeData, ClientsBox clientsBox, Transport transport, CancelableScheduler disconnectScheduler,"], "all_classes": null, "length": 6671}
{"pred": "   options.addOption(new Option(\"h\", \"help\", false, \"print help\"));\n    options.addOption(new Option(\"q\", \"queryFile\", true, \"query file\"));\n    options.addOption(new Option(\"o\", \"outFile\", true, \"output file\"));", "answers": ["        options.addOption(new Option(TRAIN_SEQFILE_SHORT_OPT, TRAIN_SEQFILE_LONG_OPT, true, TRAIN_SEQFILE_DESC));"], "all_classes": null, "length": 1209}
{"pred": "\t\t\tGBSSimulator gbssimulator = new GBSSimulator();\n\t\t\tgbssimulator.setParameters(args2);\n\t\t\tgbssimulator.run();\n\t\t\t\tbreak;\n\t\tcase \"hap\":\n\t\t\t", "answers": ["\t\t\tGBSSimulator gbssimulator = new GBSSimulator();"], "all_classes": null, "length": 7202}
{"pred": "   CMD_OPTION_HELP_HELP_LINE,\n]\n\nCLASS_DELETE_HELP_LINES = [\n    'Usage: pywbemcli [GENERAL-OPTIONS] class delete CLASSNAME [COMMAND-", "answers": ["    CMD_OPTION_PROPERTYLIST_HELP_LINE,"], "all_classes": null, "length": 645}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tplayer.openGui(Levels.instance, GuiHandler.WEAPON_ATTRIBUTES, player.getEntityWorld(), (int) player.posX, (int) player.posY, (int) player.posZ);"], "all_classes": null, "length": 1347}
{"predanswers": ["                                         BoardInfo.BOARDTYPE)"], "all_classes": null, "length": 6822}
{"pred": "\n    @SystemService\n    private InputMethodManager imm;\n\n    @Pref(YarrnPrefs_.PROJECT_SEARCH_CATEGORY)\n    private SearchCriteria.SearchType searchCategory;\n\n    @Pref(YarrnPrefs_.PRO", "answers": ["    private FlowLayout searchCriteriaView;"], "all_classes": null, "length": 4725}
{"pred": "   for idx, atom_repr in enumerate(mol.atom_repr):\n        assert_array_almost_equal(res[idx], atom_repr)\n\n\ndef test_ecfp_repr():\n    \"\"\"Test exact ECFP representation to track down the", "answers": ["    assert_array_equal([_ECFP_atom_repr(mol, i) for i in range(len(mol.atoms))], res)"], "all_classes": null, "length": 7431}
{"pred": "       yield from self[0].select(context, starting_loc)\n\n\n@method(function('tokenize', nargs=1, sequence_types=('item()*', 'xs:string')))\ndef select_tokenize_function(self, context=None):\n    yield", "answers": ["        starting_loc = float(round_number(starting_loc))"], "all_classes": null, "length": 15134}
{"pred": "   RotateOutUpRight(RotateOutUpRight.class),\n\n    SlideInDown(SlideInDown.class),\n    SlideInLeft(SlideInLeft.class),\n    SlideInRight(SlideInRight.class),\n    SlideInUp", "answers": ["    RotateOutUpRight(RotateOutUpRight.class),"], "all_classes": null, "length": 6545}
{"pred": "       if before is not None and after is not None:\n            return before.date <= after.date\n        else:\n            return True\n\n    def move_transactions(self, transactions, before, after):\n        \"\"\"Moves ``transactions`` to the position ``before`` or", "answers": ["        if not allsame(txn.date for txn in transactions):"], "all_classes": null, "length": 2899}
{"pred": "           ServerPort serverPort = new ServerPort(port);\r\n            ports.add(serverPort);\r\n        }\r\n        catch (NumberFormatException e) {\r\n            Trace.trace(Trace.SEVERE, \"Invalid port number: \" + _serverInstance.getAdminPort());\r\n       ", "answers": ["        \tports.add(new ServerPort(\"server\", Messages.portServer, port, \"TCPIP\"));\r"], "all_classes": null, "length": 8415}
{"pred": "   assert L.dur == 4 * s\nNext line of code:\n    assert L.begin == .1\nNext line of code:\n    assert L.end == .9\nNext line of code:\n    assert L.finish == False\nNext line of code:\n   ", "answers": ["    assert almost_eq(L, (.1 * x for x in xrange(1, 9)))"], "all_classes": null, "length": 564}
{"pred": "   private final KadConfiguration config;\n    private final RouteLengthChecker routeLengthChecker;\n    private final KadServer.MessageHandler messageHandler;\n    private final KadConfiguration config;\n    private final KadStorageEntry storageEntry;\n    private final KadConfiguration config;\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 9031}
{"pred": "           FragmentObservable<OwnProfileFragment> observable = ObservableRegistry.getObservable(OwnProfileFragment.class);\n            observable.notify(classToNotify, new Drawable(profilePicture));\n        } else {\n            Log.e(this.getClass().getSimpleName(), \"Failed", "answers": ["            if (classToNotify == UserAdapter.class) {"], "all_classes": null, "length": 7935}
{"pred": "           presenter = new DownloadCompletePresenterImpl(this);\n        }\n        presenter.onHandleIntent(intent);\n    }\n\n    @Override\n    public void downloadError() {\n        ToastService.show(context.getString(R.string.download_error), Toast.", "answers": ["            presenter = new DownloadCompletePresenterImpl(new AMSOperations(this), new AndroidInterface(this));"], "all_classes": null, "length": 1475}
{"pred": "       assertThat(ds, queryExecutionFactoryListener.getQueryExecutions(), hasItem(new QueryExecution(ds, \"select * from t1 where id = ?\", 1)));\n        assertThat(ds, queryExecutionFactoryListener.getQueryExecutions(), hasItem(new QueryExecution(ds", "answers": ["        assertThat(ds, executions(0, isBatch()));"], "all_classes": null, "length": 1745}
{"pred": "\n    def test_is_not_ascii_with_hindi_messages(self):\n        self.assertFalse(is_not_ascii(msg_subscribe(\"Hindi\")))\n        self.assertFalse(is_not_ascii(msg_subscribe(\"Hindi\"", "answers": ["        self.assertFalse(is_not_ascii(nine_month_reminder_seven_days(\"English\")))"], "all_classes": null, "length": 2237}
{"pred": "\t\tprivate final float speed;\n\tprivate final float acceleration;\n\tprivate final float deceleration;\n\tprivate final float maxSpeed;\n\tprivate final float maxAcceleration;\n\tprivate final float maxDeceleration;\n\tprivate final float maxDeceleration;\n\tprivate", "answers": ["\tprivate final AnimationHelper anims;"], "all_classes": null, "length": 1130}
{"pred": "       new SignSessionData(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE_SIGN,\n            BROWSER_DATA_SIGN_BASE64, SESSION_ID));\n    u2fServerReferenceImpl = new U2f", "answers": ["        new SignSessionData(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE_SIGN, USER_PUBLIC_KEY_SIGN_HEX));"], "all_classes": null, "length": 4433}
{"pred": "       self.assertIsInstance(response.properties[\"bar\"], ObjectNumber)\n        self.assertEqual(\"c_bar\", response.properties[\"bar\"].description)\n        self.assertEqual(\"bar\", response.properties[\"bar\"].name)\n        self.assertEqual(\"123.4", "answers": ["        self.assertIsInstance(response.properties[\"bar\"], ObjectNumber)"], "all_classes": null, "length": 4915}
{"pred": "  * @return a new Path\n   */\n  public static Path location(String... locations) {\n    return Path.of(locations);\n  }\n  \n  /**\n   * Create a file system path, a list of locations from a list of string\n   * @param locations", "answers": ["  public static StableList<Path> path(String... locations) {"], "all_classes": null, "length": 3380}
{"pred": "               jobs_to_queue,\n                from_failure\n            )\n\n    def remove_job_from_running(self, job: Job):\n        \"\"\"Remove a job from the list of running ones.\"\"\"\n        self._run_jobs_from_RUNNING_", "answers": ["                self._to_namespaced(FUTURE_JOBS_KEY),"], "all_classes": null, "length": 4898}
{"pred": "                   givenSut(systemUnderTestMock)\n                            .givenArgument(() -> {\n                                givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                return GIVEN_STRING;\n                            })\n                            .andArgument", "answers": ["                    Throwable thrown = catchThrowable(() -> givenSutClass(SystemUnderTest.class)"], "all_classes": null, "length": 2647}
{"pred": "       self._resources_definition['ftp'] = FTPResource\n        self._resources_definition['odbc'] = ODBCResource\n        self._resources_definition['sqlite'] = SQLiteResource\n        self._resources_definition['odbc'] = ODBCProcessor\n        self._resources_definition['", "answers": ["        self._resources_definition['ftp'] = FTPResource"], "all_classes": null, "length": 5338}
{"pred": "       lectura = Lectura.objects.get(pk=lectura_id)\n    except Lectura.DoesNotExist:\n        raise Http404(\"La lectura requerida es inexistente.\")\n    if lectura.producto_con_marca.", "answers": ["        lectura = Lectura.objects.get(pk=lectura_id)"], "all_classes": null, "length": 2102}
{"pred": "       self.loader.parse_file_for_import(filename)\n        if self.loader.transactions:\n            panel = ImportWindow(self, None)\n            panel.view = weakref.proxy(self.view.get_panel_view(panel))\n            panel.view", "answers": ["        default_date_format = DateFormat(self.app.date_format).sys_format"], "all_classes": null, "length": 2735}
{"pred": "   private PresetFragment presetFragment = new PresetFragment();\n    private EffectFragment effectFragment = new EffectFragment();\n    private PrismFragment prismFragment = new PrismFragment();\n    private ProgrammerFragment programmerFragment = new ProgrammerFragment();\n    private NetworkErrorDialogFragment networkError", "answers": ["    private PrismFragment prismFragment = new PrismFragment();"], "all_classes": null, "length": 13912}
{"pred": "   self.revisionId = revisionId\n\n  def SetWorktree(self, worktree):\n    \"\"\"Set the git working tree for this project.\n\n    Args:\n      worktree: The git working tree to use.\n    \"\"\"\n    self.worktree = worktree", "answers": ["    self.config = GitConfig.ForRepository(gitdir=self.gitdir,"], "all_classes": null, "length": 3908}
{"pred": "   @Override\n    public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(ExpressionGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    @Override\n    @Override\n", "answers": ["    public boolean add(MediaTypeNode node) {"], "all_classes": null, "length": 5660}
{"pred": "   if not self.cli.is_interactive():\n        self.cli.close()\n        sys.exit(0)\n\n    self.cli.close()\n    sys.exit(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    click.secho(format_error(e), err=True, fg='red')"], "all_classes": null, "length": 13531}
{"pred": "   @Override\n    public AbstractResponse onVideoMessage(VideoRequest video) throws WeixinException {\n        System.out.println(\"视频=\" + video.MediaId);\n        return buildTextResponse(\"视频很好看\");\n    }\n\n   ", "answers": ["    public AbstractResponse onVoiceMessage(VoiceRequest voice) throws WeixinException {"], "all_classes": null, "length": 967}
{"pred": "               decoded_values.append(value)\n\n    def process_element_descriptor(self, state, bit_reader, descriptor):\n        (self.process_element_descriptor_compressed if state.is_compressed else\n         self.process_element_descriptor", "answers": ["                    if descriptor.nbits > 1 and value == NUMERIC_MISSING_VALUES[descriptor.nbits]:"], "all_classes": null, "length": 12212}
