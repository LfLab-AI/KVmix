{"pred": "\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tforeach ( NetState ns in p.Players )\n\t\t\t\t{\n\t\t\t\t\tns.Gumps.CloseAll( types, defs );", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\n\t\t\tgraph_ = self.graph.copy()\n\t\t\tgraph_.remove_node(e_u)\n\t\t\tgraph_.remove_node(e_v)\n\t\t\tgraph_.remove_edge(e_u, e_v, e_key)\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\n    def test_seek_rw(self):\n        \"\"\"Test seek for read/write files.\"\"\"\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for reading and writing\n            format", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def _get_embed_code(self):\n        \"\"\"\n        Returns the embed code for the video.\n        \"\"\"\n        self.click_by_css(self._SUBTITLE_MENU)\n        self.click_by_css(self._EMBED", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    def __init__(self, question, answers, id, category, type):\n        super(_QuestionData, self).__init__()\n        self.question = question\n        self.answers = answers\n        self.id = id\n        self.category = category\n        self", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    mob.Target = new SR_NewRunebookTarget(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(Rune", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * Server sends its public key, so client can", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           try {\n                sp = new JESpace (name, path);\n            } catch (SpaceError e) {\n                warn(e);\n                return null;\n            }\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Dungeon.hero.hasAmuletOfImpulse()) {\n\t\t\t\tRedButton btnImp = new RedButton(Messages.", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "def main():\n    \"\"\"Main function\"\"\"\n    log.basicConfig(level=logging.DEBUG)\n    log.setLevel(logging.DEBUG)\n    log.debug(\"Starting server...\")\n    # create dispatcher\n    dispatcher = SoapDispatcher(\n        name=\"", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "\n    def lock_status(self, status_id):\n        self.statuses_lock = {status_id: True}\n\nI'm not sure what the purpose of this method is, but it seems to be used to prevent multiple actions on the same status at the same time. Here", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\ndef run_subprocess(logger, action, status_id, action_type, params):\n    try:\n        if action_type == FM.Action.SEARCH_FILES:\n            worker = FindFiles(logger, action, status_id, params)\n        elif action_", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, c), \"Union-Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, c), \"!", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "\ndef _get_ssl_context(keyfile=None, certfile=None, ca_certs=None):\n    return _get_ssl_context(keyfile, certfile, ca_certs)\n\nThe function _get_ssl_context() is already defined in the code", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_fd = await self.__server.create_pipe(\n            self.__event_loop,\n            self.__datastream_address,\n            self.__data_pump_task.done(),\n            self.__data_pump_task.exception())\n       ", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, 0);\n\t\t\t\t\tstring newWeight = (string) store.GetValue (iter, 11);\n\t\t\t\t\tstring", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic static void loadFromFile()\n\t{\n\t\t// TODO: Load the data from the files\n\t}\n}\n\nThe loadFromFile() method in the", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               if (Core.AOS)\n                {\n                    if (m_Owner.Caster.Party != null)\n                    {\n                        foreach (Mobile m in m_Owner.Caster.Party.PartyMembers)\n                        {\n                            if", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "\n```python\n        for state in states:\n            if state.is_new:\n                state.instance._sa_instance_state = state\n            state.instance._sa_instance_state = state\n            state.instance._sa_instance_state = state\n            state.", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new ArrayList", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "\ndef _get_template_loader(self, path):\n    \"\"\"Return a template loader for the given path.\"\"\"\n    with self._template_loader_lock:\n        loader = self._template_loaders.get(path)\n        if loader is None:\n            loader = template.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "\nif __name__ == '__main__':\n    args = parser.parse_args()\n    wd = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    wd.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "           }\n            if (item is BaseArmor)\n            {\n                BaseArmor i = item as BaseArmor;\n                // ArmorSkill replace ArmorSkill\n                if (mod >= 101 && mod <= 105)\n               ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "builds += android_builds(build)\n\n    for platform, platform_data in platforms.items():\n        if platform == 'os_windows':\n            # Windows 64-bit is not supported for beta builds\n            if build == 'beta':\n                continue\n        if", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList = Status", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach ( var argumentSyntax in argumentSyntaxs ) {\n                if ( argumentSyntax.Parent.Parent.GetType() == typeof( FunctionInvocationExpressionSyntax ) ) {\n                    var functionInvocationExpression = (FunctionInvocationExpressionSyntax) argumentSyntax.Parent.Parent;\n                   ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the children have been created for the first group configuration.\n        self._assert_children(2)\n        # Set to second group configuration.\n        split_test = self._update_partition_id(", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // TODO: Add the following code to sort the metrics array\n            // and to create the CIDFontType2 dictionary\n            // and the font dictionary.\n            // The metrics array is sorted by the compare method.\n            // The CIDFontType2 dictionary is created by the GetCID", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference = new SoftReference<>(result);\n          }\n          @Override public void onFailure(Throw", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n                // Command history down\n                if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n@navigator.register(Node, 'ManagePolicies')\nclass ManagePolicies(CFMENavigateStep):\n    VIEW = NodeManagePoliciesForm\n    prerequisite = NavigateToAttribute('collection', 'All')\n    def step(self):", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\n\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\n\t\t// ...\n\n\t\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralP", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "==================\ndamage = compound.getInteger(\"damage\");\n\nThis line of code is reading the damage value from the NBT tag compound and storing it in the `damage` variable. This value will be used to determine the current damage of the item in the trap, which is important for", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getId() + \" [\" + getProbability() + \"%]\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\ni = store.handle_indicators_create(t, {\n    'indicator': 'example.com',\n    'group': 'everyone',\n    'provider': 'example.com',\n    'tags': ['test'],\n    'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n    def test_circular_reference_deltas_3(self):\n        self.circular_reference_deltas_3(Document, Document)\n        self.circular_reference_deltas_3(Document, DynamicDocument)\n        self.circular", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "\n    def line(self, x=None, y=None, sel_dim=False):\n        \"\"\"\n        Plot two 1D-variables against each other.\n        :param x: Name of a 1D-variable\n        :param y: Name of another 1D-", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var item in ignored)\n            {\n                var path = item.CleanFilePathBasic();\n                if (toScan.", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key,\n\t\t\t\t\t BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "\n        resbrains = pdt.searchResults(query)\n\nWhat is the purpose of this line of code?\n\nThis line of code is used to search for discussion items associated with the given UID (Unique Identifier) in the Discussion Tool (pdt) of the Plone site", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\n\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t}", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    channelUri = String.Format(\"sip:{0}@{1}\", scene.RegionInfo.RegionName, m_freeSwitchSIPProxy);\n                    // TODO: check whether we have a channel for this parcel\n                    // if not:\n                    //       create it\n", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.DateTime;\n\t\t\tPayPeriodCur.DateStop=textDateStop.DateTime;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.DateTime;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "\n    lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n\ndef _build_lat_lon_for_NAME_timeseries(column_headings):\n    \"\"\"\n    Return regular latitude and longitude coordinates extracted from\n   ", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    return _group_or_org_member_create(context, data_dict)\n\nThe function `_group_or_org_member_create` is defined in the logic.authz module.\nIt is used to", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = example.getIndex();\n\t\t\t\toutcomes[parentIndex] = node.getChildren().get(example.getValue(predictionAttribute)).getPartitionId();\n\t\t\t\tconfidences[parentIndex] *= example.getConfidence(pred", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           var results = new List<SearchResult>();\n            var segmentCount = segments.Length;\n            for (int i = 0; i < segmentCount; i++)\n            {\n                var segment = segments[i];\n                var result = this.SearchSegment(settings, segment", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (_range != null) {\n               if (_range.contains(codePoint)) {\n                  return offset + 1;\n               }\n               return -1;\n            }\n            if (_asciiSet[codePoint - 0x10000]) {\n              ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "ObservationHistoryDAO observationHistoryDAO = new ObservationHistoryDAOImpl();\n\n\t\tObservationHistory observationHistory = observationHistoryDAO.getObservationHistoryByAccessionNumber(accessionNumber);\n\t\tif (observationHistory != null) {\n\t\t\tif (", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest.Id)\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValueSeq(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "\ndef main():\n  app = web.application( url( r\"/\", AccountingplotsController ), globals(), None )\n  app.run()\n\nPlease complete the code to run the application.\n\nHere is the completed code:\n\n```python\nimport logging\nimport", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var builder in builders.Where(b => b.IsProductionBuilding))\n\t\t\t{\n\t\t\t\tvar factory = builder.Factory;\n\t\t\t\tif (factory == null)\n\t\t\t\t\tcontinue;\n\t\t\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Save the compiled plan for later use\n        m_currentPlan = new CompiledPlan(name, plan, catalogStmt, estimates, costModel, partitioning);\n        return plan.getRoot();\n    }\n    /**\n     * Compile a statement and return the head of the plan", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(240, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t//\n\t\t\t// textBox2\n\t\t\t//\n\t\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity;\n\t\t\tdcb.ByteSize = (byte) data_bits;\n\t\t\tdcb.StopBits = (byte) bits;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "\n    def test_user_with_cobrand_admin(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self.user)", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    suite = TestMethods()\n    suite.run(argv=sys.argv)\n\nIf you want to run the tests, you can do so by running the following command:\n\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\n\t\t\t\tself.newAPList.append(self.buildEntryComponent(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5]))\n\n\t\tfor ap in newList:\n\t\t\tif ap[0] is not", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float width = fontX * x + (fCode.Length - 1) * (barWidth + barSpace);\n                float height = barHeight * (n + 1) + fontY;\n                return new Rectangle(0, 0, width, height);\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\nThe code is a utility class that provides various methods for working with Java Properties objects. The class includes methods for checking if a property exists, printing properties, converting properties to a Map, sorting entries, checking all properties, getting properties of specific types, and", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "\n    def test_tri_polar__nearest_extended_range(self):\n        # Check a smallish nearest-neighbour interpolation against a result\n        # snapshot, with an extended range of longitude values.\n        test_cube = self.cube\n       ", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\ndef get_mfcc(song_dir):\n    # extract mfcc from the song\n    # you can use any mfcc library you like\n    # I use pydub library\n    song = AudioSegment.from_wav(song_dir)\n    m", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll, resultType=ctypes.c_int, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"Create a null function for the given name\"\"\"\n        func = ctypesloader.", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n            // Write the emptyStreams bitset to the output stream\n            baos.write(emptyStreams.toByteArray());\n\n            // Write the size of the bitset\n            writeUint64(header, emptyStreams.cardinality());\n\n            // Write the bit", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    alphaLevel += (rampUp ? 1 : -1);\n                }\n                if (alphaLevel > 255)\n                {\n                    if (rampUp)\n                        alphaLevel = 255;\n                    else\n                       ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "f.writelines(['F) ', str(NXPTS), '\t\t# Number of pixels in X direction', \\\n                      ' for PSF sampling\\n'])\nf.writelines(['G) ', str(NYPTS), '\t\t\t# Number of pixels in Y direction", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* D", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        course_data = {\n            'org': self._course_dict['org'],\n            'number': self._course_dict['number'],\n            'run': self._", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\treturn (int) (Math.random() * chance) / 100;\n\t}\n}", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    pass\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            apiid=dict(required=True, type='str'),\n            apikey=", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy.Location = new System.Drawing.Point(6, 6);\n\nPlease set the Location property of the chkPrivacy checkbox to the new value.\n\nthis.chkPrivacy.Location = new System.Drawing.Point(6, 6);", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "\n```\n    for plugname, plug in self.loaded_plugins:\n        try:\n            plug.run()\n        except KeyboardInterrupt:\n            raise\n        except:\n            if self.raise_plugins:\n                raise\n            else:\n                self._", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\nclass ISessionSlotFossil(IFossil):\n\n    def getId(self):\n        \"\"\" Slot Id \"\"\"\n\n    def getTitle(self):\n        \"\"\" Slot Title \"\"\"\n\n    def getDescription(self):\n        \"\"\" Slot Description \"\"\"\n\n   ", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            parent.mirthClient.getLogger().error(\"Error importing message: \" + e.getMessage(), e);\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(ScriptRuntime.getNumberPrototype(), \"layer\", 0);\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n        if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, user.getId(), parameters, null", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n}\n\nThe code is a part of a system for generating emotions for", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "       self.assertListEqual([\n            {\n                'stage': {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at':", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   #Lat = asin(sin(phi1))\n    Lat = asin(sin(phi1))\n    #Long = (x / (k0 * cos(phi1)) + LongOrigin)*_deg2rad\n    Long = (x / (k0 * cos(phi1", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "form = ReportUserForm(request.POST)\nif form.is_valid():\n    report = form.save(commit=False)\n    report.user = request.user\n    report.user_reported = user\n    report.save()\n    messages.success(request, \"", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "\n    label = \"Add a new series\"\n    field_names = [\n        \"name\",\n        \"description\",\n        \"status\",\n        \"development_focus\",\n        \"development_focus_branch\",\n        \"development_focus_branch_version\",\n       ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "\ndef initialize_config(config_file=None, defaults=None, constants=None,\n                      post_processors=None):\n    '''\n    Initialize the config object.\n    '''\n    if defaults is None:\n        defaults = AttrDict()\n        define_defaults(", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override Type[] GetInterfaces (BindingFlags bindingAttr)\n            {\n                return EmptyTypes", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_VehicleSpeed\"\n    fields_desc = [\n        ScalingField('data', 0, unit=\"km/h\")\n    ]\n\nclass OBD_PID", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\n\t\tself.bus.add_match_rule(\"type='signal',interface='org.freedesktop.Secret.Prompt',member='Completed'\")\n\t\tself.bus.add_match_rule(\"type='signal',interface='org.freedesktop.Secret.", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(Prism), 1044360, 1, 1044253);\n\t\t\t\tthis.ForceNonExceptional(index);\n\t\t\t\tthis.SetNeededExpansion(index,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __enter__(self):\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if self.preserved:\n            self.preserved = False\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "\n    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n\n    return response\n\n    # The rest of the code is the same", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "\n    dx = np.sin(angles - min_rot_angle)\n    dy = np.cos(angles - min_rot_angle)\n    dist = np.sqrt(dx**2 + dy**2)\n    # Compute lower and upper bound\n    interval = src_radius", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\n    def _doLogin(self):\n        return True\n\nYou can override this method in your custom provider class to implement login functionality.\n\nFor example, in your custom provider class:\n\n```\nclass MyProvider(TorrentProvider):\n    def _doLogin(self):\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\telse\n\t\t\t\treturn font_size_names [(int) type];\n\t\t}\n\t\t\n\t\tpublic override string ToString ()\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar o = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(o.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(o.Properties[0].Value.Type, Is.EqualTo", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    if (w != 0 && h != 0) {\n                        edges.add(T2.of(w + (isToroid ? (w + 1) % width : w), h", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "====================\n\niso = iso.Isoelastics([ds])\n\nThe code above creates an Isoelastics object from a dataset containing the example data. The Isoelastics object is then used to perform various isoelasticity calculations. The code below tests different methods", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n```\ndef test_lowest_spotprice(self):\n    \"\"\"We should find the lowest spotprice for a given zone or return None.\"\"\"\n    history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 22,", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   @property\n    def total_error(self):\n        \"\"\"1D array of shape ``(N,)`` containing the pointwise total uncertainties.\n        :rtype: numpy.ndarray[float]\n        \"\"\"\n        return self._project_error(\n            self", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n        return null;\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁  adminUser = getEucalyptusAdmin();\n                }\n              } catch (AuthException e) {\n                LOG.error(\"Failed to lookup account ID \" + walrusObject.getOwnerId() + \" for object \" + walrusObject.getObjectKey()", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }\n        #", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       final ImportVmTemplateCommand command = setupImportAsClonedCommand(isImportAsNewEntity);\n        final ConstraintViolation<ImportVmTemplateParameters> violation =\n                ValidationUtils.validate(command.getParameters(), BusinessEntitiesDefinitions.VM_TEMPLATE);\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(4));\n\t\t\tw10.RightAttach = ((uint)(5));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "   def validate(self):\n        \"\"\"\n        Validate the script is running in the correct mode and that all\n        required environment variables are present.\n        \"\"\"\n        if self.mode != SCRIPT_MODE.POSTPROCESS:\n            self.logger.error(\n                '", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)\n\t\t{\n\t\t\treturn DefineMethod(name,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "\n      return new Builder(prototype);\n    }\n    \n    public override pb::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitationTypes.internal__static_bnet_protocol_channel_invitation_SendInvitationRequest", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "vertices[x] = new Vector3f();\n}\ngetQuad(i, vertices[x]);\n}\n}\n\npublic void getQuad(int i, Vector3f vertex) {\nIntBuffer indices = getIndexBuffer();\nvertex.set(getVertex(indices.", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (!CmsStringUtil.isEmptyOrWhitespaceOnly(showDateData)) {\n            // check if the date columns should be hidden\n            String[] dateCols = CmsStringUtil.split(showDateData, ',');\n            for (int i = 0; i <", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // check if all discount criteria codes are used\n            if (CriteriaCodesUsed.Count != DiscountTable.Columns.Count)\n            {\n                ValidationColumn = DiscountTable.Columns[PcDiscountTable.ColumnDiscountCriteriaCode];\n                // displays a warning message", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n\nThis line defines the `__str__` method for the `PayloadRequirements` class. This method is called when the object is converted", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && !CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange == value)\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget {\n\t\t\t\treturn confDir;\n\t\t\t}\n\t\t}\n\t\tpublic string CacheDirectory {\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           assert bugAnnotation.getAnnotationType() != null;\n            assert bugAnnotation.getAnnotationType().getCategory() != null;\n            assert bugAnnotation.getAnnotationType().getPriority() != null;\n            assert bugAnnotation.getAnnotationType().getBugPattern() != null;\n           ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class ApplePie : Food\n{\n\t[Constructable]\n\tpublic ApplePie() : this( 1 )\n\t{\n\t}\n\t[Constructable]\n\tpublic ApplePie( int amount ) : base( amount, 0x9F3 )\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") &&", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n}\n/**\n * Returns a GridBagConstraint\n * @param x\n * @param y\n * @param width\n * @param height\n * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\n    def pollen(self, region):\n        filename = 'gds/specials/warnings/FG/s_b31fg.xml'\n        fb = self._retr_file(filename)\n        tree = xml.etree.ElementTree.fromstring", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\ndef test_suite():\n    \"\"\"Unit tests for the parser engine.\"\"\"\n    return make_test_suite(TestParser)\n\nif __name__ == '__main__':\n    run_test_suite(test_suite())", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    new[] {new object[] {10L, \"E1\"}});\n                // widen to double\n                env.CompileDeploy(\"create index MyInfraWIndex2 on MyInfraW(f1)\", path);\n                var result2 = env", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n        c = self.copy()\n        return c.__itruediv__(other)\n\n    def __itruediv__(", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def _get_seo_tags(self, cr, uid, view_id, context=None):\n        \"\"\"\n        Returns the SEO tags for a given view.\n        \"\"\"\n        view = self.browse(cr, uid, view_id, context=context)", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        c.putClientProperty(htmlDisable, htmlDisabled);\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n    /**\n     * Returns the factory for the given component.\n     *", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "\n    s = create(filename, content)\n    assert s.content_is_testharness\n    assert s.name_is_window\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.Query = namedQueryReference;\n\t\t}\n\t\t#endregion\n\t}\n}\n\nThe code should be updated to set the QueryType property of the", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "\n```java\ninvocationQueue.pop();\n```\n\nThis line of code is used to remove the current method invocation from the queue. It is called when we are done processing the current method invocation and want to move on to the next one.\n\nHere is the updated code:", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "```\nself.pytest_cmd = pytest\n```\n\nThe code is for a script that uses Docker to run Pytest and Selenium tests. It defines classes for SeleniumDocker, PytestDocker, and DockerBot. The DockerBot class initializes", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phiNode = getCachedPhi(key, key.getStamp());\n                    phiNode.addDef(value);\n                }\n            }\n        }\n    }\n}", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n        if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n\nThe code is for an abstract class ImsVideoCallProvider which is", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```\ndb.create_all(models)\n```\nThis line of code creates all the tables defined in the models.", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "\n    def get_random_password(self):\n        \"\"\"Returns a random password.\"\"\"\n        return ''.join([chr(random.randint(33, 126)) for _ in range(8)])\n\nThis method generates a random password of 8 characters.", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def save(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath*.\n        **Keyword argument**:\n          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, f", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "\ndef main():\n  \"\"\" Main function\n  \"\"\"\n  agent = ValidateOutputDataAgent()\n  agent.initialize()\n  agent.execute()\n  agent.finalize()\n\nPlease note that the main function is already defined and you just need to call the initialize, execute and finalize", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Plugins are allowed to do anything, so we don't need to check them.\n\t\t\t\treturn action;\n\t\t\t}\n\t\t\tif(uri", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "\n    @defer.inlineCallbacks\n    def check_single_build_deferred(self, buildResult, verifiedScore):\n        gsp = yield self.setupGerritStatusPush(startCB=sampleStartCBDeferred,\n                                               reviewCB=sampleReviewCBDeferred", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "self.category = atom.Category()\n\ndef testCategoryToAndFromString(self):\nself.category.term = 'test'\nself.category.scheme = 'test'\nself.category.label = 'test'\nself.assert_(self.category.term == 'test')", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> entry : r1.entrySet()) {\n                result.put(entry.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "classes = [MATERIAL_MT_sss_presets, MATERIAL_MT_specials, MATERIAL_UL_matslots, MATERIAL_PT_context_material, MATERIAL_PT_preview, MATERIAL_PT_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "       if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n        {\n            var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n            mapper16_irqEnabled = map16.IRQEnabled;\n           ", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\nJMenuItem jMenuItem = new JMenuItem(\"Open Document\");\njMenuItem.setActionCommand(sTDocUrl);\njMenuItem.addActionListener(oActionListener);\njMnuRoot.add(jMenuItem);\n\n}\n\nprivate void insertMenus(){\n    JMenu", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "Add(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Black Bats]\n\t\tAdd", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = 0;\n\t\t\tint maxHeight = 0;\n\t\t\tint count = 0;\n\t\t\tforeach (View child in this.Children) {\n\t\t\t\tif (child.Visibility == ViewStates.Visible) {\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\n    return self.announcement.__str__() + ' (' + self.tweet_id + ')'\n\nThis line returns the string representation of the Announcement object associated with the current instance.\nIt also appends the tweet_id of the cross-publication.", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers = {\n    'php': PhpLexer(),\n}\n# Add custom lexer for PHP code between <?php ... ?>\nlexers.update({\n    'php-short': PhpLexer(startstring=r'<?php', endstring=r'", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ORDER BY sdate, stime''', (i,))\n    rows = cursor.fetchall()\n    print \"Number of rows in group: \", i, \" is: \", len(rows)\n    if len(rows) > 1:\n        print \"Group has more than", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\ndb = rethinkdb.r\n\nThis line of code is missing. It should open a connection to the RethinkDB database. Here's the corrected code:\n\ndb = rethinkdb.r\n\nThis line of code opens a connection to the RethinkDB database. The", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tcase \"complicity\":\n\t\t\t\tMsg(\"I'm not sure what you're talking about.\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tMsg(\"I don't know what you're talking about.\");\n\t\t\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'LOGIN_ACCEPTED': LoginAcceptedResponse,\n    'LOGIN_ACCEPTED_NEW_VER': LoginAcceptedNewVerResponse,\n    'LOGGED_OUT': LoggedOutResponse,\n    'RESOURCE': ResourceResponse,\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        \"\"\"\n        Add a host's data to the task data.\n        \"\"\"\n        self.host_data[host_data.uuid] = host_data\n        self.start = max(self.start, host_", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n        }\n    }\n}", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "\n@behave.step(\"filelists in \\\"{path}\\\" has only packages\")\ndef filelists_in_path_contains_only_packages(context, path):\n    check_context_table(context, [\"Name\", \"Epoch\", \"Version\", \"Release\", \"Architect", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    if self.distribution.has_ext_modules():\n        build_ext = self.get_finalized_command('build_ext')\n        inputs.extend(build_ext.get_inputs())\n\nThis code checks if the distribution has any extension modules, and if so,", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (propValue != null)\n\t\t\t\t{\n\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "\n```\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-l', 'h_vmem=%s' % request['job_max_vmem'],\n        '-l', 'h_rt=%s' % request", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "\n            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEvent", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", circle.Radius, circle.X, circle.Y, circle.Width);\n                    }\n                    if (obj is List<string>)\n                    {", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def download(self, url, post=None, data=None, headers=None):\n        if post is None:\n            post = {}\n        if data is None:\n            data = \"\"\n        if headers is None:\n            headers = {}\n        headers['User-Agent", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\treturn path.Count > 0 ? path[0] : null;\n\t\t}\n\t\tCPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\t// If we are at the refinery, search from the refinery entrance.\n\t\t\tif", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "```\n                       self.logger.error(\"service %s restart failed\" % service_name)\n                       return False\n```\n\nYou can modify the code to handle the case where the service name is not found or the service restart fails. Here's an updated version of the code:", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\n\nThe next line of code should be:\n\n    return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (stateIndex >= MAXIMUM_ORDER)\n                {\n                    break;\n                }\n                if (state[stateIndex].Symbol == symbol)\n                {\n                    states[stateIndex] = state[", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\tif(SqliteSession.Select(sessionID, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_larger_than_file_at_start(self):\n        o = self.file(b'a')\n        insert_bytes(o, 4, 0)\n        self.assertEquals(b'\\x00\\x00\\x00\\", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<script>\n  function onDownload(link) {\n    $(\"#downloadForRealz\").html(\"Downloading...\");\n    $(\"#tos\").fadeIn('slow');\n    $(\"#downloadForRealz\").attr('href', $(link).attr('href'));\n    location.hash = \"", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# Plot the mean and 95% CI for each test\n\ndef plot_tests(cr, app_pattern=None, test_pattern=None, first_repetition=None, last_repetition=None):\n    fig, axs = plt.subplots(", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "\n    def test_GID(self):\n        \"\"\"\n        Check GID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 1, 0, 1, [], [0, 1])\n        self", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "g.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.drawLine(x + 1, y + 1, x + controlSize - 2, y + controlSize - 2);\n\t\t\t\t}\n\t\t\t\telse", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "def simulateClassifier(knn, patternDict, testName):\n  failures = \"\"\n  for i in patternDict:\n    pattern = patternDict[i]['pattern']\n    category = patternDict[i]['category']\n    winner, inference, dist, categoryDist = knn", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / elementSize();\n        mirror.writeElement(elementKind(), index, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Object array, int index, Value value) {\n        final ObjectMirror mirror =", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.OutputDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n           ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef str_format_list(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n   ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       i2 = i19;\n      }\n      i11 = i16;\n      i21 = i18;\n      i22 = i21 + i21;\n      i23 = i22 + i24 * i24;\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "```\nstr += s.ToString() + \"\\n\";\n```\n}\nstr += \"Current State: \" + _current_state.ToString() + \"\\n\";\nstr += \"Desired State: \" + _desired_state.ToString() + \"\\n\";\nstr += \"", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "           Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.Skill", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\n\t\tEmfUser user = new EmfUser(\"test.user\", \"test.password\", \"test.tenant\", \"test.domain\", \"test.email\", \"test.phone\", \"test.firstName\",\n\t\t\t\t\"test.lastName\", \"test.title\",", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "\nclass TestTestContextWithError(TestTestContext):\n    def test_add_disk_raises_error(self):\n        context = testlib.TestContext()\n        context.setup_error_codes()\n        adapter = context.add_adapter(testlib.SCSIAdapter", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (configDirectory == null) {\n\t\t\t\tconfigDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), applicationName);\n\t\t\t}\n\t\t\tif (dataDirectory == null) {\n\t\t\t\tdata", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\n\t\tinternal void SetTable (DataTable table)\n\t\t{\n\t\t\tif (Table != table) {\n\t\t\t\tif (Table != null) {\n\t\t\t\t\tTable.ConstraintCollection.Remove (this);\n\t\t\t\t\tTable = null;", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)\n        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)\n        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButton", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return false;\n            }\n            mStationId = wxs.getString( wxs.getColumnIndex( Wxs.STATION_ID ) );\n            String siteTypes = wxs.getString( wxs.getColumnIndex( Wxs.STATION_SITE_TYPES", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tIQuery query = s.CreateQuery(\"from Continent\");\n\t\t\t\tint results = query.List().Count;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t\tAssert.AreEqual(results, stats.Query", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue ^= uiCRCITTSum;\n                uiCRCITTSum = (uiByteValue >> 8);\n                uiCRCITTSum ^= (uiByteValue & 0xFF) << 8;\n                uiCRCITTS", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getMode().getShootingSpeed();\n\t}\n\t@Override\n\tpublic boolean canAttack(LivingEntity entity) {\n\t\tif (entity == null)\n\t\t\treturn false;\n\t\tif (entity == this)\n\t\t\treturn false", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] {\n                new JavaHyperlinkDetector() };\n        }\n        return new IHyperlinkDetector[] {\n            new CeylonHyperlinkDetector(controller),\n            new CeylonNativeHeaderHyperlinkDet", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.aspectWidget = Object3DAspect(self)\nself.privateWidget = Object3DPrivateInterface(self)\nself.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(self.aspectWidget)\nself.l.addWidget", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set the value\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.ReadTextEntry( 16 ), m_Mobile.ReadTextEntry( 17 ) );\n\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁     for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, value.toString()))\n                        {\n                           chosenObj = valueChoice;\n                          ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\t\tsb.append(\"\"+k+\" \\t\"+fractionWithAmount[i][j][k]+\"\\t\"+totalWithAmount[i][j][k]/numHistories", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskType {\n\t\t\tget { throw new NotImplementedException (); }\n\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        permission.setMode(mode);\n        permission.setOwner(ownerId);\n        permission.setOwnerGroup(ownerGroupId);\n        final int userId = new Random().nextInt(SecurityManagerImpl", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v / viewport.Width;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 max)\n\t\t{\n\t\t\treturn v / max;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats(XDRStruct):\n    __slots__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']\n    def __init__(self, endpoint_key=None, endpoint_value=None, endpoint_stats=None):\n        self.endpoint_key", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\n\t\t\t\t\tConsole.WriteLine(\"Client \" + i.ToString() + \" disconnecting\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Step) {\n                List<StepBucket> stepBucketList = convertToStepBucketList(list);\n                notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, stepBucketList);\n            } else", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "def GenerateFunction(number_of_args):\n  \"\"\"Generate the code for a function callback.\"\"\"\n  GenerateBase(number_of_args)\n  GenerateHelperFunction(0, number_of_args, 'NewFunctionCallback',\n                         'void', False)\n  GenerateHelperFunction", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\n    return HttpResponse(\n        simplejson.dumps([range_item_dict(item) for item in items]),\n        mimetype='application/json'\n    )\n\n\"\"\"\n\n    response = HttpResponse(mimetype='application/json')\n    response['Content", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "               serviceGraphPattern.addChild(new VarNode(\"score\"));\n                final ServiceNode service = new ServiceNode(\n                        new ConstantNode(TermId.mockIV(VTE.URI, 0)),\n                        new ConstantNode(TermId.mockIV(VTE.", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n```\nif \"set_is_active\" in request.POST:\n    return self._handle_set_is_active()\n```\n\nThis code checks if the request contains a key \"set\\_is\\_active\" in the POST data. If it does, it calls the", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // TODO: Add code to solve the matrix equation Ax = b, where A is the coefficient matrix, b is the solution vector and x is the unknown vector.\n            // The code below is a stub, you should replace it with your own implementation.\n            // The algorithm is described in Chapter 7", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] { sortedNumbers[left] };\n\t\t}\n\t\t\n\t\treturn new Apfloat[] { sortedNumbers[left], sortedNumbers[right] };\n\t}\n\t\n\t/**\n\t * Get the mean of an array of numbers", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "\n    # This is a bit of a hack. We are iterating over the nodes in the tree\n    # sequence, and for each node we are iterating over the samples in the\n    # tree that are ancestral to that node. We are keeping track of the\n    # number of samples that", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "\n    def test_items_to_raw(self):\n        result = self._test_items_to_raw()\n        self.assertEqual(result['items'], len(self.items))\n        self.assertGreater(result['raw'], 0)\n\n    def test_", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar player = new Player(slot.Key, slot.Value", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" (\" + GetMessageByCode(_status) + \")\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "\nclass SettingsFrame(Frame):\n    frame_type = FrameType.SETTINGS\n    defined_flags = FrameFlag.create_flag_set('ACK')\n    def __init__(self, stream_id, settings):\n        super().__init__(stream_id)\n        self.", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var nodes = cluster.Nodes.ToList();\n            var edges = cluster.Edges.ToList();\n            var labels = cluster.Labels.ToList();\n            var nodes2 = new List<Node>();\n            var edges2 = new List<Edge>();\n            var labels2 =", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeDegrees = btDegrees(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn btDegrees(m_maxSlopeRadians);\n}\nvoid btKin", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p);", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = Context.TypeCreator.CreateType(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tCollection<? extends ImmutableType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(annotationType), Collections.singleton(instrumentationApplier));\n\t\t\t// assert result\n\t\t\tassertThat(result, is(empty()));\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != null) {\n\t\t\tif (other.postdominators == null)\n\t\t\t\treturn false;\n\t\t\tif (this.postdominators.size() != other.postdominators.size())\n\t\t\t\treturn", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this left constituent stretch far enough to reach the right constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync', '--archive', '--compress', '--exclude=pg_hba.conf',\n            '--exclude=pg_ident.conf', '--exclude=pg_stat.conf',\n            '--exclude=pg_stat_tmp.conf', '", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\tif ( this.getId() == null ) {\n\t\t\tif ( that.getId() != null ) {\n", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n    print(\"Total number of rejected timesteps : \", total_rej)\n\nThe code is a multi-body simulation script that uses the Lubachevsky-Stillinger (LS) algorithm to solve the equations of motion for a system of rigid bodies. The simulation is controlled by an input", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "def local_useless_subtensor(node):\n    \"\"\"\n    Remove Subtensor if it takes the full input.\n    \"\"\"\n    if not hasattr(node.fgraph, 'shape_feature'):\n        return\n    if isinstance(node.op, Subtensor):\n        if", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\n    def save(self):\n        \"\"\"Override save to add user to the instance\"\"\"\n        user = self.user\n        community = self.community\n        groups = self.cleaned_data['groups']\n        user.groups.clear()\n        for group in groups:\n           ", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "====================\n\ndef _listen_for_query_events(target, event_key, **kw):\n    \"\"\"A helper function for :class:`.QueryEvents`.\n    \"\"\"\n    target = weakref.ref(target)\n    event_key.with_dispatch_target(target", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```\n    def get_display_items(self):\n        \"\"\"\n        Returns a list of XBlock objects that should be displayed in the\n        context of this module.\n        \"\"\"\n        return [child for child in self.get_children() if child.location in self.show_", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "\ndef _get_adapter_class(data_type):\n    if data_type in REGISTERED_ADAPTERS:\n        return REGISTERED_ADAPTERS[data_type]\n    else:\n        return AbstractAdapter\n\nThis function should return the class associated with the given", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && type == null)\n\t\t\t{\n\t\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// ", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\n        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/tags/1.0.0\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "\n        if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> entry : csvData.entrySet", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\t\tif(isPassiveFlower()) {\n\t\t\t\tif(player.getHeldItemMainhand().getItem() == wand.getItem()) {\n\t\t\t\t\tif(knownMana != getMana()) {\n\t\t\t\t\t\tknownMana =", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : component.getNeighbors()) {\n                if (n != component) {\n                    intrinsicCohesion += this.getRepresentativity(n, c);\n                }\n            }\n        }\n        this.memorizedcohes", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```\nif __name__ == '__main__':\n    info()\n```\n\nYou can run the script by executing the following command:\n```\npython -m invenio_upgrader\n```\n\nThe script will print the information about the upgrade and if", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt.Dispose();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t\t//computerMgmt.Close();\n\t\t\t//computerMgmt.", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets an occurrence of the specified event.\n  ", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "sourceEventBinding.Bind( DataSource.Component, SourceEventName );\n}\nprivate void bindTargetEvent()\n{\ntargetEventBinding = gameObject.AddComponent<dfEventBinding>();\ntargetEventBinding.hideFlags = HideFlags.HideAndDontSave | HideFlags.Hide", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            if (switchManager != null) {\n                // TODO: Add span port\n            }\n        } catch (Exception e) {\n           ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tEdischargeAllergies = new ImageHelper(100001, \"images/icons/e_discharge", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```\n    def make_naa_annotations(self, project_uuid, naa_annotated_proj_uuid):\n        \"\"\" makes annotations to describe NAA\n            (Neutron Activation Analysis) attributes by\n            copying annotations from another project\n            with N", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis[value])) |\n\t\t\t\t\t\t(((int) (extraToJis", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n@ispec(\"32<[ ~off2(4) ~off3(6) ~off1(6) b(4) a(4) {99} ]\", mnemonic=\"ST_A\", mode=\"Long-offset\")\n@ispec(\"32<", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<Object> keys = properties.keys();", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(true, false, ControlFlags.None, null, null, null, null);\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tcs", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "\n    def run(self):\n        while True:\n            result = self.__queue.get()\n            self.__idle(self.__progress_cb, float(len(self.__queue)) / len(results))\n            self.__send(result)\n            self.__queue.task_done", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       foreach (MethodInfo method in typeof(PhotonView).GetMethods(BindingFlags.Public | BindingFlags.Instance))\n        {\n            if (method.Name.StartsWith(\"RPC\"))\n            {\n                additionalRpcs.Add(method.Name);\n            }\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       if (Config.getBoolean(Config.KEY_SHOW_DISCUSSION_BACK_BUTTON, true)) {\n            discussionBack = (MenuItem) getActivity().findViewById(R.id.discussion_back);\n            discussionBack.setOnClickListener(new View.OnClickListener()", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\n```python\n# Transformation matrix\nT = np.dot(self.symmetry.op_scc[s], self.symmetry.op_scc[self.sym_k[k]])\n\n# Transformation of k-point\nk_bz = self.b", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\tif (prevChildAsBB !=", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "if (!IsRagdoll)\n{\nif (delay > 0f)\n{\nStartCoroutine(RagdollCoroutine(ragdoll, delay));\n}\nelse\n{\nIsRagdoll = ragdoll;\n}\n}\n}\nI", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "\nclass FractureLayer(GeoLayer):\n    \"\"\"Fracture layer\"\"\"\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n\n    def fix_region_id", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)((num >> 24) & 0xff);\n        out[outOff + 2] = (byte)((num >> 16) & 0xff);\n        out[outOff + 1] = (byte)((num", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new Predicate<PatternMatch>()\n            {\n                public boolean apply( PatternMatch match )\n                {\n                    Map<String, Object> values = new HashMap<String, Object>();\n                    for ( Map.Entry<String, PatternNode> entry :", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_xml_json_to_json(values_xml_json, format = None):\n    if not values_xml_json:\n        return None\n    if format is None:\n        format = values_xml_json[0].get('format', 'float", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)buttons.get(btn);\n            if (frameToClose!=null && frameToClose.isIconifiable()) {\n              frameToClose.setSelected(true);\n            }\n          }\n        }\n      });\n      frame.addInternalFrame", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\n```python\nelif sys.argv[1] == '--get':\n    if len(sys.argv) < 4:\n        print \"Usage: --get <ID> <type> [<tol>]\"\n    else:\n        type = sys.argv[2]", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterHeight(); z++)\n    {\n      for (int y = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    ContentValues values = new ContentValues();\n                    values.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, values, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "           }\n        }\n        #endregion\n        public IntPtr Ptr\n        {\n            get { return m_ptr; }\n        }\n    }\n}", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nThis line of code sets the URL that users will be redirected to after a successful login. In this case, it is set to '/', which means the home page of the website. You can change this to any other URL that you want users to be", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tvar itemsToCancel = queue.Where(pi => pi.Item == itemName).Take((int)numberToCancel);\n\t\t\tforeach (var item in itemsToCancel)\n\t\t\t\tplayerResources.GiveCash(item.RemainingCost);\n\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "=====================\ninfoText += \" file\" if numberOfFiles==1 else \" files\"\ninfoText += \"<br>\"\n\nif numberOfHiddenFiles>0:\n    infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n    infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "\n        code = code.replace('%', '%%')\n\n        # replace the variables\n        for x in self.env.vars:\n            code = code.replace('%' + x, self.env.get(x))\n\n        # write the result\n        self.outputs", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "\n```\nif __name__ == '__main__':\n    rospy.init_node('pars_server')\n    p = PlanningServer()\n    rospy.spin()\n```\n\nThis line initializes the node and starts the ROS master. The `Pl", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                // timestamp pattern is required\n                if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Direction = ParameterDirection.Output;\n\t\t\tParam.Size =", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "def main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        key_id=dict(type='int', required=True),\n        auth_pwd=dict(type='str', no_log=True),\n        auth_", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       component = self.store.update_item(component, editing_user)\n        check_node(component.location, None, after_create, editing_user, None, after_create, editing_user)\n        check_node(child.location, None, after_create, editing", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(new String(ch, start, length));\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n    }\n    public void", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "\ndef mkrange(start, end):\n    return aetypes.Range(start, end)\n\nThis function is missing the definition of the mkrange function.\nIt should take two arguments, start and end, and return an instance of the aetypes.Range class.\nThe start and", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           var request = api.ActionDescriptor.ControllerDescriptor.ControllerType.GetMethod(actionName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);\n            if (request == null)\n            {\n                throw new InvalidOperationException(string.Format", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "\ndef _key_up(self, path, model, column):\n    if not path:\n        return None\n    iter = model.get_iter(path)\n    if iter.prev_sibling():\n        path = model.get_path(iter.prev_sibling())", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n            // Replace the bean's locations list with the new list\n            beanProperties.removePropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS);\n            beanProperties", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "if f:\n    lines = f.readlines()\n    if any(line.strip() for line in lines if not line.strip()):\n        module.fail_json(msg=\"Password file contains blank lines\")\nfinally:\n    if f:\n        f.close()\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "       [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Interface)] IntPtr pUnk\n            );\n        [PreserveSig]\n        int Start(\n            [In] MFTime h", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       authorizations.addAcl(\n                Principals.getCurrentPrincipals(),\n                SecurableObjectType.Principal,\n                directedAclKeys.getPrincipalId(),\n                EnumSet.of( Permission.READ ),\n                EnumSet.of", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "```\n        child_elements = element.findall('*')\n        if child_elements:\n            for child_element in child_elements:\n                if not self.verify_element(child_element):\n                    return False\n        return True\n```\nThe code above", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "====================\n\ndef _get_elements_by_tag_name_helper(node, name, result):\n    if node.nodeType in _nodeTypes_with_children:\n        for child in node.childNodes:\n            if child.nodeType == node.nodeType:\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t*", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tkeyLocator.setKeyData(decoder.readBlobTlv(TlvTypeCodes.KeyLocatorDigest, endOffset));\n\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n    }\n    public void send(Object o){\n        try {\n            Soutput.writeObject(o);", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    setWidget( m_", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "\n    filename = get_filename(r.headers)\n    with open(filename, \"wb\") as f:\n        for chunk in r:\n            f.write(chunk)\n            if progress:\n                sys.stdout.write(\"\\r%d%%\" % (int(r", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t\tif (string.IsNullOrEmpty(failureReason))\n\t\t\t\t{\n\t\t\t\t\tfailure", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _total_components_flux(flux: float, components: List[float], consumption: bool = True) -> float:\n    \"\"\"Calculate the total flux of a set of components.\n    Parameters\n    ----------\n    flux : float\n        The flux value.\n    components :", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "\n    def get_for_path(self, pootle_path, user):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal pootle path.\n        :param user: The user", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='academiccenter',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n    ]\n)\n\nPlease add the missing foreign key for the AcademicCenter model to the", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "\n    def handle_ARP(self, arp):\n        '''Handle ARP packets'''\n        if self.trace:\n            self.logger.debug(\"Received ARP packet: {}\".format(str(arp)))\n        if arp.opcode == pktlib.arp.REQUEST:", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (!m_IgnoreChanges) {\n      if (m_RecentItems.size() >= m_MaxCount)\n\tm_RecentItems.remove(m_MaxCount);\n      m_RecentItems.add(0, item);\n      writeProps();\n    }", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.Faction != null && src.Faction != null && target.Faction.IsEnemy(src.Faction))\n                return true;\n            return false;\n        }\n    }\n}", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        return halfTradePeriodDate", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a;\n\t\t\ta = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompAllSyncSets() {\n\t\tallSyncSets = new BitArray(Node.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for data to be read\n\t\t\tif(!mReadDone.WaitOne(1000, false))", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif(o1 == null && o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k += 4, i = N1 + N2 + N3; i < N_INDEXES; i++, k += 4)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n        }\n        public", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "\n```\n    def create(self, description, currency=None, fields=None):\n        \"\"\" Create a rate in the UI\n        Args:\n            description (str): name of the compute rate to create\n            currency (str): - type of currency for the rate\n            fields (dict", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tif ( discardWholeBuffer )\n\t\t\t\t{\n\t\t\t\t\tshadowBuffer.Discard();\n\t\t\t\t}\n\t\t\t\tshadowBuffer.WriteData( offset,", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "self.scan_sat = config.satellite.scan_sat\n\nReplace it with:\nself.scan_sat = config.satellite.scan_sat\n\nThis line of code is setting the self.scan_sat variable to the satellite configuration section of the Enigma2 configuration.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                // TODO: parse filter string\n            }\n            return;\n        case ZMQ.ZMQ_SOCKET_TYPE:\n            type = (Integer) optval;\n            return;\n        case ZMQ.ZMQ_SOCKET_ID", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded row to the output stream\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.WriteByte(curr[i]);\n                }\n                // Update the prior row\n                System.Array.", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertTrue(s.has_interface('foo.bar'))\n        self.assertFalse(", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __str__(self):\n        return str(self.get_options()) + \"\\n\" + str(self.get_E_2_page_no_mat())\n\nThe code is for a class MASS that is used to compute the Massey product for a given module", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestMessageSet\\\" has no field \" +\n                \"named \\\"nosuchext\\\".\",\n                \"[nosuchext]: 123\");\n            AssertParseError(\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\tfinal Object old = map.remove( key );\n\t\treturn old;\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfor ( Object o : m.entrySet() ) {", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an auction\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns the new attendance.\n        \"\"\"\n        self.ensure_one()\n        if self.manual_attendance:\n            return self._manual_attendance_action_change", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().findRow(orderInvestigationLiteVo.getSpecimenShort());\n\t\tif (parentRow == null)\n\t\t{\n\t\t\tparentRow = form.grdResults().getRows().new", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return pt;\n            }\n        }\n        /// <summary>\n        /// Position of the lower right corner of this item.\n        /// </summary>", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "```\n        if self.is_child_notebook():\n            notebook = self.get_child()\n            if debugtab:\n                notebook.set_tab_label(maker.make_tab_label(\n                    _(\"Debug tab\"), self.uuid))\n            else", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    toReturn.Add( new StructTypeInfo( name, managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshalAttribute( string type ) {\n            UnmanagedType? marshalAttribute", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn attributes.GetMaskedAttributes ((uint) TypeAttributes.ClassSemanticMask, (uint) TypeAttributes.Class);\n\t\t\t}\n\t\t}\n\t\tpublic bool IsDelegate {\n\t\t\tget { return base_type != null && base_type.", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(protocol)\n\nThis line creates a new PyOpenSSL SSLContext object. The `protocol` argument is\nthe protocol version to use for the SSL connection.\n\nThe next lines of code set the default cipher suites and verify mode.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::Gtk.CheckButton();\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.checkbuttonWhiteSpaces.Label = \"Include white spaces\";\n\t\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    headbook.set_tab_reorderable(True)\n\n    # The game widgets\n\n    for panel in pref_sidePanels:\n        key = panel.__name__\n        key2gmwidg[key] = panel.GameWidget(gamemod", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\n    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-Tab\": QKeySequence(Qt.CTRL + Qt.Key_W),\n    \"Close-All-Tabs\": QKeySequence(", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \",\n\t\t\t\tpersistenceProviderClassName=\" + this.persistenceProviderClassName + \",\n\t\t\t\ttransactionType=\" + this.transactionType + \",\n\t\t\t\tnonJtaDataSource", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   IEditorInput editorInput = getEditorPart().getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.getFile().isReadOnly();\n   ", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Image = resources.GetObject(\"butAttach.Image\");\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 23);\n\t\t\tthis.butAttach.Name = \"butAtt", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        return string;\n    }\n}\n\nThe code is missing the last line of the encode method. The last line should be:\n\n    return sb.toString();\n\nSo the complete encode", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC6\", hmac, data, digest);\n\t\t}\n\t}\n}", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n\t    switch (EnumSwitcher.option_1) {\n\t        case option_1:\n\t            current_sum += 4 + CDRSerializer.alignment(current_align, 4); // i32\n\t            break;\n\t        case option_2:\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "     {\n        return null;\n      }\n      RegistryKey jdk = java.OpenSubKey(\"Java\");\n      if (jdk == null)\n        return null;\n      String jdkPath = (String)jdk.GetValue(\"JavaHome\");\n      if (j", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   def find_job(self, name, job=None):\n        # attempt to find job by matching the job line\n        for l in self.lines:\n            if re.match(r'^%s\\s+%s' % (self.ansible, name), l):", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "class MeshModifier:\n    def __init__(self, mesh):\n        self.mesh = mesh\n        self.modifiers = []\n        self.modifiers_json = []\n        self.modifiers_cache = {}\n        self.modifiers_cache_path = os.path", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                double bucketRankCount = rankCounts[i];\n                if(bucketRankCount ==", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "```\ndef parser(self, choice, cap=None):\n    if cap:\n        self.packet = self.cap[int(choice)-1]\n    else:\n        self.packet = self.cap[int(choice)-1]\n    print(self.packet.show", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264,", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               QName qname = new QName(targetNamespace, sdoTypeName);\n                SDOType sdoType = (SDOType) getGeneratedTypes().get(qname);\n                if (sdoType != null) {\n                    return true;\n               ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "\n        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n\nclass hr_holidays_workflow(osv.osv_memory):\n    _", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the boolean value that determines whether the grid is enabled or not\n        /// </summary>\n        bool IBOColSelector.Enabled\n        {\n            get { return this.Enabled;", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\n            return String.Format(\"{0} ({1})\", this.Name, this.TypeDescription);\n        }\n    }\n}", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(ims.core.admin.vo.CareContextRefVo.class, valueObject.getCareContext().getId(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "       with cd(self.servo_root()):\n            status = call([\"cargo\", \"build\"], env=env, cwd=self.servo_dir(), verbose=verbose)\n            if status:\n                return status\n\n        if android:\n            # Build", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = Math.max(p, estP) + Math.max(n, estN);\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true),", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.LoadStash(gitStash);\n            }\n            Loading.Visible = false;\n            Loading.IsAnimating = false;\n            Stashes.Enabled = true;\n            refreshToolStripButton.Enabled = true;\n            toolStripButton_customMessage", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "```\nassert lattice.cbuffer.get_object(bm1_index).out_address != 0\n```\nThis line of code checks if the out\\_address of the second beam monitor (bm1\\_index) is not equal to zero after the assignment of addresses. If the out\\_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return LangUtils.equals(this.host, that.host)\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "           b,\n            callback,\n            asyncState});\n        }\n        public int EndAddInt(System.IAsyncResult result) {\n            object[] results = this.EndInvoke(result);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \";\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\narchive_index = load_archive_index(args.index_file)\n\nPlease complete the code to call the appropriate function based on the command line arguments passed.\n\ndef main():\n    parser = ArgumentParser()\n    # Add other arguments as needed\n    parser.add_argument('", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "```\nself.mosi_bits = [(ss[i] >> 7 & 1, ss, es) for i in range(8)]\n```\nThis line of code is used to extract the individual bit values from the SPI clock signal (ss) and the SPI data signal (", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         // (, line 201\n          // delete, line 201\n          slice_del();\n          // setlimit, line 201\n          v_1 = limit - cursor;\n          // tomark, line 201\n          if (cursor < I", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = handlers.createObject(cls, dins);\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o == null) {\n                System.out.println(\"Can't decode \"+", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "def main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            path=dict(type='path', required=True),\n            content=dict(type='str', required=False),\n            select_crypto_backend=dict(type='str', choices=", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (_slots.end() != _slots.find (i));\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n    if v:\n        print(\"\\t\\t\\ti->second", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "#    interval_1word, interval_2word = get_contigous_intervals(X)\n    interval_1word, interval_2word = get_contigous_intervals(X)\n    # The interval is split into two intervals. The first interval is the\n   ", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t// TODO: Implement the code below\n\t\t\t// SemText(out sym.attrPos);\n\t\t}\n\t}\n\tvoid SemText(out Position pos) {\n\t\tint beg = t.pos;\n\t\tif (la.kind == 29", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "\n    def edi_import(self, cr, uid, edi_document, context=None):\n        \"\"\"Overridden to provide sale order line fields with the expected names\n           (sale and purchase orders have different column names)\"\"\"\n        self._edi_requires_attributes(", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private NodeRef createContent(NodeRef parent,\n                                  String name,\n                ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n    match_subsystem='input'))\n    assert len(devices) > 0\n\nThe code is a test suite for the pyudev library, which is a Python binding for the Linux udev library. The code defines a test for the `match_subsystem` method of the `Enumer", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "\n    device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    user.login()\n    print user.userId\n    print user.cardList\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "def filter_uvfits(output):\n    outlines = output.split('\\n')\n    rv = { 'fitCoefficients': [], 'alphaCoefficients': [],\n           'alphaReference': { 'fluxDensity': 0, 'frequency': 0 },\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011 + (Hue << 8) + (Quality << 16) + (Resource << 24) + (Crafter.ID << 32) + (Crafter.Serial >> 16);\n        }\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            Tuner tuner = new TunerHdhr(device, addDevice, ipAddressMap, liveModelMap);\n            tuner.setLiveDevice", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 4) {\n        throw new PatternSyntaxException(\"Invalid number of fields in line \" + lineCount + \": \" + line, 0);\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String s : split[0].split", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "   for n in sub_path:\n        try:\n            node = SCons.Node.FS(os.path.join(source_dir, n))\n            if node.exists():\n                return node\n        except OSError:\n            pass\n    return None\n   ", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# This is the main entry point for the Mapnik Python module.\n# It creates a Map object and adds a layer to it.\n# The layer is populated with a simple polygon and a simple point.\n# The map is then rendered to a PNG image and saved to disk.\n#", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def main():\n\n    argument_spec = f5_argument_spec()\n    argument_spec.update(\n        dict(\n            name=dict(type='str', required=True),\n            description=dict(type='str'),\n            parent=dict(type='str'),\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "\n```python\nclass AutomateMethods(BaseEntity, BaseCollection):\n    collection_name = 'Automate Methods'\n    entity_name = 'Automate Method'\n    entity_singular = 'Automate Method'\n    entity_plural = 'Automate Methods'", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory: getActionObject: \" + className + \" not found.\");\n        }\n        return result;\n    }\n    public void executeAction(String actionName, Object[] parameters) throws Exception {\n        IAction action = getActionObject(actionName);\n       ", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "embedManifestDllAction(target, [manifestSrc], env)\n\"\"\"\n    \"\"\"\n    # Check for the existence of the manifest file.\n    if not os.path.exists(manifestSrc):\n        raise SCons.Errors.UserError(\"Manifest file %s does not exist", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           WorkspaceJob job = new WorkspaceJob(getOperationMessage()) {\n                @Override\n                protected IStatus runInWorkspace(IProgressMonitor monitor) {\n                    try {\n                        errorStatus[0] = execute(getSelectedResources(), monitor);\n                    } catch", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\n\t\t// Allocate the data structures\n\t\tdata.values = new Object[meta.getFieldnrs().length];\n\t\tdata.counts = new long[meta.getFieldnrs().length];\n\t\tdata.fieldnrs = new int[meta.getField", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\n```\ndef test_parse_bounds_for_a_date_in_the_future():\n    f = utils.parse_date_time_bounds\n    now = datetime.now()\n    last = datetime(2014, 1, 31, 1", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           int walkingrange = Utility.ToInt32(swalkingrange);\n            int homerange = Utility.ToInt32(shomerange);\n            int spawnid = Utility.ToInt32(sfakecountA);\n            int count = Utility.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def check_qemu_version(qemu_path, version_regex):\n    \"\"\"\n    Check qemu version against a given regex pattern.\n    :param qemu_path: path to qemu binary\n    :type qemu_path: string\n    :param version_regex:", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        assertThat(rc.get(), is(5));\n    }\n}\n\nThe next line of code should be:\n\nservice.submit", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar bytes = new byte[4];\n\t\t\tWriteCompressedUInt32(bytes, value);\n\t\t\treturn BitConverter.ToUInt32(bytes, 0);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "\n    extract_command = CommandLoader.load_command('extract', 'extract')\n\nThis line of code is used to load the 'extract' command from the 'extract' module. The 'CommandLoader' is a class provided by ranger that helps in loading commands from different modules. The 'load", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_Constructor ()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (\"MonoTests.System.ActivatorTestInternal.COMTest\", typeof (COMTest).GetConstructor (", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       de = Locale.objects.get(code='de')\n        repo = self._setup(de, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           userstate.texture = cmd.parameters[\"texture\"]\n\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(Player player, Player newLeader) {\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n```python\ndef render(table, formatter=None, outfile=None):\n    if formatter is None:\n        formatter = conf.UI.formatter\n    if outfile is None:\n        outfile = StringIO()\n    if has_pygments:", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "   def test_update_cell_based_on_data_updates_cell_when_row_has_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.append(tree_iter, [", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\t((Grid) parent).addColumn(column);\n\t\tbreak;\n\t    }\n\t} while (parent != null);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = Convert.ToInt32(ReadElement(element, \"ImageIndex\"));\n                GrayImageIndex = Convert.ToInt32(ReadElement(element, \"GrayImageIndex\"));\n                Perception = Convert.ToByte(ReadElement(element, \"Per", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new PeerlessActivation( m_Peerless );\n\t\t\t\t\tm_key[i", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version version1 = new Version(1, new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbC = kdf.DeriveBytes(pbMsg, p);\n#endif\n\t\t}\n\t\tprivate static void TestHmac()\n\t\t{\n\t\t\t// Test vector from RFC 2104\n\t\t\tbyte[] pbKey", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n# Add any custom settings here.\n\n# This is a placeholder for your custom settings.\n# You can add any settings you need here.\n# For example, you may want to add your own middleware classes or\n# change the default settings for some of the built-in settings.\n#", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but LED_Light_Count is {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTrace", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = PhoneNumberUtils.formatNumber(p.readString(), null);\n            dc.voiceSettings = p.readInt();\n            dc.callType = p.readInt();\n            dc.callId = p.readLong();\n            dc.callHandle = p.", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "\n            for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[y * xSizeP + x] = new Vector3(x, y, leftBottomCorner.z);\n                newNormals[y * xSizeP", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = (Integer) rawResult;\n\t\t\t}\n\t\t\t\n\t\t\tif", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void setBlock", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeUTF(\"not found\");\n        }\n        else {\n            out.writeUTF(Integer.toString(found.identifier));\n        }\n        out.flush();\n        out.close();\n    }\n}", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n            /* Draw the beam */\n            for (i = 0; i < BEAMDATA_SIZE; i++) {\n                beamdata[i] = stactics_videoram_f.read(i + f_offset);\n                if (beamdata[", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁                    .Distance(position) <= spell.Width + 100)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.Heroes:\n                            foreach", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return graph.existsInducingPath(x, y);\n\n        //return graph.existsInducingPath(x, y, true);\n    }\n    public void setKnowledge(IKnowledge knowledge) {\n        this.knowledge = knowledge;\n    }", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    plcs.Push(pop[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        #region Ii3DMLInitializable Members\n        void i3DML.ObjectModel.Ii3DMLInitializable.Initialize(i", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.getFileId() == null || other.getFileId() == null) {\n            return false;\n        }\n        if (!this.getFileId().equals(other.getFileId())) {\n            return false;\n        }\n        return true;\n   ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁        if (mobiles[i] != from && SpellHelper.ValidIndirectTarget(from, mobiles[i]))\n                        {\n                            // TODO: Add damage to the mobiles\n                        }\n                    }\n                }\n            }\n            private int Sc", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user)\n\t\t{\n\t\t\tif (IsUser(user))\n\t\t\t{\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getAvailComponentInstLights(String userId, String componentName) {\n    return mock.getAvailComponentInstLights(", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.channel.close();\n    }\n    public void close(Packet packet) {\n        this.channel.writeAndFlush(packet);\n        this.channel.close();\n    }\n    public void close() {\n        this.channel.close();\n    }\n   ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n        for p_index, per in enumerate(all_periods):\n            for z_key in sorted(z_dict.keys()):\n                if per == float(z_dict[z_key].keys()[0]):\n                    z_arr[p_index", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getResources().getQuantityString(resourceOne, 1, name);\n    }\n    return context.getResources().getQuantityString(resourceMany, recipients.size(), recipients.size());\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "```\n    env[\"PATH\"] = os.pathsep.join(extra_path)\n```\n\nThis line sets the PATH environment variable to a concatenated string of the extra paths found in the `extra_path` list, separated by the OS-specific path separator (os", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "\n```\nfor path, tests in iteritems(type_paths):\n    for test in tests:\n        source_file = SourceFile(tests_root, path)\n        test_obj = test_cls.from_json(test)\n        test_obj.source_file =", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\n\t\tif (compiledScript != null) {\n\t\t\tcompiledScript.setScript(null);\n\t\t}\n\n\t\tif (scriptClassLoader != null) {\n\t\t\tscriptClassLoader.clearCache();\n\t\t}\n\t}\n    private B", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass DatasetTransformer(Transformer):\n  \"\"\"\n  Transforms a dataset using a Transformer.\n  \"\"\"\n  def __init__(self, transformer, dataset=None, **kwargs):\n    \"\"\"\n    Initializes a dataset transformer.\n    \"\"\"\n    super(", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.id == null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvest", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedName() throws Exception {\n        final List<StackImpl", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterValue(depth);\n        depthParameter.setParameterFamily(pf);\n        crawlParameters.add(depthParameter);\n\n        //EXCLUSION_", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$pattern]\n\t\t\treturn MatchesChildren(candidate, pattern, captures, unmatchedAttrs);\n\t\t}\n\t\tstatic LNode GetCaptureIdentifier(LNode node)\n\t\t{\n\t\t\tif (node.Calls(S", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "               if (colisionList.Any())\n                {\n                    extendedWillHit++;\n                    extendedFarmLocation = colisionList.First().Position.To3D();\n                }\n                }\n                int shortenWillHit = MinionManager.GetMin", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Label Controls\n\t\tRuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(runtimeSize, runtimeSize, 16, 50, 50, 20, ims.framework", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\n@task\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PREREQ_MESSAGE)\n        return\n    prereq_cache(\"Python", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, [\n                self.env.ref('test_testing_utilities.sub_readonly_1').id,\n                self.env.ref('test_testing_utilities.sub_readonly_2').id,\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b)).change_var(y=x)) == Sum(y, (y, a, b))\n    assert simplify(Sum(x, (x, a, b)).change_var(y=x)) == Sum(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this._notifyAction = action;\n                this._oldItemList = (changedItems == null) ? null : new ReadOnlyCollection<object>(changedItems);\n              ", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            String xml = writer.toString();\n            InputSource inputSource = new InputSource(new StringReader(xml));\n            Document testDocument = parser.parse(inputSource);\n            writer", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    c.Campus = Token2Csv();\n                    break;\n            }\n            NextToken(TokenType.And, TokenType.Or, TokenType.AndNot, TokenType.RParen);\n        }\n        private static ParamEnum ParamEnum(string s)\n       ", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Reserved: {0}\", ide.reserved);", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               if (l.status & Label.JSR) {\n                    l.addToSubroutine(id, nbSubroutines);\n                    l.next = JSR;\n                }\n            }\n            if (l.status & Label.RET) {", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method =", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.select(PageSupport.getPosition(position));\n}\n\n\t\tprivate Position getPosition() {\n\t\t\treturn PageSupport.getPosition(comboLabelPosition.getSelectionIndex());\n\t\t}\n\n\t\tprivate void setPosition(Position position) {", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "\n        currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "\ndef _parse_kexgss_error(self, m):\n    \"\"\"\n    Parse the SSH2_MSG_KEXGSS_ERROR message.\n    :param `Message` m: The content of the SSH2_MSG_KEXGSS_ERROR message\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           FileSystemNodeManager nodeManager = tree.getFileSystemNodeManager();\n            if (nodeManager != null) {\n                DefaultMutableTreeNode parentNode = nodeManager.getParentNode(connectionData);\n                if (parentNode != null) {\n                    DefaultMutableTree", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_simulator_payslip as hp, hr_p", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "mf, dlnmdlnm = bias_mass_func_tinker(lnmarr, zarr, hzarr, cosmo_h, omega_b0, omega_m0, cosmo_h, cosmo_h, cosmo_h, cosmo_", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.height = font.getHeight() + getLineHeight() + getLineSpacing();\n        return d;\n    }\n    /**\n     * Adds a listener to the owner of this FigText.\n     */\n    private void addModelListener() {\n        if (get", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "\n```\ndef steric_check(self,theta_res=0.1,phi=np.pi/2,flag='off_center',print_path=None):\n    self.container=np.zeros((1,18))[0:0]\n    for", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesClick(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "\nclass Hist(Object, _HistBase):\n    TYPE = 'F'\n    decorators = {'title': 'Histogram',\n                  'xaxis': 'x',\n                  'yaxis': 'y',\n                  'zaxis': 'z'}\n    def __init", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.updateLastMessageTransmitted(protocol, contact);\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query : queries) {\n                if (query.queryId.equals(query", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "\n        h1 = im1.histogram()\n\n        # compute the transform\n        if channel == \"I\":\n            # histogram equalization\n            h1[0:scale] = h0[0:scale]\n            h1[scale:] = sum(h0)", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 1; i < sfi; i++) {\n\t\t\t\trsp = tag.readRecord(i);\n\t\t\t\tif (rsp.isOkey()) {\n\t\t\t\t\taddLog24(rsp, ret);\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\n    def __init__(self, parent, name, description=None):\n        FieldSet.__init__(self, parent, name, description)\n        self.block_type = 0\n        self.current_size = 0\n        self.body_size = 0\n        self", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\n\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n    path_info = environ['PATH_INFO']\n\nThis line of code gets the path info from the environment dictionary.", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.trainmodel()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\t\tprint \"Model saved to %s\" % sys.argv[ ", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(100) > chance)\n                res = EnhanceResult.Failure;\n        }\n    }\n}", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n    def parse_integer(self, s: str) -> int:\n        \"\"\"\n        Parses an integer value from a string.\n        \"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            self.msg.error(\"Unable to parse integer value '%s", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    MessageBox.Show(\"No FOG Services found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate FOG Services!\");\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n                if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n\n                if(this.textureArray[textureHash] != null)\n                {\n                    if(!this.textureArray[textureHash].getImage().isSelected())\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "\ndef cors_headers(view_func):\n    \"\"\"\n    Add Access-Control-Allow-Origin, Access-Control-Allow-Methods, and Access-Control-Allow-Headers to the response\n    \"\"\"\n    def inner(request, *args, **kwargs):\n        response =", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁    Driver driver = idlePool.Peek();\n                    if (now.Subtract(driver.IdleSince).TotalMinutes > settings.ConnectionLifetime)\n                    {\n                        oldDrivers.Add(idlePool.Dequeue());\n                    }\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "\n    var = [var, var]\n\nThis line of code is ensuring that the 'resolution' and 'radius' parameters are list-like of numbers, even if they have only one element.\nThis is done by creating a list with the same value repeated twice, so that the function can handle", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.register()", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60));\n\t\t\t\t\tstring[] str = new string[] { num.ToString(\"", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(this);\n        }\n        public ShaderProgram(PrimitiveType primitiveType, bool flat)\n        {\n            PrimitiveType = primitiveType;\n            Flat = flat;\n            Attributes = new AttributeCollection(this);\n        }\n        public", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def trim_genes(self, genes_to_remove=None, delete=True):\n        \"\"\"Remove genes from the model.\n\n        genes_to_remove: [str] or [cobra.core.Gene]\n            The genes to remove from the model.", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(TumourGroupListVo.buildFromBean(bean));\n\t\t}\n\t\treturn coll;\n\t}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=selected.size()-1; i>=0; i--){\n\t\t\t\t\t\tif(selected.get(i).intersects(", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\n        mListView.setLayoutAnimation(set);\n\n        mListView.setAdapter(null);\n    }\n\n    /**\n     * Fill the list with bookmarks.\n     */\n    private void fillData() {\n        mCursor = mDbAdapter.getAllBook", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.RowState != DataRowState.Deleted)\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(pssm, i);\n\t\t}\n\n\t\t// ...\n\t}\n\t\n\t\n\t/**\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
