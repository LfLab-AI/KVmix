{"pred": "\t\t\t\t\tforeach ( Gump g in m_Participants[i].Gumps )\n\t\t\t\t{\n\t\t\t\t\tif ( g is DuelContextGumpDefs:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tif e_u not in roots:\n\t\t\t\tP.put((-w, (e_u, e_v, e_key, data", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames,", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   def language_status(self, language):\n        els =  self.get_elements_list(self._SUB_LANGUAGES)\n        for el in els:\n            e = el.find_element_by_css_selector(\"a\")\n            self.logger.", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\t}", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a.hint_string()\n        return ret\n    def is_correct(self, answer):\n        for a in self.answers:\n        return True\n        return True\n        return True\n        return True\n        return", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(\"Certificate: \" + cert);\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n *\n *\n *\n *\n *", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void register (String name, JESpace sp) {\n        spaceRegistrar.put (name", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.quantity() == 1) {\n\t\t\t\tRedButton btnImp = new RedButton(Messages.get(this, \"", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = self.dispatcher.dispatch(request)\n        start_response('200 OK', [('Content-Type', 'text/xml')])\n        return [request]\n        return [request]\n        return [request]\n        return [request]\n        return [request", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc\n            }\n            }\n        }\n            }\n            }\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            trustManager.getAcceptedIssuers()\n\n\n# FIXME: this is a bit heavyweight for the Python dev, but it's the only way I know to get a\n# Java-based trust", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward for the domain admin page.\n     *\n     * @param mapping the action mapping\n     * @param domain the", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "           self.__tmp_dir, 'datastream')\n        self.__datastream_transport = self.__event_loop.run_until_complete(\n            self.__server.create_datastream_pipe(\n            self.__datastream_pipe_main_main_pipe_", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\tif (option1) {\n\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t\tif (jumpID == 0) {\n\t\t\t\t\t\t\tjumpID", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new PreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE,\n\t\t\t\t\t\t\"Auto save\", get", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.FinishSequence();\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner) : base(Core.ML ? 1", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._loaded_states = states\n        self._loaded_states_by_id = {}\n        self._loaded_states_by_class = {}\n        self._loaded_states = self._loaded_states = self._loaded_states = self._loaded_states = self._loaded_", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getType().getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\t\tif (named==null) { \n\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\")\n        if", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n    ##\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(0) > 0)\n                    {\n                        foreach (Skill.PossibleSkills.Skills.", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = android_builds(build, builds)\n    else:\n        builds = []\n    if build == 'aurora':\n        builds.append({'os': 'os_android',\n                       'os_pretty': 'Android',\n                       'arch_pretty", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (objectID!=null && objectID.equals(MatcherContext.PARAMETER)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (objectID!=null && objectID.equals(MatcherContext.PARAMETER)) {\n\t\t\treturn true", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if (argumentSyntax.Parent is InvocationExpressionSyntax invocationExpressionSyntax) {\n                    var argument = invocationExpressionSyntax.ArgumentList.Arguments.Single();\n                    if (argument.Parent is MemberAccessExpressionSyntax member", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the user_partition_id is set to 0.\n        split_test = self.get_item_from_modulestore(self.split_test_item_usage_key_usage", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           if (vertical) {\n                tmp.Add(GetCIDFontType2(piref, fontName, GetToUnicode(parms)));\n            }\n            else {\n                tmp.Add(GetFontBaseType(piref, fontName, GetToUnicode(", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn = new GraphNode();\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream inputStream = context.getAssets().open(model.getSprite());\n      Bitmap bitmap = BitmapUtil.", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeManageTagsForm(NodeView):\n    tag_category =", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\t\tdamage = compound.getInteger(\"Damage\");\n\t\t\t\n\t\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t\t{\n\t\t\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \"probability=\" + probability;\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(p.employ", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   display()\n    \"\"\"\n            else:\n                widget_dim = widgets.Dropdown(options=valid_dim_names, value=valid_dim_name, description='Dim:')\n                widget_x = widgets.Dropdown(options=widgets.options, description='", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n                if (root", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E merge(K key, E oldValue, E newValue) {\n\t\treturn read(key, internalMap.merge(key, search(oldValue), write(key, newValue)));\n\t}", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       rescomments = pdt.getDiscussions(query)\n        if len(rescomments) > 0:\n            objcommentslist = rescomments[0]\n            jsondata = jsondata = jsondata\n            jsondata = jsondata\n            jsondata", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Z;\n\t\tinternal byte m_Z;\n\t\tinternal byte m_Z;\n\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": request: {4}, path: {5}, param: {6}\",\n                ", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriods.Insert(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(column_headings", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('User not authorized to create group members')}\n    return {'success': True}\ndef group_member_create(context, data_dict):\n    return _group_or_org_member_create(", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\t\tint parentOutcome = splittedSet.getActualParentOutcome(resultIndex);\n\t\t\t\t\tint childOutcome = splittedSet.getActualChildOutcome(resultIndex);\n\t\t\t\t\tint childPartitionId = splittedSet", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = codePoint << 10;\n            if (offset < strlen) {\n               ch = string.charAt(offset++);\n               if (ch < 0x1000000000000000000000", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired) {\n            SampleDAO sampleDAO = new SampleDAOImpl();\n            Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n            if (sample == null) {\n                return ValidationResults.SAMPLE_NOT", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor (int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i]);\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonED", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    xbmc.executeb", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  del( pD[ 'plotName' ] )\n  del( pD[ 'plotName' ] )\n  del( pD[ 'plotName' ] )", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\t\tif (Info.BuildingLimits.ContainsKey(\"Production\"))\n\t\t\t\t{\n\t\t\t\t\tvar production = player.TraitsImplementing<IProductionManager>().FirstOrDefault();\n\t\t\t\t\tif (production != null", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       m_currentPlan = plan;\n        return plan.getPlanNodes();\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean inferSP, boolean lockInSP, DeterminismMode detMode) {", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(241, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\t\tdcb.BaudRate = baud_rate;\n\t\t\t\tdcb.Parity = parity;\n\t\t\t\tdcb.StopBits = bits;\n\t\t\t\tdcb.fBinary = true;\n\t\t\t\tdcb", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                           login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                        cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\t\tif entry[0] in newList:\n\t\t\t\t\tnewListIndex = newList.index(entry[0])\n\t\t\t\t\tcurrentListEntry = newList[newListIndex]\n\t\t\t\t\t\tcurrentListEntry\n\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(x * fontX, y * fontY, fontX, fontY);\n            }\n        }\n        \n        /** Gets the barcode.\n        * @return the barcode\n        */    \n        public override string Barcode {\n            get {\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 10.0)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\",", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            byte[] bytes = currPacket", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   print 'hello'\n    print '\\033[0m'\n    return 0\ndef get_timbre_pitches_loudness(wav_dir):\n    # get the timbre_pitches_loudness_start_time\n    # get", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "           set { _numValues = value; }\n        }\n        public bool HasNullEntry {\n            get { return _hasNullEntry; }\n        }\n        public int NullEntry {\n            get { return _nullEntry; }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Fonts.AutoScaleMode = System.Windows.Forms.AutoScaleMode.AutoScaleMode = System", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "       if not isinstance( original, self.functionType ):\n            raise TypeError( \"\"\"%s is not a %s\"\"\"%(original,self.functionType) )\n        if not isinstance( original, self.GLUT ):\n            raise TypeError( \"\"\"%s is not", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, emptyStreams.nextSetBit(0));\n            header.write(NID.kEnd);\n        }\n    }\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        header.write(NID.", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   if (System.currentTimeMillis() - start > rampDelay)\n                        inRamp = true;\n                }\n                else\n                {\n                    if (System.currentTimeMillis() - start > rampDelay)\n                        inRamp = false;", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) ', str(xcntr), '\t\t# X center of the object', \\\n                      ' (pixel number)\\n')\n        f.writelines(['G) ', str(ycntr_o_o_o_o_o_o", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key.make_locator()\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self._course_key = self._create_course_key()\n        self._create_course_location()\n        self", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\t\tfor(int i=0;i<splitNumber.length;i++) {\n\t\t\t\tif(splitNumber[i].equals(\"\")) continue;\n\t\t\t\tif(splitNumber[i].equals(\"-\")) {\n\t\t\t\t\tchance = chance", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            try:\n                os.makedirs(config_directory)\n            except:\n                module.fail_json(\"Could not create \" + config_directory)", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(248, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.Size = new System.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except:\n                self._log_plugin_exception(plugname, plugin, section, command,\n                                                  reporting", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   def getRoomFullName(self):\n        \"\"\" Session Room \"\"\"\nNext line of code:\n    def getRoomBookingList(self):\n        \"\"\" Session Room Booking List \"\"\"\nNext line of code:\n    def getRoomBookingList(self):\n        \"\"\"", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing message: \" + e.getMessage());\n                            setVisible(false);\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = messageBrowser.importMessages(fileTextField.", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Integer) {\n\t\t       \t\t\t\tlayer = ((Integer) value).intValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && !currentSession.equals(Session.getActiveSession())) {\n            userInfoSession = currentSession;\n            userInfoSession.fetchPermissions(new Session.StatusCallback() {\n                @Override\n                public void call(Session session, Session.Status status", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i = 0; i < emotions.length; i++)\n\t\t\tsum += emotions[i].strength;\n\t\tfor (int i = 0; i < emotions.length; i++)\n\t\t\temotions[i].str", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml_compare(self):\n        \"\"\"Test xml_compare(self.stages.to_xml_to", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if (NorthernHemisphere == 1):\n        LongRad = phi1Rad - LongOriginRad\n    else:\n        LongRad = phi1Rad - (6-LongOriginRad)\n    if (LongRad < 0):\n        LongRad += ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data['report']\n            if report == 'spam':\n                report_type = 'spam'\n            else:\n                report_type = 'ab", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   label = \"Add a new series\"\n    field_names = [\n        \"name\",\n        \"owner\",\n        \"active\",\n        \"autoupdate\",\n        \"series_name\",\n        \"series_description\",\n        \"series_description\",\n        \"series_", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic void ApplyTo(Form form)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"form\");\n\t\t\tif", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @param value\n     */\n    public void setValue(long value)\n    {\n        this.value = value;\n    }\n    /**\n     * @", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append(TagRegex(flag, regex))\n            return new_positional_tags_list\n    def compile_tag_regex_with_defaults(positional_tags, defaults):\n        if not positional_tags:\n            return", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsGenericTypeDefinition { get { throw new NotImplementedException (); } }\n            public override bool", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "   fields_desc = [\n        XByteEnumField('data', 0, obdStandards)\n    ]\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_ManufacturerSpecificData\"\n    fields_", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.bus_name.add_signal_receiver(self.listen, 'NameOwnerChanged', 'org.freedesktop.DBus')\n\t\tself.bus_name = self.bus_name.add_name.add_name.add_name.add_name", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(Prism), 104444040;\n                this", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       if self._preserved:\n            self._preserved_exc = sys.exc_info()[1]\n        self._preserved = False\n        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop()", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubscription.topic_name==topic_name)\n    return response\n# ###################################################################################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = (angles[0] * ray_trafo.range.meshgrid[1] + angles[1] * ray_trafo.range.meshgrid[2])\n    else:\n        raise ValueError('Parker weighting is only defined for 2d geomet", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       return regx\n    def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx\n        return regx\n        return regx", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\t\treturn type.ToString (fmt) + \" \" + unit.ToString (fmt);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, IFormatProvider fmt)\n\t\t{\n\t\t\tif (String.IsNullOrEmpty (s))", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tvar o1 = (JObject)obj.Properties[0].Value;\n\t\t\t\tAssert.That(o1.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\t\tAssert.That(o1.Properties[0].", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    Topic vertex1 = getVertexTopic(w, h, getTopicMap());\n                    Topic vertex2 = getVertexTopic(w, h + 1, getTopicMap());\n", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.config[\"setup\"][\"viscosity\"] = 1.0\n    ds.config[\"setup\"][\"lut identifier\"] = \"LE-2D-FEM-18\"\n    ds.config[\"setup\"][\"flow rate\"] = 0.0.0.0", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final String filename = args[0];\n        final String namespace = args[1];\n        final String timestamp = args[2];\n        final String filename2 = args[3];\n        final String namespace2 = args[4];\n        final String timestamp2 = args[5];\n       ", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should uninstall Yarta.\n\t * \n\t * When the function returns true Yarta will be uninstalled.\n\t * \n\t * @return true", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t}\n\t\tpublic void SetThreadAffinity()\n\t\t{\n\t\t\tif (SDL.SDL_GetCurrentThreadID() != SD", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat_inverse(\n            self.x_data_cov_matrix_data_data_cov_data_data_data_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                }\n              } catch (AuthException e) {\n                LOG.warn(\"Failed to lookup the account ID \" + walrusObjectKey\" + walrusObjectKey + \" in bucket \" + walrusBucketName +", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _initialized += value; }\n            remove { _initialized -= value; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command,\n                EngineMessage.ACTION_TYPE_FAI", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.status = self.status\n        if self.status = self.status\n        self", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder().MergeFrom(prototype);\n    }\n    protected Builder ThisBuilder {\n      get { return CreateBuilder(this); }\n    }\n    public partial class Builder : pb::GeneratedBuilder<b::Builder> {\n      public Builder() {\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getVertIndex(i, x));\n                else\n                    vertices[x] = vertices[x].set(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData.equals(\"true\")) {\n            result.add(COLUMNS_SORTABLE_LIST.get(COLUMNS_SORTABLE_LIST.indexOf(COLUMNS_SORTABLE_LIST.indexOf(COLUMNS_SORTABLE_LIST.", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\tif (dynamicHeight)\n\t\t\t\t{\n\t\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\t\tdisplayText.text = inputText.text;\n\t\t\t\t}\n\t\t\t\telse\n\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnResize(EventArgs e)\n    {\n      if (m_autoHeight)\n      {\nNext line of code:", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser != string.Empty)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send emails to the users\n            foreach (string user in Users)\n           ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (directions", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (CriteriaCodesUsed.Count > 1)\n            {\n                ValidationColumn = FMainDS.PcConference.Table.Columns[PcConferenceSetup.ColumnDiscountCriteriaCriteriaCodesUsed\n                Used\n                Used\n               ", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n    def __repr__(self):\n        return 'PayloadRequirements(packages=%s, groups=%s)' % (", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\treturn Enabled && CopyRange && CopyCustomEnabled;\n\t\t}\n\t\tpublic bool CopyCustomEnabled\n\t\t{\n\t\t\tget { return Enabled && CopyRange && CopyCustomEnabled; }\n\t\t}\n\t\t}\n\t\tpublic bool CopyCustom", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\tget {\n\t\t\t\treturn cacheDir;\n\t\t\t}\n\t\t}", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation sourceLineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (sourceLineAnnotation.getLineNumber() < 0) {\n                    throw new BugInstanceException(\"Line number must be >= 0\");\n               ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                        else\n                        {\n                            var eMobs = MinionManager.GetMinions(Me.Position", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['field_name'], field_model_def['field_name'])\n        self.assertEquals(\n            field_def['field_name'], field_model_def['field_name'])\n        self.assertEquals(\n            field_", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L, \"E1\", \"10\"}});\n                env.UndeployAll();\n                // widen to short\n                path.Clear();\n                path.Add(compiled);\n                env.Compile", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       c = self.copy()\n        return c.__imul__(other)\n    \n    def __truediv__(self, other):\n        if not isinstance(other, int):\n            return NotImplemented\n        c = self.copy()\n            return\n            return\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def _get_view_id(self, cr, uid, view_id, context=None):\n        \"\"\" Return the view id for a given view id \"\"\"\n        if isinstance(view_id, basestring):\n            return self.pool['ir.ui.view", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        else {\n            if (oldValue != null) {\n                c.removeClientProperty(BasicHTML.propertyKey);\n            }\n        }\n        c.setClientProperty(BasicHTML.propertyKey, value);", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   test()\n    \"\"\"\n    s = create(filename, contents=content)\n    assert s.name_is_testharness\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.namedquery = namedQueryReference;\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQueryParameter)\n\t\t{\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\t\tint memberCount = m_Members.Count;\n\t\t\t\tfor ( int i = 0; i < memberCount; ++i )\n\t\t\t\t{", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n        assert graphQueue.size() <= maxGraphs;\n    }\n    private void pushInvocation(MethodInvocation methodInvocation) {\n        invocationQueue.addFirst(methodInvocation);\n        assert methodInvocation != null;\n        assert methodInvocation.cal", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               self.pytest_command = \"pytest -s -v --cov=cfme --cov-append --cov-append-path={} --cov-append-path={} --cov-append-path={} --cov-append-path={} --cov-append-path={}", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(value, value.stamp());\n                    for (int i = 1; i < states.size(); i++) {\n                        phi.addInput(states.get(i).getCache", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraCapabilities */\n    public void handle", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t\tfrom.SendLocalizedMessage(1156691); // You are not allowed to use this item.\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfrom.SendLocalizedMessage(115", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.allids()\n] + [\n    'BibrecBib{0:02d}x'.format(idx)\n    for idx in range(100)\n] + [\n    'BibrecBib{0:02d}x'.format", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       \"\"\"Removes the user from the cache.\"\"\"\n        self.module.set(username, {'pass': self.get_random_password()})\n        self.module.set('all_users', set([u for u in self.module.get('all_users', set())", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the list of the", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    problematics = res['Value']\n    if not problematics:\n      res = self.transClient.setTrans", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\treturn null;\n\t\t} catch (URISyntaxException e) {\n\t\t\tif(logMINOR.MINOR) Logger.minor(this, \"", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LAB", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.scheme = 'http://www.google.com/atomcat'\n    self.category.extension_attributes['foo", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>();\n            for (Map.Entry<String, AnnotatedTypeMirror> r2) {\n               ", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   def draw_header(self, context):\n        self.layout.prop(mat, \"use_raytrace\")\n        self.layout.prop(mat, \"use_raytrace_options\", text=\"\")\n        self.layout.prop(mat, \"use_raytrace_options", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_IRQEnabled = map16.IRQEnabled;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem jMenuItem = new JMenuItem(oActionListener);\n            jMenuItem.setText(\"Open Document\");\n            _jMnuRoot.add(jMenuItem);\n        }\n        private void insertMenus(){\n            JMenu jMnuFile = new JMenu(\"File\");\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Layout.Measure (this, new Size (0, min));\n\t\t\treturn Layout.Measure (this, new Size (0, min));\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthTo", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement's tag.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug': self", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.append('php', PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?>\n# lexers.append('php', PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?>\n# lexers.append", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row = cursor.fetchone()\n    print \"Row is: \", row\n    print \"Row is: \", row[0]\n    print \"Row is: \", row[1]\n    print \"Row is: \",", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       print(\"db_set_last_snapshot\", project_id, timestamp)\n        try:\n            conn.table('projects').update({'project_id': project_id}, {'$set': {'last_snapshot': timestamp}})\n        except:\n            log(\"Error setting last", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t\tMsg(\"Huh? What are you talking about?<br/>I'm not a criminal!<br/>I'm just a shepherd...<br/>I'm not a criminal!<br/>I'm not a criminal!<br/>I'm", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codestr =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\nNext line of code:\n    def finish(self):\n        self.start = time.time()\n        self.finish = time.time()", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               else if (toastType.equals(TOAST_NONE))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n                else if (toastType.equals(TOAST", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_finalized_command (self, cmd_name):\n        \"\"\"", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(fieldName, entity, session, entity, cacheEntry, entity, entity, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-o', log_name,\n        '-c', 'sge_jobname=%s' % job_name,\n        '-c', 'sge_hostname=%s' % request['job_hostname'],\n        '-c', 'sge_run_cmd=%s' % request", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        //[RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(Delegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    if (obj is Vector2)\n                    {\n                        var vector = (", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "       else:\n            #try direct download\n            res = self.load(\"http://fileserve.com/premium/\",\n                            post={\"username\": self.user,\n                                  \"password\": self.account.getAccountData(self.user)['password'],\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\tif (path.Count == 0)\n\t\t\t\t\treturn null;\n\t\t\t\t// If the harvester is at the refinery, get out of the way:\n\t\t\t\tvar lastproc = harv.LastLinkedProc ?? har", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"service %s restart failed\" % service_name)\n                       return False\n                else:\n                    self.logger.info(\"dhcpd -t not requested\")\n        else:\n            self.logger.info(\"dhcpd not managed\")\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n        return Event.newBuilder(source).setSeverity(EventSeverity.INFO);\n        return Event.newBuilder(source).setSeverity(EventSeverity.INFO).setMessage(\"\");\n        return Event.newBuilder(source", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (; stateIndex < MAXIMUM_ORDER; stateIndex++)\n            {\n                states[stateIndex] = _allocator.AllocateUnits(1);\n                if (states[stateIndex].Frequency = 0;\n                if (stateIndex.Frequency =", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\tstring [] sessionValues = (string []) sessionValuesArray.ToArray();\n\t\tstring [] testsToDelete = findTestTypesInSession = findTestTypesInSession();\n\t\tstring []", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 8)\n        self.assertEquals(b'abcdefghij', self.read(o))\n    def test_smaller_than_file_at_end(", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X ", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], csi_95, 'k')\n    ax.fill_between(cr['combined'][app][VC]['durations'],\n                    csi_95[0], csi_", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self._testUIDGIDSwitch(1, 0, 0, 1, [1, 0, 1, 0], [1, 0, 1, 0])\nNext line of code:\n    self._testUIDGIDSwitch(1, 1", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[0])\n  if winner != 0:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult,", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, offset, value);\n        }\n    }\n    @HOSTED_ONLY\n    public void writeValue(ObjectMirror mirror, Object array, int offset, Value value) {\n        assert offset >= 0;\n        assert offset < Array.", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // check if the path is relative to the project directory\n            if (relativePath.StartsWith(Path.GetDirectoryName(SolutionTask.Project.Directory),\n                StringCom", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   string = string.format(*args, **kwargs)\n    return string\ndef str_format_with_color(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \"\"\"", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i19 - 1;\n        i2 = i2 - 1;\n        i2 = i2", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[]\n                    { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\nNext line of code:\n\t\twhen(securityContext.getCurrentUser().getTenantId()).thenReturn(\"test.tenant\");\nNext line of code", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            lambda: subprocess.Popen(\n                ['/sbin/modinfo', '-d', 'somemodule'],\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new ArgumentNullException(\"propertiesName\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new ArgumentNullException(\"configDirectory\");\n\t\t\tif (dataDirectory == null)\n\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal void SetIndex (Index index)\n\t\t{\n\t\t\tIndex = index;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection)\n\t\t{\n\t\t\t_constraintCollection = collection;\n\t\t}\n\t\tinternal void SetConstraint", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.setLayout(self.verticalLayout_2)\n        self.setWindowTitle(\"pyslvs_ui\")\n        self.setWindowIcon(QtGui.QIcon.setWindowIcon(QtGui.setWindowIcon(QtGui.setIcon(QtGui.setIcon", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               LayoutInflater inflater = getActivity().getLayoutInflater();\n                View view = inflater.inflate( R.layout.wx_status_layout, null );\n                TextView textView = (TextView) view.findViewById( R.id.wx_status_text );\n                textView.setText(", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= (uint)p[iBufferIndex];\n                uiCRCITTSum = (uiCRCITTSum >> 8) ^ (uiByteValue ^ (ulong)0x1021);\n                uiCRCITTSum = (uiC", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 10;\n\t}\n\tpublic void setShootingSpeed(int speed) {\n\t\tentityData.set(MODE, speed);\n\t}\n\tpublic void setMode(SentryMode) {\n\t\tentityData.set(SentryMode);\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(editor) };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(editor), \n                new JavaHy", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.setMargin(0)\n        self.l.setSpacing(4)\n        self.l.setAlignment(qt.Qt.Qt.Qt5.Qwt5.Qwt5", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\t\tcase 3: // Previous location\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttoSet = m_Mobile.Location;\n\t\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\t\tshouldSend = true", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\"\\t\"+totalWithAmount[i][j][maxChangesRecorded]+\"\\t\"+fractionWithAmount[i][j][maxChangesRecorded]+\"\\n\");", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTReturn {\nNext line of code:\n\t\t\tget { throw", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int userId = new Random().nextInt(SecurityManagerImpl.MAX_ID);\n        final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v.ScaleFactor (viewport).ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 viewport)\n\t\t{\n\t\t\treturn v.ScaleFactor (viewport).ToVector2 ();", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.packets != other.packets:\n            return False\n        if self.bytes != other.bytes:\n            return False\n        return True\n    def", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\tif(workerSocket!= null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(workerSocket.Connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!sending_data.Contains(i))\n\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    convertToStepBucketList(list);\n                    break;\n                case Activity:\n                    convertToActivityBucketList(list);\n                    break;\n            }\n            mRequestMap.remove(request", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if bind_count > 0:\n    print '                               %s%d%s)' % (optional_class, bind_count,\n                                                  optional_comma)\n  else:\n    print '                               %s%d%s)' % (optional_class", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(\n            [\n                range_item_dict(item)\n                for item in items\n            ]\n        ),\n        content_type=\"application/json\"\n    )\n    return response\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTSearchOptimizer optimizer = new ASTSearchOptimizer();\n       ", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n\n\nclass UserCreateView(CreateView):\n    model = get_user_model()\n    template_name = \"shoop/admin/users/create.jinja\"\n    form_", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable<IResource", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var w = new DenseVector(input.Count);\n            var wodd = new DenseVector(input.Count);\n            var weven = new DenseVector(input.Count);\n            var x = new DenseVector(input.Count);\n            var xodd = new", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\nNext line of code:\n\t\t\t\tApfloat[] leftMedian = getMedians(sortedNumbers, left, right);\n\t\t\t\tApfloat[] rightMedian = get", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if sample_count[v, j] == 0:\n                    sample_count[v, j] = 1\n                if sample_count[edge.parent, j] == 0:\n                    sample_counts[edge.parent[edge.parent[edge.parent", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in mapping_json['mappings']:\n            if mapping['type'] == 'sh':\n                result[mapping['type']] = csv_mapping.get_mapping(mapping)\n        return result\n    def _test_enrich_to_raw(self, sortinghat", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"bot \" + slot", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override void PrintStackTrace()\n\t\t{\n\t\t\tif (_rootCause != null)\n\t\t\t{\n\t\t\t", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n    def __repr__(self):\n        return '<DataFrame length: {}, flags: {}, stream_id: {}, data: {}>'.format(\n            self.__len__(),\n            '<{}>'.format(','.join(", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var bb = cluster.BoundaryCurve.BoundingBox;\n            if (bb.Width < 0)\n                throw new Exception(\"bounding box of cluster is negative\");\n            if (bb.Height < 0)\n                throw new Exception(\"bounding box of cluster is", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeDegrees = btRadians(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians = btRadians(m_", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() == 1 && canBeLeaked(initializers.get(0))) {\n            checker.report(Result.failure(\"unique.leaked\"), initializers.get(0));\n        }\n        return super.visitNewArray(node,", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = typeAttribute.Value;\n\t\t\t\t\t_returnType = _returnType.Trim();\n\t\t\t\t\tif (_returnType.Length > ", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\t\tmyTrackBar.Width = 80;", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isAbstractionActive() != other.isAbstractionActive())\n\t\t\treturn false;\n\t\tif (this.isImplicit() != other.isImplicit())\n\t\t\treturn false;\n\t\tif (this.postdominators ==", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'pg_dump',\n                '--no-owner', '--no-acl', '--no-tablespace',\n                '--no-privileges', '--no-owner-all',\n                '--no-acl-all', '--no-tablespace',", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\t\t", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a material name.\n\t *\n\t *\n\t *\n\t *\n\t *\n\t *\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( !(proxyThat instanceof Contact) ) {\n\t\t\treturn false;\n\t\t}\n\t\tContact that = (Contact) proxyThat;\n\t\tif ( !super.equals(that) ) {\n\t\t\treturn false;\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t  if n % n_save == 0:\n\t    print((\"SAVING CONFIGURATION : %s\" %n))\n\t    if (reject_wall+reject_jump) == 0:\n\t      status = 'w'\n\t    else", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is not None:\n            if cdata.ndim == 0:\n                # FB: This is a scalar tensor, so we can't optimize it\n                return\n            if cdata.shape == shape_of(node.inputs):\n                return\n    elif", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n\nclass RequestCommunityPageForm(ModelFormWithHelper):\n    \"\"\"Form to request a new CommunityPage\"\"\"\n    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user')\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n                return query\n            event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(retval=retval, **kw):\n        if not retval:\n        if not retval:\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           for location in self.show_tag_list:\n                self.runtime.add_block_as_child_node(self.get_child_by_location(location), xml_object)\n        return etree.tostring(xml_object)\n    def get_children(", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key, old_value, new_value in data_model_changes]\n        return global_changes\n    def translate_selection(self, data_model_changes):\n        def to_global(key):\n            return self._map_global_to_filtered(self.", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t\tif (Class == null && Method != null && Field != null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' and 'field' attributes with 'type' attribute for ld", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.1\",\n                                   \"test/mail/sync", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tif(wand.getItem() == Botania.botaniaItems.botaniaWand) {\n\t\t\t\tif(wand.getItem() == Botania.botaniaItems.botaniaWand) {\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getIntrinsicCohesion(component);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private float get", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if not are_equal:\n        raise Exception(\"ERROR: Document %s: Expected moreinfo %s and got %s\" % (str(docid), str(minfo), str(are_equal)))\n    return are_equal\ndef _retrieve_fulltext_rec", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\tcomputerMgmt.Dispose();\n\t\t\tcomputerMgmt=null;\n\t\t\tcomputerMgmt=null;\n\t\t\t\tcomputerMgmt=null;\n\t\t\t\tcomputerMgmt=null;\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates an occurrence of the specified event.\n   * @param event the", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.DataTarget = new dfComponentMemberInfo() { Component = this.gameObject, MemberName = sourceProperty };\n\t\tsourceEventBinding.Bind", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName,\n                    this);\n            List<String> spanPorts = new ArrayList<String>();\n            for (String port : jsonData.split(\",\")) {", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\tCore = new CoreImages();\n\t\t\tCore = new CoreImages();", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n        }\n    public int randomChoice(List l) {\n        return randomChoice(l.size());\n    }\n    public int randomChoice(List l, int min, int max) {\n        return randomChoice(l.size(),", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   la = LinkAnnotation()\n    la.subject = man_obj.uuid  # the subordinate is the subject\n    la.subject_type = man_obj.item_type\n    la.project_uuid = man_uuid\n    la.source_id = 'source_id'", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinkfit  = \")\n                .Append(StringUtil.ToHexString(ShrinkFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells  = \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t\t// This range contains half-width kana.\n\t\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.A[b]\n    off10 = off1//off2\n    src2 = env.cst(off10.int(-1),10)\n    obj.operands = [src1 = src2 = src2 = src3 = src4", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\t\tstream = location.getInputStream();\n\t\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\t\tpropertiesMap.loadProperties(stream, close);\n\t\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n        /**\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tSecurityIdentifier everyoneSid = new SecurityIdentifier (\"WD\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       for result in releases:\n            self.__queue.put(result)\n        self.__idle(self.__process, self.__queue)\n    def run(self):\n        self.__process(self.__queue)\n        self.__idle(self.__done)\n    def stop(", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonEditor.Current.RpcList.Count > 0)\n        {\n            foreach (var rpc in PhotonEditor.Current.RpcList)\n            {\n                if (rpc.Contains(\"RPC_LIST_START\")\n                if (r", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       full_subj.setText(message.subject);\n        full_from_to.setText(message.from_to);\n        full_date.setText(message.date);\n        full_msgid.setText(message.msgid);\n        full_echo.setText(message.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           if time_reversal:\n                return psit_G.conj()\n            else:\n                return psit_G\n            # Transform to BZ\n            psit_G = np.dot(self.symmetry.op_scc[s], psit", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 2555));\n        Response response = utkastController.createUtkast(inty", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\tif (prevChildAsBB == null) {\n\t\t\t\t\t\tprevChildAsBB = child;\n\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (IsRagdoll) {\n\t\t    mInitialized = true;\n\t    if (IsRagd", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        self.layer_type = LayerType.fracture\n        super().__init__(config)\nclass BulkLayer(GeoLayer):\nNext line of code:\n    def __init__(self, config={}):\n", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)((num >> 24) & 0xff);\n        out[outOff + 2] = (byte)((num >> 16) & 0xff);\n        out[outOff + 1] =", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                new PatternMatcher().match( source.iterator().next(),\n                    source.iterator().next().getAssociation() ),\n                new PatternMatcher().match( source.iterator().next(),\n                   ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n           }\n        }\n     ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   print getLC('J0000000000000000000000000000000000000000000000000000000000", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new ContentValues(), \"ID_GROUP = \" + newId, null);\n                    //Delete budget items\n                    db.delete(Db.Table4.TABLE_NAME, Db.Table4.ID_GROUP + \"", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n                else\n                {\n                    throw new NotSupportedException();\n                }\n            }\n        }\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n####################\n# USER ACCOUNTS #\n####################\nACCOUNT_ACTIVATION_DAYS = 7\nACCOUNT_AUTHENTICATION_METHOD = 'username'\nACCOUNT_LOGIN_URL = '/accounts/login/\nACCOUNT_LOG", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tvar item = queue[0];\n\t\t\t\tif (item.Paused)\n\t\t\t\t\titem.Paused = false;\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        infoText +=  str(numberOfHiddenFiles)\n        infoText += \" hidden file\" if numberOfHiddenFiles==1\n        infoText += \" hidden file\" if", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%(\\w+)%', self.vars, code)\n        self.outputs[0].write(code)\n    def __init__\n    def __init__\n    def __init__\n    def __init__\n    def", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n        #return result\n        #return result\n        #return result\n        #return result\n        #return result\n        #", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 1 ]\n\t\t\t\t\t\t\t\t\t\t, hdiv0 );\n\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n           ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config(commands)\n    def config_ntp_auth_enable_by_cli(self):\n        \"\"\"Config ntp authentication enable by the way of CLI\"\"\"\n        if not self.module.check_mode:\n        if not self.check_", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(self.store.get_item(component.location).edited_by, editing_user)\n        # Verify that the component was edited by editing_user\n        self.assertEqual(self.store.get_item(component.location), self.get_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch);\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n    }\n    public void ignorableWhitespace(char", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\nNext line of code:\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\nNext line of code:\n    return aetypes.Logical(dict)\ndef", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            if (string.IsNullOrWhiteSpace(controllerName))\n            {\n                throw new ArgumentException(\"controllerName\");\n            }\n            if", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_open_remote(record, column.name, True, value,\n                callback=self.on_open_remote_callback)\n            return True\n        return False\n    def on_open_remote_callback(", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The bean name of the global-properties bean.\n     */\n    private static final String BE", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readline()\n        except IOError:\n            # No blank lines in file\n            f.close()\n            f = None\n    if f is None:\n        module.fail_json(msg=\"Unable to open %s\" % path)\n    if not os.", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guid", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       spm.addPrincipalToPrincipal( directedAclKeys.getPrincipalId(), directedAclKeys.getPrincipalType(), directedAclKeys.getPrincipalAclKey() );\n        return null;\n    }\n    @Timed\n    @Override\n    @", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This verifies the tag of an element.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndef _get_elements_by_tagName_helper(node, name, result):\n    if node.nodeType == Node.DOCUMENT_NODE:\n        return\n    if name == \"\":\n        return\n    if name == \"\":\n        return\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTestCase();\n\t}\n\t/**\n\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocator, endOffset)) {\n\t\t\t\tif (decoder.readTypeAndLength(TlvTypeCodes.KeyLocator, endOffset))\n\t\t\t\t\tkeyLocator", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        //updates the HUD\n        display.update(delta);\n        \n        //Updates the map\n", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getGameJoinManager().add( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    //", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error downloading file: %s\" % r.data.decode(\"utf-8\"))\n    if progress:\n        log.info(\"Downloading %s\", url)\n    filename = get_filename(r.headers)\n    with open(filename, \"wb\")", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response.Success)\n\t\t\t\t{\n\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\t\tfail", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Reaction must have only one metabolite component to compute weight.\"\n        )\n    return [coeff for met, coeff in reaction.metabolites.items()]\ndef", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            submitted_by=user,\n        )\n        #return self.get_queryset().filter(\n        #    store__path__startswith=pootle", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Test',\n            fields=[\n                ('id', models.", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"Got ARP request: {} -> {}\".format(str(poxpkt.payload), self.ports[portnum].link.egress_name))\n                self.ports[portnum].link.flowlet_arrival(OpenflowMessage(FlowIdent", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      removeRecentItem(m_RecentItems.size() - 1);\n    m_RecentItems.add(item);\n    write", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompAnySets() {\n\t\t\tBitArray any = new BitArray(Symbol.terminals.Count);", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\t\tWriteReport(buff);\n\t\t\t\tif(mReadDone)\n\t\t\t\t{\n\t\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k++; i < N1 + N2 + N3; i++, k += 2)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0x12;\n            for (", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n        rate.delete()\n        rate.delete(cancel=True)\n        rate.delete(cancel=False)\n        rate.delete(cancel=False)\n        rate.delete(cancel=False)\n        rate.delete(cancel=False)\n        rate", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.LockedPtr, length );\n\t\t\t\t\tshadowBuffer", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.satfinder_scan_nims.addNotifier(self.openPlugin, initial_call = False)\n\t\tself.satfinder_scan_nims = ConfigYesNoData.getSatData(self.getSatData)\n\t\t", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(TcpAddress.TcpAddressMask.fromString(filterStr));\n            }\n            return;\n        case ZMQ.ZMQ_DELAY_ON_DISCONNECT:\n            delayOnDisconnect = (Integer) opt", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded data\n                for (int i = 0; i < bytesPerRow; i++) {\n                    fout.Write(curr[i]);\n                }\n                prior = curr;\n            }\n            return fout;\n            return;\n            return;", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "               except:\n                    output += \"no product\\n\"\n        _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n    def get_massey_product_massey_product(self.get_", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1: 123\",\n                \"23\");", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Clear() );\n\t\t}\n\t\tinitialize( true );\n\t\tmap.clear();", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an item\n\t\t/// </summary>\n\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'warning': _('Attendance changed')}\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message,\n            next_action defines which menu the", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tif (orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull())\n\t\t{\n\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if not self.terminator.doing_layout:\n            self.terminator.last_active_window = self.uuid\n        if self.terminator.doing_layout:\n            self.terminator.last_active_window = self.uuid\n        if self.termin", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( nameArraySizeFragment, managedType, marshalAttribute, arraySize ) );\n                }\n                else {\n                    throw new UnknownTypeException( 1, null);\n                }\n            }\n            throw new UnknownTypeException", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsValueTypeDefinition {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region public methods\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        ///", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.ciphers = None\n        self.verify_mode = None\n        self.verify_depth = None\n        self.verify_errors = None\n        self.verify_cascades = None\n        self.verify_hostname = None\n       ", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\t\tthis.label4 = new global::Gtk.Label ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].set_tab_reorderable(True)\n                notebooks[\"statusbar\"].set_tab_reorderable(True)\n                notebooks[\"board\"].set_tab_reorderable(True)\n                notebooks[\"statusbar\"].set", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Move-Tab-to-left\": QKeySequence(Qt.Key_Left),\n    \"Move-Tab-to-right\": Q", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName +\n\t\t\t\t\", persistenceProviderClassName=\" + this.persistenceProviderClassName +\n\t\t\t\t\", transactionType=\" + this.transactionType +\n\t\t\t\t\", nonJtaDataSource=\"", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected boolean isFileReadOnly(IEditorInput input)\n  {\n    return isFileReadOnly();\n  }\n  \n  protected boolean isFileModified()\n  {\n    return false;\n  }\n  \n  protected", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 65);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC1_Normal ()\n\t\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitcher.option_1) {\n\t        case option_1:\n\t            current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t            current_sum += 4;\n\t            break;\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"InstallationFolder\").ToString();\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (String.IsNullOrEmpty(javaHome))\n        return null;", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = name\n        # if we didn't find it, try to find it by the job\n        if comment is None:\n            for l in self.lines:\n                if re.match(r'%s' % self.ansible, l):\n                    comment = l", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "       modifier.vertex_group = modifier_json['vertex_group']\nclass MeshModifierVERTEX_WEIGHT_PROXIMITY_GROUP(MeshModifierCommon):\n    @classmethod\n    _to_to_spec(modifier_json, mod", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts == null)\n                continue;\n            double minLikelihood = min(MIN_EMPTY_PEP_LEN_LIKELIHOOD, totalPositivesCount / MIN_EMPTY_PEP_LEN_FACTOR);", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, option, cap=None):\n        if option == 'help':\n            self.print_usage()\n        elif option == 'list':\n            self.print_packets(self.cap)\n        elif option == 'exit':\n            return\n        else:", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 169);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'content': ('editorsnotes.main.fields.XHTMLField', [], {'null': 'True', 'blank': 'True'}),\n            'created': ('django.models.fields.blank': 'True', 'last_", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               if (isReturnAllTypes()) {\n                    getGeneratedTypes().put(new QName(targetNamespace, sdoTypeName), lookup);\n                }\n                return false;\n            }\n        }\n        }\n        return alreadyProcessed;\n        }\n        }\n       ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'}, context=context=context\n        )\n        return True\n        return True\n        return True", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the delegate that is called when the user selects a row in the grid\n        /// </summary>\n        public EventHandler<BusinessObjectSelected> BusinessObjectSelected\n        /// <", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0} {1} {2}\", mixerLine.dwLineID, mixerLine.dwComponentType, mixerLine.dwDestination);\n        }\n        /// <summary>\n        /// Gets the mixer line info\n       ", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\t\tif (valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazily load, as the set method is only called when the set method of the set method of the set:\n\t\t\t\t\tvalueObject value1", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--features\", \"%s\" % ' '.join(features), \"--target\", \"x86_64-apple-darwin\", \"--release\", \"--verbose\", \"--jobs\", jobs, \"--\", \"--\", \"--\",", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t\tdouble estN = counts[3];\n\t\t\tif (estP > 0) {\n\t\t\t\testP = 0;\n\t\t\t}\n\t\t\tif (estN > 0) {\n\t\t\t\testN = 0", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, gitStash.Name, gitStash.Message, gitItemStatuses, gitStash.Name, gitStash.Message);\n            }\n            Loading.IsAnimating = false;\n            Loading.", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   st_AssignAddressItem_print_out(ptr_item_0_to_2)\n    st_AssignAddressItem_print_out(ptr_item_0_to_0)\n    st_AssignAddressItem_print_out(out0_to_bm", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\nNext line of code:\n        if (o instanceof AuthScope) {\n            AuthScope that = (AuthScope) o;\n            return LangUtils.equals(this.scheme, that.scheme) &&\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]);\nNext line of code:\n            return;\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusMehrerenChargennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto>", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args.index_file)\n    if not archive_index.exists():\n        log.msg('Archive index does not exist - going through first time setup')\n        log.msg('===== First Time Setup =====')\n        log", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_token = mosi\n        self.cmd_token_bits = miso\n        self.bit_ss, self.bit_es = self.mosi_bits[0][1]\n        self.bit_ss, self.bit_es = self.mosi", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (!(eq_s_b(1, \"a\"))) {\n            break lab0;\n          }\n          // <-, line 200\n          slice_from(\"a\");\n          break lab0;\n        } while (false);\n        // (, line ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null) {\n                    o = cls.newInstance();\n                    cd.last = o;\n                    cd.fingerprint = fingerprint;\n                    cd.cls = cls;\n                    cd.nreceived++;\n                    cd.", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result, extension.critical\n    \"\"\"\n    def _get_extensions(self):\n        return [\n            [\n                crypto_utils.pyopenssl_normalize_name,\n                to_text\n            ]\n            for extension in self.get_extensions\n       ", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\t\tstill_there = i->first->is_connected ();\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t\"\"\", file=f)\n    print(\"\\t\\t\\t\\t\", file=f)\n   ", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   if X.begin >= 0x10000:\n        return [ X, X ]\n    else:\n        return [ X ]\ndef do_set_for_utf8(sm):\n    \"\"\"This function is called by the 'utf8_state_split' algorithm", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t\tif (StartOf(13)) {\n\t\t\t\t\tGet();\n\t\t\t\t\tint beg = la.pos; int col = la.col;\n\t\t\t\t\twhile (StartOf(14)) {\n\t\t\t\t\t\tGet", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc.update({\n                    'product_id': line.product_id.id,\n                    'product_uom': line.product_uom.id,\n                    'product_qty': line.product_qty,\n                    'price_", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    @Test\n    @Test\n    @Test\n    @Test\n    @", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    device.check_inspection()\n    device.notification_postDevicetoken(loginId, password)\n    device.newUser(loginId, password)\n    device.mainmenu()\n    device.endTutorial()\n    device", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "       elif (index_elements[0] == \"Alpha Scatter:\"):\n            rv['fitScatter'] = float(index_elements[1])\n        elif (index_elements[0] == \"Mode: \"):\n            rv['mode'] = index_elements[1]", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                ItemID = m_Keys[0].ItemID;\n            }\n            else\n            {\n                ItemID = 0;\n            }\n        }\n    }\n}\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices){\n            // DRS 20120315 - Added 1 - If there are valid captures, then wait, try again, and set liveDevice.\n            boolean liveDevice = false;\n            boolean liveDevice = false;\n            boolean", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length == 0) {\n        throw new RuntimeException(\"Missing regex in line \" + lineCount);\n      }\n      if (split.length > 1) {\n        throw new RuntimeException(\"Too many fields in line \" + lineCount);\n      }", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if SCons.Util.is_List(env['ENV'][var]):\n                env['ENV'][var] = os.pathsep.join(env['ENV'][var])\n            # Append the trailing os.pathsep character here to catch the case with no env[var", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, query):\n        return None\nNext line of code:\n    def features_at_point(self, point):\n        return None\nNext line of code:\n    @classmethod\n    def features(self, *args, **kwargs)\n    \"\"\"\n   ", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       if self.want.destination != self.have.destination:\n            raise F5ModuleError(\n                \"The destination cannot be changed\"\n            )\n    @property\n    def ip(self, param):\n        if self.want\n        if self.want\n       ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Automate Method' and\n            self.datastore.is_opened and\n            check_tree_path(\n               ", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getClassByName(), \"\n                    + \"class (\" + className + \"/\" + classPath + \") not found.\", null);\n        }\n        return result;", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\", \"title\": \" \"},\n            mock_request\n        )\n    def test_update_thread_no_title(self, mock_request", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return embedManifestDllAction(target, source, env)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedManifest", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getShell(), new SubProgressMonitor(new ProgressMonitorAdapter() {\n                public void subTask(IProgressMonitor monitor) {\n                    monitor.beginTask(getOperationMessage(), 1000);\n                }\n            }));\n        } catch (Core", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('1230+5', last) == (d(2014,1,31, 12,30), d(2014,1,31, 12,31, 12,31, 12,", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Spawns\n            int count = 0;\n            if (count.Length == 0)\n                count = 0;", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is not available.\")\n        if not o:\n            raise exceptions.TestFail(\"Guest system log is", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc = service.submit(pub);\n        rc.get();\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        ZMQ.msleep(1000);\n        assertThat(rc.is", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t\treturn (value <= 0x7F) ? (uint)value : (value <= 0x3FFF) ? (uint)((value >> 8) | 0x80) : (uint)((value >> 24) | 0xC0", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.copy.append(one_file.path)\n        self.fm.env.copy.append(one_file.dirname)\n        self.fm.env.copy.env.copy.append(one_copy.path = one_copy.path = one", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       fr = Locale.objects.get(code='fr')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"texture_url\" in cmd.parameters:\n                userstate.texture_url = cmd.parameters[\"texture_url\"]\n            if \"texture_url\" in cmd.parameters:\n                user", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeLeader(PlayerGroup group, Player newL", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       if formatter == \"Null\":\n            formatter = Formats.get(conf.UI.formatter)\n        if formatter == \"Null\":\n            formatter = \"Null\"\n        if formatter == \"Null\":\n            formatter = \"Null\"\n        if formatter", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column._update_cell_based_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                Dialog.LoadXML(element, version);\n            }\n            catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Convert.ToString(GUID) +", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                       m_key[i] = new ExodusActivation();\n                    else if (m_Peerless == PeerlessList.MelisandeTrammelFelucca)\n                        m_PeerlessList.MelisandeFelisandeF", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t\tcoll.add(beans[x]);\n\t\treturn coll;\n\t}\n\tpublic ChangeOfServiceVo get(int index)\n\t{\n\t\treturn col.get(", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "               new Version(1, new int[]{0, 0, 0, 0}, new ECBlocks(1, new ECB(1, 1))),\n                new Version(2, new int[]{0, 0, 0, 0}, new ECBlocks(2", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\tbyte[] pbC = kdf.ComputeHash(pbMsg);\n\t\t\tif(!MemUtil.ArraysEqual(pbC, pbExpected))\n\t\t\t\tthrow new SecurityException(\"Argon2\");\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (boolean) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but LED_Queue has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\t\tLightCount));\n\t\t\t// Clone the frame to avoid any reference links\n\t\t\tLayer result = NextFrame.Cl", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = DriverCall.typeFromCLCC(p.readInt());\n            dc.callerId = p.readString();\n            dc.callerId = p.readString();\n            dc.", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.get", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                newVertices[x * ySizeP + y] = new Vector3(x, y, 1);\n                newNormals[x * ySizeP + y] = new Vector", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\tresult = client.call(API_METHOD_ADD, new Object[] { testInt1 });\n\t\t\t\t\n\t\t\t\tif (result == 0)\n\t\t\t\t\t{\n\t\t\t\t\tLog.i(TAG, \"Connection", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\t\treturn new int[0];\n\t\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn new int[0];\n\t\t\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position) <= spell.Range + spell.Width + 100)\n                                    &&\n                                    minionPrediction.Hitchance >= HitChance.Impossible)\n                                    return result.Add(spell.Minions.Hero", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isDefCollider(x, y, graph.getNode(x))) {\n            return true;\n        }\n        if (graph.isDefCollider(y, x, graph.getNode(y))) {\n            return true;\n        }\n        List", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child=pop[i];\n                    if (child is PlaceBase)\n                        plcs.Push(child as PlaceBase);\n                    else if (child is Drawable)\n                        plcs.Push(child as Drawable);\n                }\n            }\n           ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.getFinancialEntityId() == null) {\n            if (other.getFinancialEntityId() != null) {\n                return false;\n            }\n        } else if (!this.getFinancialEntityId().equals(other.getFinancial", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.Visible && mobiles[i] != from && SpellHelper.ValidIndirectTarget(from, mobiles[i]))\n                        {\n                            from.DoHarmful(mobiles[i]);\n                            AOS.Damage(", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (IsUser(user))\n\t\t\t{", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.channel.close();\n        this.channel = null;\n        this.l = null;\n        this.o = false;\n        this.p = false;\n        this.m = null;\n        this.n = null;\n        this.i.clear();\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_arr[p_index, z_key, z_dict[z_key][kk]] = z_dict[z_key][kk+1]\n                z_err_arr[p_index, z_key, z_dict[z_key][z_dict[", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      return context.getString(resourceMany,\n                               recipients.size(),\n                               recipients.subList(0, 2).toShortString(),\n                               recipients.subList(2, ", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GOONK_BUILD_ID\"] = self.", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    tests.add(test.to_json())\n            for path, tests in iteritems(type_paths):\n                for test in tests:\n                    tests.add(test.to", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.setScript(null);\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding(new Object[]{});\n    }\n    private CompilerConfiguration create", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        grad_Etf = grad[i].flatten()\n        grad_Etf = grad_Etf * grad_var + energy_var * grad_Etf + grad_means\n        grad_Etf = np.reshape", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive);\n\t\tif (!(OrderInvestigationForStatusChangeVo.class.isAssignableFrom(obj.getClass())))\n\t\t{\n\t\t\tthrow new ClassCastException(\"Cannot compare OrderInvestigationForStatusChangeVo", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n        assertTrue(found.contains(stacks[0]));\n        assertTrue(found.contains(stacks[2]));\n    }\n    @Test(expectedExceptions = NullPointerException.class)\n    public void should", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterFamily(pf);\n        parameter.setParameterName(CrawlerServiceImpl.DEPTH_PARAMETER_NAME);\n        parameter.setParameterValue(depth);\n        parameter.setParameterType(ParameterType.IN", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t\tif (kind == LNodeKind.Block)\n\t\t\t{\n\t\t\t\t// [$capture] (...)\n\t\t\t\tif (candidate.Kind == LNodeKind.Block)\n\t\t\t\t{\n\t\t\t\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Count > 0)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = colisionList[0].Position;\n                    }\n                }\n                int shortenWillHit = MinionManager.GetMinions", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tcontextMenus = new ContextMenus();\n\t\tcontextMenus.contextMenuContractsGP = factory.createMenu(startControlID.intValue() + 100001, form.contextMenus.contextMenus.contextMenus.contextMenus.context", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.search(pattern, frozen_output, re.M)\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(1, 1, 1)]\n        })\n        f = Form(r, view='test_testing_utilities.o2m_parent')\n        with f.subs.edit(index=0) as sub:\n            sub.value = ", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2)) == Sum(x, (x, 1, 2))\n    assert Sum(x, (x, 1, 2, 3)) == Sum(x, (x, 1, 2), (x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            writer.close();\n            writer = new StringWriter();\n            InputSource inputSource = new InputSource(writer.toString();\n            writer.close();\n            writer.close();", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.C", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"Color Count: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               JSR.addToSuccessor(l);\n            }\n            if (l.inSameSubroutine(this)) {\n                l.addToSubroutine(id, nbSubroutines);\n            }\n        }\n        }\n        }\n            if (", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.getPosition());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {return comboLabelPosition.getSelection();}\n\t\tprivate void setPosition(Position position) {comboLabelPosition.select(position.getPosition", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, currImageValue\"\n        self.assertEqual(int(currImageValue, int(lastImageValue, int(last", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport._set_K_H(self.f, srv_token)\n        self.transport._expect_packet(MSG_KEXGSS_COMPLETE,\n                                      MSGSS-API_COMPLETE,\n                                      MSGSS_COMP", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           if (disableTreeSelection) {\n                tree.setSelectionRow(0);\n            }\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree.setSelectionRow(0);\n            tree", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or 0.0\n        class Contract(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the python", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(cosmo.dVdzdOm(zi))\n        #OK\n        #Need to give mass * h and get sigma_mvir and sigma_m_vir and sigma_vir = np.array(np.array(np.", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.setSize(font.getSize() * 2);\n        return d;\n    }\n    \n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        setFontSize(font.getSize());\n    }\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.cal_p2(phi=phi,ref_p=anchor1,flag='off_center')\n        self.cal_p2(phi=phi,ref_p=anchor1,flag='off_center')\n        self.cal_p2(phi=phi,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t\twindow.IsVisible = true;\n\t\t}\n\t\tprivate void ShowOrHide(Window window, bool show)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t\t\tthrow new ArgumentNullException(\"", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   for n in xrange(params[0]['nbins'])\n                    ]\n            elif params[0]['bins'] is not None:\n                Object.__init__(self, name, title,\n                    params[0], params[0], params[1, params[1],", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getXmpp().getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (addLog24(tag.readRecord(sfi), ret))\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> l) {\n\t\tfor (byte[] log : l)", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "           return \"Unknown block %u\" % self[\"block_type\"].value\n\nclass ACE(Parser):\n    def __init__(self, filename):\n        Parser.__init__(self, filename)\n        self.block_type = 0\n        self.current_size = ", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       path = environ['PATH_INFO']\n        for app in self.apps:\n            if path.startswith(app[0]):\n                return app[1](environ, start_response)\n        return self.default_app(environ, start_response)\n\nclass Server:", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( sys.argv[ 1 ] , sys.argv[ 2 ] )\n\t\tmodel.initialize()\n\t\tmodel.setnetwork( model.network )\n\t\tmodel.trainmodel()\n\tmodel.loadmodel()\n\tmodel.loadmodel()\n", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n                res = EnhanceResult.Success;\n        }\n        public static void CheckResult(ref EnhanceResult res, int chance, int min, int max)\n        {\n            if (res == Enh", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_name, entry_value, displayname, desc)\n        return entries\n    #--------------------------------------------------------------------------------\n    def parse_enumeratedValues(self, type_name):\n        \"\"\"\n        def_ =", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Fatal Error:\\nUnable to locate any modules for FOG Service!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate any modules for FOG Service", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n            }\n        }\n        }\n       ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if not exposedHeaders:\n        exposedHeaders = exposedHeaders + ', ' + header\n    else:\n        exposedHeaders = exposedHeaders + ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef expose_headers(request):\n   ", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired(now))\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                    else\n                        break;\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\ndef _capture_subarguments(params, name, sub_arguments):\n    \"\"\"Capture subarguments from a dictionary of parameters.\n    Args:\n        Dictionary of parameters\n        Dictionary of parameters\n    Returns:\n    \"\"\"\n   ", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(20670,20671,20954,20956,20958", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value / 60) % 60);\n\t\t\t\t\t\tempty = string.Concat(", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Attributes = new AttributeCollection(this);\n        }\n        public void Dispose()\n        {\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       for reaction in self.reactions:\n            reaction._model = self\n        for metabolite in self.metabolites:\n            metabolite._model = self\n        for gene in self.genes:\n            gene._model = self\n        for reaction in self.reactions", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (Object bean : beans)\n\t\t\tcoll.add((TumourGroupListVo)bean);\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\t\t\t\theight", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\tprivate void doNavigationBack() {\n\t\tif (mNavigationList.size() > 1) {\n\t\t\tmNavigationList.remove(0);\n\t\t", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n        }\n        /// <summary", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscores \t\t= new int[length];\n\t\tchar[] \t\tstructure \t= protein.getStructure();\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
